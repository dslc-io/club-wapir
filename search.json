[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is a companion for the book Web APIs with R by Jon Harmon (in progress, aiming for publication in 2024).\nEach chapter title to the left is a link to a slide deck.\n\nThese slides are being developed as I write the book.\n\nThey are currently more up-to-date than the book itself.\n\nEach deck will open in its own tab.\nYou may want to type ‚Äús‚Äù at the start of each deck to open the speaker notes. Since these slides are structured like a talk, I tend to make a lot of notes to myself there to expand on the information in the slide.\nSlides often have a ‚ÄúTODO‚Äù section at the start, with notes that I plan to implement on my next pass through the book.\nJoin the Data Science Learning Community to participate in the discussion!\n\nWe follow the Data Science Learning Community Code of Conduct.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "slides/los.html#what-type-of-los-are-we-focusing-on",
    "href": "slides/los.html#what-type-of-los-are-we-focusing-on",
    "title": "Learning Objectives",
    "section": "What type of LOs are we focusing on?",
    "text": "What type of LOs are we focusing on?\n\nReaders probably solving semi-specific problems, so‚Ä¶\nSkill-based learning objectives\n\n‚ÄúAfter you read this chapter, you will be able to‚Ä¶‚Äù\n\n\n\n\nAny disagreement with that first bullet?",
    "crumbs": [
      "Appendices",
      "Learning Objectives"
    ]
  },
  {
    "objectID": "slides/los.html#why-do-they-matter",
    "href": "slides/los.html#why-do-they-matter",
    "title": "Learning Objectives",
    "section": "Why do they matter?",
    "text": "Why do they matter?\n\nStudents learn more when they have clear objectives.\nLends structure to my process.\nEventually: Lends structure to DSLC\n\n\n\nI like having a process!\nAiming to implement these across all of DSLC\n(Eventually want to also auto-map questions to them)",
    "crumbs": [
      "Appendices",
      "Learning Objectives"
    ]
  },
  {
    "objectID": "slides/los.html#introduction",
    "href": "slides/los.html#introduction",
    "title": "Learning Objectives",
    "section": "Introduction",
    "text": "Introduction\nAfter you read this chapter, you will be able to‚Ä¶\n\nExplain what an API is.\nDecide whether this book is for you.",
    "crumbs": [
      "Appendices",
      "Learning Objectives"
    ]
  },
  {
    "objectID": "slides/los.html#part-1-how-can-i-interact-with-the-web-from-r",
    "href": "slides/los.html#part-1-how-can-i-interact-with-the-web-from-r",
    "title": "Learning Objectives",
    "section": "Part 1: How can I interact with the web from R?",
    "text": "Part 1: How can I interact with the web from R?\n\n\n\nFetch json-formatted data from the web.\nParse nested lists with the {tidyverse}.\nParse nested lists with {tibblify}.\nUse an API‚Äôs OpenAPI description to determine the expected format of responses.\nParse API responses with {tibblify} and the response description.\n\n\n\nFetch data from an API with {httr2}.\nBuild a {httr2} request piece-by-piece.\nUse API docs and OpenAPI descriptions to explore available endpoints.\nFind authentication information in API docs.\nAuthenticate a request with a username and password.\nAuthenticate a request with an API key.\nAuthenticate a request with OAuth.\n\n\n\n\n\nI‚Äôm adding to these as I actually present a ‚Äúv1‚Äù (since reorg).\nItalics = planned soon but not finalized/presented.",
    "crumbs": [
      "Appendices",
      "Learning Objectives"
    ]
  },
  {
    "objectID": "slides/los.html#part-1-learning-objectives-brain-dump",
    "href": "slides/los.html#part-1-learning-objectives-brain-dump",
    "title": "Learning Objectives",
    "section": "Part 1 Learning Objectives Brain Dump",
    "text": "Part 1 Learning Objectives Brain Dump\n\n\n\nDiscover useful APIs\nFetch lots of data from APIs\nFind specific APIs\n\n\n\nDo other things (send/update/delete data) with APIs\nFind R packages that wrap APIs\n(Use other forms of APIs?)\nGet web data without APIs ({rvest})\nLearn more about accessing APIs\n\n\n\n\n\nI‚Äôm deleting from these as they‚Äôre covered or eliminated\n\nMoving to previous slide.\n\nDiscover: Just vaguely via apis.guru or similar.\nFetch lots: Important concept regardless of whether it‚Äôs ‚Äúsimple‚Äù\nFind specific: Shoved this way down the list because it will be hard to have examples that aren‚Äôt easy. I think I‚Äôll replace apis.guru with a true wiki.\nDo other: curl_translate() deep dive here.\nFind R packages: I want it late so you can tell if it‚Äôs a bad package\nOthers: gRPC, GraphQL, Websockets\nrvest: Technically could skip?\nLearn more: Book recommendations, blogs, etc.",
    "crumbs": [
      "Appendices",
      "Learning Objectives"
    ]
  },
  {
    "objectID": "slides/project.html#objectives",
    "href": "slides/project.html#objectives",
    "title": "Web APIs with R",
    "section": "Objectives",
    "text": "Objectives\n\nConvince you that you care about APIs.\nExplain why I‚Äôm writing my book ‚Äúbackward‚Äù.\nRecruit you to ‚ÄúCohort 0‚Äù of my book club.\nGive you a sneak peek at a new book club site format.\n\n\n\nStick around til the end for that last one!\nü§£ Who knew learning objectives could be click-baity?"
  },
  {
    "objectID": "slides/project.html#what-is-an-api",
    "href": "slides/project.html#what-is-an-api",
    "title": "Web APIs with R",
    "section": "What is an API?",
    "text": "What is an API?\nSee How do computers communicate?\n\n\nFirst ‚Äúreal‚Äù chapter of my book.\nWe‚Äôll go through part of that then come back here."
  },
  {
    "objectID": "slides/project.html#discussion-api-examples",
    "href": "slides/project.html#discussion-api-examples",
    "title": "Web APIs with R",
    "section": "Discussion: API Examples",
    "text": "Discussion: API Examples\nWhat do you want to do with APIs?\n\n\nPlease speak up or type ideas in the chat!\nMore examples if people need prompting:\n\n‚ÄúLogin with‚Äù google, apple, facebook, etc.\nSlack API used for various DSLC management tasks.\nSunrise/sunset (etc) from lat/long/date\nall_apis &lt;- apisguru::list_apis()\nall_apis |&gt; dplyr::slice_sample(n = 5)"
  },
  {
    "objectID": "slides/project.html#forwardbackward-design",
    "href": "slides/project.html#forwardbackward-design",
    "title": "Web APIs with R",
    "section": "Forward/Backward Design",
    "text": "Forward/Backward Design\nUnderstanding by Design (Grant Wiggins and Jay McTighe, 1998)\n\n\nForward:\n\nPlan lessons about material\nCreate assessment to measure learning\nID what learners know\n\n\nBackward:\n\nID what learners need to know\nCreate assessment to measure learning\nPlan lessons to help learners succeed at assessment\n\n\n\n\n\n‚ÄúForward‚Äù is ‚Äúnormal‚Äù way of teaching.\n\nEg, teachers choosing a book to read then deciding what to put on the test.\n\n‚ÄúLearner-centered‚Äù design.\n‚ÄúWhat learners need to know‚Äù == learning objectives\nTo avoid: ‚ÄúTeaching the test.‚Äù\n\nThere‚Äôs still nuance to making sure you‚Äôre preparing students to answer any question within LOs."
  },
  {
    "objectID": "slides/project.html#my-plan",
    "href": "slides/project.html#my-plan",
    "title": "Web APIs with R",
    "section": "My plan",
    "text": "My plan\n\n\n‚úÖ Rough draft slides\n‚¨ú Discuss material with learners (ID needs)\n‚ùì Create an assessment?\nüîÑÔ∏è Revise slides\nüìù Write chapter\n\n\n\n\nI spent November making rough slides of almost everything.\n\nTool to give structure to meetings\n\nDoing this today! (also see next slide)\nNot sure about this yet, but may write exercises next\nIdeal universe = repeat process, might skip to draft\nNo solid completion date yet"
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#what-are-the-pieces-of-an-http-request",
    "href": "slides/httr2/httr2-methods.html#what-are-the-pieces-of-an-http-request",
    "title": "Do other things with APIs",
    "section": "What are the pieces of an HTTP request?",
    "text": "What are the pieces of an HTTP request?\nHTTP request = URL + headers + method + body\n\n\nRe-orient ourselves with the pieces of an HTTP request.\nFocus on method.",
    "crumbs": [
      "Do more with APIs",
      "Do other things with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#what-are-http-request-methods",
    "href": "slides/httr2/httr2-methods.html#what-are-http-request-methods",
    "title": "Do other things with APIs",
    "section": "What are HTTP request methods?",
    "text": "What are HTTP request methods?\n\nPaths are nouns\nMethods are verbs\n\nGET (fetch existing thing)\nPOST (push new thing)\nDELETE (delete existing thing)\nPATCH (change existing thing)\nPUT (replace existing thing)\nCONNECT, OPTIONS, HEAD, TRACE (very rare)\n\n\n\n\nBy convention for REST APIs\n\nWe‚Äôll dig into different API frameworks in a later chapter.\n\nPath examples: candidates, calendar-dates, filings, electioneering (ads)\nWe‚Äôve been doing GET by default\nCONNECT = ‚Äústart 2-way communication‚Äù (eg ask server to be a bridge)\nOPTIONS should tell you method options\nHEAD returns headers that you‚Äôd get with GET\n\nEg, use it to check if DL would be big.\n\nTRACE returns the request as the final server received it, with header info about route.\nMethods aren‚Äôt strict\n\nAPI owner can do weird things.\nGET or POST often used for ~everything",
    "crumbs": [
      "Do more with APIs",
      "Do other things with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#req_method",
    "href": "slides/httr2/httr2-methods.html#req_method",
    "title": "Do other things with APIs",
    "section": "req_method()",
    "text": "req_method()\n\nGET = default without body\nPOST = default with body\nreq_method() to specify (rarely needed)",
    "crumbs": [
      "Do more with APIs",
      "Do other things with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#req_template",
    "href": "slides/httr2/httr2-methods.html#req_template",
    "title": "Do other things with APIs",
    "section": "req_template()",
    "text": "req_template()\n\nBuild request with variables\n\nreq_candidates2 &lt;- req_fec |&gt; \n  req_template(\"GET /{endpoint}\", endpoint = \"candidates\")\n\n\n\n\nidentical(req_candidates$url, req_candidates2$url)\n\n\n\nA more useful example:\n\nreq_fec |&gt; \n  req_template(\"GET /candidate/{candidate_id}/\", candidate_id = \"P40014052\")\n\n\n\nSometimes APIs are pretty much described in this syntax, lets you copy-paste.",
    "crumbs": [
      "Do more with APIs",
      "Do other things with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#what-are-the-pieces-of-an-http-request-1",
    "href": "slides/httr2/httr2-methods.html#what-are-the-pieces-of-an-http-request-1",
    "title": "Do other things with APIs",
    "section": "What are the pieces of an HTTP request?",
    "text": "What are the pieces of an HTTP request?\nHTTP request = URL + headers + method + body\n\n\nRe-orient ourselves with the pieces of an HTTP request.\nFocus on body\n\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Do more with APIs",
      "Do other things with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-find.html#general-tips-for-searching",
    "href": "slides/httr2/apis-find.html#general-tips-for-searching",
    "title": "Find APIs",
    "section": "General tips for searching",
    "text": "General tips for searching\n\ntolower(FIELD) to find ‚ÄúAPI‚Äù, ‚Äúapi‚Äù, ‚ÄúApi‚Äù, etc\n\\\\b in regex pattern for ‚Äúword boundary‚Äù\n\n\"\\\\bapi\\\\b\" = ‚Äúapi surrounded by spaces, (), newline, etc‚Äù",
    "crumbs": [
      "Get more data",
      "Find APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-find.html#searching-cran-packages",
    "href": "slides/httr2/apis-find.html#searching-cran-packages",
    "title": "Find APIs",
    "section": "Searching CRAN packages",
    "text": "Searching CRAN packages\n\n# TODO: Re-enable this when CRAN isn't down.\napi_pkgs &lt;- tools::CRAN_package_db() |&gt; \n  as_tibble() |&gt; \n  filter(str_detect(tolower(Description), \"\\\\bapi\\\\b\")) |&gt; \n  select(Package, Description)\nnrow(api_pkgs)\nhead(api_pkgs)",
    "crumbs": [
      "Get more data",
      "Find APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-find.html#searching-the-r-universe",
    "href": "slides/httr2/apis-find.html#searching-the-r-universe",
    "title": "Find APIs",
    "section": "Searching the R Universe",
    "text": "Searching the R Universe\n\nWeb interface at https://r-universe.dev/\nAPI in {universe} package? (broken as of 2023-11-13)\nAPI at https://r-universe.dev/stats/powersearch",
    "crumbs": [
      "Get more data",
      "Find APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-find.html#searching-the-r-universe-api",
    "href": "slides/httr2/apis-find.html#searching-the-r-universe-api",
    "title": "Find APIs",
    "section": "Searching the R Universe API",
    "text": "Searching the R Universe API\n\nresp &lt;- request(\"https://r-universe.dev\") |&gt; \n  req_url_path_append(\"stats/powersearch\") |&gt;\n  req_url_query(q = \"api\") |&gt; \n  req_perform() |&gt; \n  resp_body_json()\n\nuni_api_pkgs &lt;- tibble(pkg = resp$results) |&gt; \n  unnest_wider(pkg) |&gt; \n  filter(str_detect(tolower(Description), \"\\\\bapi\\\\b\")) |&gt; \n  distinct(Package, Description)\n\nnrow(uni_api_pkgs)\nhead(uni_api_pkgs)",
    "crumbs": [
      "Get more data",
      "Find APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-find.html#anyapi",
    "href": "slides/httr2/apis-find.html#anyapi",
    "title": "Find APIs",
    "section": "anyapi",
    "text": "anyapi\n\n{anyapi} package wraps these functions\n\n(technically not yet)\n\nIf package doesn‚Äôt exist\n\nSearch for API spec\nCreate package on-the-fly to interact with the API\n\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Get more data",
      "Find APIs"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#aside-why-rectangle",
    "href": "slides/httr2/schemas.html#aside-why-rectangle",
    "title": "Quickly parse API responses",
    "section": "Aside: Why rectangle?",
    "text": "Aside: Why rectangle?\n\nApps usually ‚Äúthink‚Äù in objects\n\nPreferred data: Objects-with-properties (example json)\n\nData scientists usually compare many objects at once\n\nPreferred data: data frames\n\nColumns of variables (of same class)\nRows of observations (~objects)\n\n\nAPIs are usually designed for the first model\nEven data APIs tend to ‚Äúthink‚Äù in objects\n\nBecause most programmers do\n\n\n\n\nThis really belongs in the previous chapter or maybe intro, but I‚Äôm putting it here for this cohort.\nApps and thus most programmers.\n\nEven when you get a list of things, like on Amazon, each of those product blocks in the list is an html div object. It‚Äôs rarely really columns of similar data.\n\nMaybe this is obvious to some, but this felt like an epiphany to me.\nFundamental difference between R and everything else.\n\nThings like pandas/polars are attempts to make Python think like R.\n\nReally pause to discuss.",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#typical-json-data",
    "href": "slides/httr2/schemas.html#typical-json-data",
    "title": "Quickly parse API responses",
    "section": "Typical JSON data",
    "text": "Typical JSON data\ndemo_json.json\n\n\nurl &lt;- \"https://r4ds.github.io/bookclub-wapir/slides/httr2/schemas/demo_json.json\"\ndemo_json &lt;- jsonlite::fromJSON(url)\n\n\n\n\nWhen you click through, point out that the object-per-api is a perfectly reasonable standard, but that this data makes way more sense in R with a row per api, but a standardized column for each variable, like we saw in the last chapter & last slide\nNote that sometimes jsonlite::fromJSON() mangles data, jsonlite::read_json() is same thing without auto-parsing.",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#rectangling-demo_json-manually",
    "href": "slides/httr2/schemas.html#rectangling-demo_json-manually",
    "title": "Quickly parse API responses",
    "section": "Rectangling demo_json manually",
    "text": "Rectangling demo_json manually\n\ndemo_json |&gt; \n  tibble::enframe(name = \"api_id\") |&gt;\n  tidyr::unnest_longer(value, indices_include = FALSE) |&gt; \n  tidyr::unnest_longer(value, indices_to = \"version\") |&gt;\n  tidyr::unnest_wider(value)\n\n#&gt; # A tibble: 3 √ó 8\n#&gt;   api_id        added updated swaggerUrl swaggerYamlUrl openapiVer link  version\n#&gt;   &lt;chr&gt;         &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  \n#&gt; 1 apis.guru     2015‚Ä¶ 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶ 3.0.0      http‚Ä¶ 2.2.0  \n#&gt; 2 fec.gov       2018‚Ä¶ 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶ 3.0.0      http‚Ä¶ 1.0    \n#&gt; 3 googleapis.c‚Ä¶ 2020‚Ä¶ 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶ 3.0.0      http‚Ä¶ v3\n\n\n\n\nWouldn‚Äôt it be nice if we could do all of that automatically?",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#introducing-tibblify",
    "href": "slides/httr2/schemas.html#introducing-tibblify",
    "title": "Quickly parse API responses",
    "section": "Introducing tibblify",
    "text": "Introducing tibblify\n\n{tibblify} üì¶ to auto-convert hierarchical data to tibbles\nSuper-charged tidyr::unnest_auto()\nTibbles all the way down\nExperimental functionality for APIs\n\n\n\n(bullet 4): This probably belongs in a separate package, but for now it‚Äôs in a dev branch of tibblify.",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#rectangling-demo_json-with-tibblify",
    "href": "slides/httr2/schemas.html#rectangling-demo_json-with-tibblify",
    "title": "Quickly parse API responses",
    "section": "Rectangling demo_json with tibblify",
    "text": "Rectangling demo_json with tibblify\n\n\ndj_tibblified &lt;- tibblify::tibblify(demo_json)\ndj_tibblified\n\n#&gt; # A tibble: 3 √ó 2\n#&gt;   .names                           versions\n#&gt;   &lt;chr&gt;                  &lt;list&lt;tibble[,7]&gt;&gt;\n#&gt; 1 apis.guru                         [1 √ó 7]\n#&gt; 2 fec.gov                           [1 √ó 7]\n#&gt; 3 googleapis.com:youtube            [1 √ó 7]\n\n\n\n\n\ndj_tibblified |&gt; \n  dplyr::rename(api_id = \".names\") |&gt; \n  tidyr::unnest(versions)\n\n#&gt; # A tibble: 3 √ó 8\n#&gt;   api_id         .names added updated swaggerUrl swaggerYamlUrl openapiVer link \n#&gt;   &lt;chr&gt;          &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;          &lt;chr&gt;      &lt;chr&gt;\n#&gt; 1 apis.guru      2.2.0  2015‚Ä¶ 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶ 3.0.0      http‚Ä¶\n#&gt; 2 fec.gov        1.0    2018‚Ä¶ 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶ 3.0.0      http‚Ä¶\n#&gt; 3 googleapis.co‚Ä¶ v3     2020‚Ä¶ 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶ 3.0.0      http‚Ä¶\n\n\n\n\n\nAt first tibblified looks similar to result of enframe().\nBy default anything it has to name gets .names\n\nWe‚Äôll see how to clean that up later.\n\nBut the nested things are tibbles, so we can use tidyr::unnest()",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#rectangling-manually-vs-tibblify",
    "href": "slides/httr2/schemas.html#rectangling-manually-vs-tibblify",
    "title": "Quickly parse API responses",
    "section": "Rectangling manually vs tibblify",
    "text": "Rectangling manually vs tibblify\n\n\n\ndj_tidyr &lt;- \n  demo_json |&gt; \n  tibble::enframe(name = \"api_id\") |&gt;\n  tidyr::unnest_longer(\n    value, indices_include = FALSE\n  ) |&gt; \n  tidyr::unnest_longer(\n    value, indices_to = \"version\"\n  ) |&gt;\n  tidyr::unnest_wider(value)\n\n\n\ndj_tibblify &lt;- \n  demo_json |&gt;\n  tibblify::tibblify() |&gt; \n  dplyr::rename(api_id = \".names\") |&gt; \n  tidyr::unnest(versions) |&gt; \n  dplyr::rename(version = \".names\")\n\n\n\n\n\n\nwaldo::compare(\n  dj_tibblify, dj_tidyr, \n  list_as_map = TRUE # Ignore column order\n)\n\n#&gt; ‚úî No differences\n\n\n\n\n\n{waldo} is a package for finding differences.\nlist_as_map = TRUE means ‚Äúignore column order‚Äù here.\nWhat did tibblify do to figure out how to rectangle the data?",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#tspec_guess",
    "href": "slides/httr2/schemas.html#tspec_guess",
    "title": "Quickly parse API responses",
    "section": "tspec_guess()",
    "text": "tspec_guess()\n\ntibblify::tibblify() spec argument\n\n‚ÄúWhat should this look like?‚Äù\n\nGuessed by default with tibblify::guess_tspec()\n\n\n\ntibblify::guess_tspec(demo_json)\n\n#&gt; tspec_df(\n#&gt;   .names_to = \".names\",\n#&gt;   tib_df(\n#&gt;     \"versions\",\n#&gt;     .names_to = \".names\",\n#&gt;     tib_chr(\"added\"),\n#&gt;     tib_chr(\"updated\"),\n#&gt;     tib_chr(\"swaggerUrl\"),\n#&gt;     tib_chr(\"swaggerYamlUrl\"),\n#&gt;     tib_chr(\"openapiVer\"),\n#&gt;     tib_chr(\"link\"),\n#&gt;   ),\n#&gt; )\n\n\n\n\n\nPoint out .names_to.\nPoint out date columns (‚Äúadded‚Äù and ‚Äúupdated‚Äù).\nIt would be nice if we had a way to tell it what to expect.",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#multiple-standards",
    "href": "slides/httr2/schemas.html#multiple-standards",
    "title": "Quickly parse API responses",
    "section": "Multiple Standards",
    "text": "Multiple Standards\n\nSwagger 2.0 ‚û°Ô∏è OpenAPI 2.0\nOpenAPI 3.x\nOpenAPI 4.0 (in development)\nPostman Collection\nAPI Blueprint\nWeb Application Description Language (WADL)\n\n\n\nSwagger was created by wordnik.com, free online dictionary that compiles a bunch of sources (and wanted a way to store API info consistently).\nSwagger specification & tools bought by SmartBear, spec donated to OpenAPI Initiative to make it officially open forever.\nSwagger now technically means the tools, OpenAPI is the spec.\n\nBut people talk about ‚Äúswagger specs‚Äù all the time.\n\nWe‚Äôll focus on OpenAPI 3\nWe might talk about tools to convert others to OpenAPI 3.",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#yaml",
    "href": "slides/httr2/schemas.html#yaml",
    "title": "Quickly parse API responses",
    "section": "YAML",
    "text": "YAML\n\n\nJSON  (jsonlite::read_json())\n\n{\n  \"info\": {\n    \"contact\": {\n      \"email\": \"mike.ralphson@gmail.com\",\n      \"name\": \"APIs.guru\",\n      \"url\": \"https://APIs.guru\"\n    },\n    \"title\": \"APIs.guru\",\n    \"version\": \"2.2.0\",\n    \"x-apisguru-categories\": [\n      \"open_data\",\n      \"developer_tools\"\n    ]\n  },\n    \"security\": []\n}\n\n\nYAML  (yaml::read_yaml())\n\ninfo:\n  contact:\n    email: mike.ralphson@gmail.com\n    name: APIs.guru\n    url: https://APIs.guru\n  title: APIs.guru\n  version: 2.2.0\n  x-apisguru-categories:\n    - open_data\n    - developer_tools\nsecurity: [] # No security needed\n\n\n\n\n\nOriginally ‚ÄúYet Another Markup Language‚Äù\n\nMeaning of name changed because they wanted to stress it‚Äôs for data, not documents per se.\n‚ÄúYAML Ain‚Äôt Markup Language‚Äù\n\nYAML adds comments, readability\n\nQuoting optional for strings\nIndentation for children, rather than brackets\n\nAll JSON strings are valid YAML, not all YAML is valid JSON.\n.yaml or .yml\nYou might have seen it:\n\nRMarkdown/Quarto headers & config\nPackage configuration files (_pkgdown.yml, codecov.yml)\nGitHub Actions",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#exploring-an-api-description",
    "href": "slides/httr2/schemas.html#exploring-an-api-description",
    "title": "Quickly parse API responses",
    "section": "Exploring an API Description",
    "text": "Exploring an API Description\n\nAPIs.guru\n\n\n\nopenapi: 3.0.0 # Specification version number\ninfo: # title, version, description, contact, license\nservers: # One or more URLs + optional descriptions\ntags: # Optional name, description, externalDocs of endpoint categories\nexternalDocs: # Optional url & description of additional documentation\nsecurity: # Optional list of named default security schemes\npaths: # Endpoints of the API\nwebhooks: # Description of endpoints YOU can specify for API to SEND to\njsonSchemaDialect: # URI to extend components/schemas\nx-whatever: # Extend with additional properties\ncomponents: # Reusable schemas, securitySchemes, reusable pieces of everything above\n\n\n\n\nTechnically the OpenAPI specification is the standard, and each API has a ‚Äúdescription‚Äù that‚Äôs defined in a ‚Äúdocument‚Äù (which can be a composite of multiple files).\nPeople can and will do things wrong/weird.\nopenapi = Spec version number, not API\nInfo, servers, tags, externalDocs = Info about the API.\nsecurity = default schemes to use, schemes are described in components/securitySchemes\npaths = the things the API can do, detailed in later chapter(s)\nwebhooks, jsonSchemaDialect, extensions = we won‚Äôt talk about these much if at all\nComponents is for storing reusable pieces of info about the API.",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#apis.guru-apis-schema",
    "href": "slides/httr2/schemas.html#apis.guru-apis-schema",
    "title": "Quickly parse API responses",
    "section": "apis.guru APIs Schema",
    "text": "apis.guru APIs Schema\n\n\ncomponents:\n  schemas:\n    APIs:\n      additionalProperties:\n        $ref: \"#/components/schemas/API\"\n      description: |\n        List of API details.\n        It is a JSON object with API IDs(`&lt;provider&gt;[:&lt;service&gt;]`) as keys.\n      minProperties: 1\n      type: object\n\n\n\n\ntspec_apis &lt;- tspec_df(\n  .names_to = \"api_id\",\n  tspec_api\n)\n\n\n\n\nThe thing we‚Äôre loading is described in APIs schema\nI‚Äôve simplified this slightly from the full openapi object.\nJSON doesn‚Äôt require a name for the names, so we need to pick something (‚Äúapi_id‚Äù)\nadditionalProperties ‚Äì&gt; tspec_, properties ‚Äì&gt; tib_",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#apis.guru-api-schema",
    "href": "slides/httr2/schemas.html#apis.guru-api-schema",
    "title": "Quickly parse API responses",
    "section": "apis.guru API Schema",
    "text": "apis.guru API Schema\n\n\ncomponents:\n  schemas:\n    API:\n      additionalProperties: false\n      description: Meta information about API\n      properties:\n        versions:\n          additionalProperties:\n            $ref: \"#/components/schemas/ApiVersion\"\n          description: List of supported versions of the API\n          minProperties: 1\n          type: object\n      required:\n        - versions\n      type: object\n\n\n\n\ntspec_api &lt;- tspec_row(\n  tib_df(\n    \"versions\", \n    .names_to = \"version\", \n    tspec_api_version\n  )\n)\n\n\n\n\nadditionalProperties: false means tspec_row()\nversions property needs a tib_ function.\nversions is an object, so tib_df (or tib_row)\nversions has additionalProperties, so defined in tspec_df().",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#apis.guru-apiversion-schema",
    "href": "slides/httr2/schemas.html#apis.guru-apiversion-schema",
    "title": "Quickly parse API responses",
    "section": "apis.guru ApiVersion Schema",
    "text": "apis.guru ApiVersion Schema\n\ncomponents:\n  schemas:\n    ApiVersion:\n      additionalProperties: false\n      properties:\n        added:\n          description: Timestamp when the version was added\n          format: date-time\n          type: string\n        link:\n          description: Link to the individual API entry for this API\n          format: url\n          type: string\n        openapiVer:\n          description: The value of the `openapi` or `swagger` property of the source definition\n          type: string\n        swaggerUrl:\n          description: URL to OpenAPI definition in JSON format\n          format: url\n          type: string\n        swaggerYamlUrl:\n          description: URL to OpenAPI definition in YAML format\n          format: url\n          type: string\n        updated:\n          description: Timestamp when the version was updated\n          format: date-time\n          type: string\n      required:\n        - added\n        - updated\n        - swaggerUrl\n        - swaggerYamlUrl\n        - openapiVer\n      type: object",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#apis.guru-apiversion-tspec",
    "href": "slides/httr2/schemas.html#apis.guru-apiversion-tspec",
    "title": "Quickly parse API responses",
    "section": "apis.guru ApiVersion tspec",
    "text": "apis.guru ApiVersion tspec\n\ntib_chr_datetime &lt;- function(key, ..., required = TRUE) {\n  tibblify::tib_scalar(\n    key = key,\n    ptype = vctrs::new_datetime(tzone = \"UTC\"),\n    required = required,\n    ptype_inner = character(),\n    transform = \\(x) as.POSIXct(x, format = \"%Y-%m-%dT%H:%M:%OSZ\", tz = \"UTC\"),\n    ...\n  )\n}\ntspec_api_version &lt;- tspec_row(\n  tib_chr_datetime(\"added\"),\n  tib_chr_datetime(\"updated\"),\n  tib_chr(\"openapiVer\"),\n  tib_chr(\"swaggerUrl\"),\n  tib_chr(\"swaggerYamlUrl\"),\n  tib_chr(\"link\", required = FALSE)\n)",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#using-tspecs-version",
    "href": "slides/httr2/schemas.html#using-tspecs-version",
    "title": "Quickly parse API responses",
    "section": "Using tspecs: version",
    "text": "Using tspecs: version\n\ntibblify(demo_json$apis.guru$versions$`2.2.0`, tspec_api_version)\n\n#&gt; # A tibble: 1 √ó 6\n#&gt;   added               updated             openapiVer swaggerUrl   swaggerYamlUrl\n#&gt;   &lt;dttm&gt;              &lt;dttm&gt;              &lt;chr&gt;      &lt;chr&gt;        &lt;chr&gt;         \n#&gt; 1 2015-11-26 17:52:26 2023-04-05 13:10:14 3.0.0      https://api‚Ä¶ https://api.a‚Ä¶\n#&gt; # ‚Ñπ 1 more variable: link &lt;chr&gt;",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#using-tspecs-api",
    "href": "slides/httr2/schemas.html#using-tspecs-api",
    "title": "Quickly parse API responses",
    "section": "Using tspecs: api",
    "text": "Using tspecs: api\n\ntibblify(demo_json$apis.guru, tspec_api) |&gt; tidyr::unnest(versions)\n\n#&gt; # A tibble: 1 √ó 7\n#&gt;   version added               updated             openapiVer swaggerUrl         \n#&gt;   &lt;chr&gt;   &lt;dttm&gt;              &lt;dttm&gt;              &lt;chr&gt;      &lt;chr&gt;              \n#&gt; 1 2.2.0   2015-11-26 17:52:26 2023-04-05 13:10:14 3.0.0      https://api.apis.g‚Ä¶\n#&gt; # ‚Ñπ 2 more variables: swaggerYamlUrl &lt;chr&gt;, link &lt;chr&gt;",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/schemas.html#using-tspecs-apis",
    "href": "slides/httr2/schemas.html#using-tspecs-apis",
    "title": "Quickly parse API responses",
    "section": "Using tspecs: apis",
    "text": "Using tspecs: apis\n\ntibblify(demo_json, tspec_apis) |&gt; tidyr::unnest(versions)\n\n#&gt; # A tibble: 3 √ó 8\n#&gt;   api_id   version added               updated             openapiVer swaggerUrl\n#&gt;   &lt;chr&gt;    &lt;chr&gt;   &lt;dttm&gt;              &lt;dttm&gt;              &lt;chr&gt;      &lt;chr&gt;     \n#&gt; 1 apis.gu‚Ä¶ 2.2.0   2015-11-26 17:52:26 2023-04-05 13:10:14 3.0.0      https://a‚Ä¶\n#&gt; 2 fec.gov  1.0     2018-11-20 00:04:28 2023-03-06 07:12:59 3.0.0      https://a‚Ä¶\n#&gt; 3 googlea‚Ä¶ v3      2020-11-02 10:32:34 2023-04-21 23:09:23 3.0.0      https://a‚Ä¶\n#&gt; # ‚Ñπ 2 more variables: swaggerYamlUrl &lt;chr&gt;, link &lt;chr&gt;\n\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Get started",
      "Quickly parse API responses"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#what-can-we-do-so-far",
    "href": "slides/httr2/httr2.html#what-can-we-do-so-far",
    "title": "Easily access APIs with {httr2}",
    "section": "What can we do so far?",
    "text": "What can we do so far?\n\n\nWe can:\n\nAccess APIs that can be accessed in a web browser\nCopy/paste or manually build URLs\nPass an authentication key as part of a URL\nFetch JSON data with {jsonlite}\nFetch YAML data with {yaml}\n\n\nWe can‚Äôt yet:\n\nAccess APIs that can‚Äôt be accessed in a web browser\nBuild API requests systematically\nAccess APIs that require authentication\nFetch other types of data (raw text, images, videos, etc)\n\n\n\n\n\nBrowser: As long as it isn‚Äôt using our login information without us realizing it.\nNo browser: There are technically 9 types of requests (HTTP methods), we can do 1 of them so far.\nA lot of APIs use something called ‚Äúoauth‚Äù, can be really confusing\nThe endpoints we‚Äôve hit haven‚Äôt had arguments, but almost all do\nWe can get some specific things with download.file, but need to parse each with different packages\n‚Ä¶and other things we don‚Äôt yet know that we wish we could do\nWe‚Äôll use httr2 to deal with all of these things",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#motivating-example-openfec",
    "href": "slides/httr2/httr2.html#motivating-example-openfec",
    "title": "Easily access APIs with {httr2}",
    "section": "Motivating Example: OpenFEC",
    "text": "Motivating Example: OpenFEC\n\nOpenFEC: Federal Election Commission API\nAPI documentation usually describes endpoints\n\nendpoint: URL for specific API function",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#presidential-candidates",
    "href": "slides/httr2/httr2.html#presidential-candidates",
    "title": "Easily access APIs with {httr2}",
    "section": "2020 Presidential Candidates",
    "text": "2020 Presidential Candidates\n\nWe‚Äôll focus on the /candidates/ endpoint\nhttps://api.open.fec.gov/v1/candidates/?election_year=2020&office=P&api_key=DEMO_KEY\n\n\n\nopenfec_response &lt;- jsonlite::read_json(\"https://api.open.fec.gov/v1/candidates/?election_year=2020&office=P&api_key=DEMO_KEY\")\n\n\n\n\ntibblify(openfec_response$results) |&gt; \n  select(name, party_full, has_raised_funds) |&gt; \n  head()\n\n#&gt; # A tibble: 6 √ó 3\n#&gt;   name                       party_full       has_raised_funds\n#&gt;   &lt;chr&gt;                      &lt;chr&gt;            &lt;lgl&gt;           \n#&gt; 1 753, JO                    NONE             FALSE           \n#&gt; 2 ABRAMSON, MAX              VETERANS PARTY   FALSE           \n#&gt; 3 ABRAUGH, MATTHEW M. MR.    NON-PARTY        FALSE           \n#&gt; 4 ACKER, BRANDON W           DEMOCRATIC PARTY FALSE           \n#&gt; 5 ACKER, RYAN                NON-PARTY        TRUE            \n#&gt; 6 ACORD, ROBERT BRADFORD LEE DEMOCRATIC PARTY FALSE\n\n\n\n\n\nWhat if we want a different year? Or a different office? Or any of the other 20 or so available parameters?",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#what-do-httr2-calls-look-like",
    "href": "slides/httr2/httr2.html#what-do-httr2-calls-look-like",
    "title": "Easily access APIs with {httr2}",
    "section": "What do {httr2} calls look like?",
    "text": "What do {httr2} calls look like?\n\nPipe-based API calls\n\n\n\ncandidates &lt;- \n  request(\"https://api.open.fec.gov/v1\") |&gt; \n  req_url_path_append(\"candidates\") |&gt; \n  req_url_query(api_key = \"DEMO_KEY\") |&gt; \n  req_url_query(\n    election_year = 2020,\n    office = \"P\"\n  ) |&gt; \n  req_perform() |&gt; # Chapter 5 (next)\n  resp_body_json() # Chapter 7\n\n\n\n\nwaldo::compare(candidates, openfec_response)\n\n\n\n#&gt; ‚úî No differences\n\n\n\n\n\nI use |&gt; base R pipe here. Pronounce it ‚Äúand then‚Äù.\nhttr2 calls usually involve a request, which you perform, and then you parse the response.\nWe‚Äôre hitting the free, open api from the Federal Elections Commission.\n(step through)\nHere we build the request piece-wise\n\nWe‚Äôll get into details of the functions in a few slides\n\nThen we perform the request. This actually hits the server.\nThen we parse what we get back with a resp_body function.\nSame result as the thing we got using jsonlite.\n\nBecause resp_body_json uses jsonlite.",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#why-httr2",
    "href": "slides/httr2/httr2.html#why-httr2",
    "title": "Easily access APIs with {httr2}",
    "section": "Why ‚Äúhttr2‚Äù?",
    "text": "Why ‚Äúhttr2‚Äù?\n\nHTTP = HyperText Transfer Protocol\n\n‚ÄúHyperText‚Äù = web content\n‚ÄúTransfer‚Äù = exchange\n‚ÄúProtocol‚Äù = rules\n‚Äúrules for exchanging web content‚Äù\nHTTP(S) = most of internet communication\n\n\n\n\nYou may have seen http or https at the start of URLs (web addresses)\n‚Äúweb content‚Äù =\n\noriginally text and links (HTML = HyperText Markup Language)\nnow data, images, videos, etc.\n\n‚Äúexchange‚Äù or ‚Äúmove‚Äù\n‚ÄúS‚Äù means ‚Äúsecure‚Äù\nIf anyone asks: 1.1 = most, 2.0 = 2-way\n2 = he rewrote it for piping",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#how-do-i-use-httr2",
    "href": "slides/httr2/httr2.html#how-do-i-use-httr2",
    "title": "Easily access APIs with {httr2}",
    "section": "How do I use {httr2}?",
    "text": "How do I use {httr2}?\n\nreq_*() functions return httr2_request objects\n\n\n\nreq_fec &lt;- request(\"https://api.open.fec.gov/v1\")\nreq_fec_auth &lt;- req_url_query(req_fec, api_key = \"DEMO_KEY\")\nreq_candidates &lt;- req_url_path_append(req_fec_auth, \"candidates\")\nreq_candidates_president &lt;- req_url_query(req_candidates, office = \"P\")\n\n\n\n\npres_2024 &lt;- req_url_query(req_candidates_president, election_year = 2024) |&gt; \n  req_perform() |&gt; resp_body_json()\n\n\n\n\ncandidates_2022 &lt;- req_url_query(req_candidates, election_year = 2022) |&gt; \n  req_perform() |&gt; resp_body_json()\n\n\n\n\nreq_calendar &lt;- req_url_path_append(req_fec_auth, \"calendar-dates\")\n\n\n\n\nImagine you‚Äôre working with an API, like the FEC API\n\nWhat you‚Äôll very often do.\n\nWe‚Äôll go through function specifics in a moment, just soak in the utility of separate objects\nThis is super important, so let‚Äôs pause to sink this in\nI‚Äôm going to drink some water while you make sure you have that.",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#request-req_path_append",
    "href": "slides/httr2/httr2.html#request-req_path_append",
    "title": "Easily access APIs with {httr2}",
    "section": "request() & req_path_append()",
    "text": "request() & req_path_append()\n\nrequest(\"https://api.open.fec.gov/v1/candidates/\")\n\n\nCleaner: ‚Äúmain‚Äù request object + specific path\n\nreq_fec &lt;- request(\"https://api.open.fec.gov/v1\")\nreq_candidates &lt;- req_fec |&gt; \n  req_url_path_append(\"candidates\")\n\n\n\n\nreq_candidates$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates\"\n\n\n\n\n\nhttr2 ‚Äúthinks‚Äù in pieces\nYou don‚Äôt have to think about the /\nWe have to be careful about the ‚Äúv1‚Äù in our request, though!\n\nMore on next slide.",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#dont-use-req_url_path",
    "href": "slides/httr2/httr2.html#dont-use-req_url_path",
    "title": "Easily access APIs with {httr2}",
    "section": "Don‚Äôt use req_url_path()!",
    "text": "Don‚Äôt use req_url_path()!\n\n\nreq_path_bad &lt;- req_fec |&gt; \n  req_url_path(\"candidates\")\nreq_path_bad$url\n\n#&gt; [1] \"https://api.open.fec.gov/candidates\"\n\n\n\n\n\nreq_candidates$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates\"\n\n\n\n\n\nYou probably never want req_url_path()\nNotably the help docs don‚Äôt show an example for this one",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#req_url_query",
    "href": "slides/httr2/httr2.html#req_url_query",
    "title": "Easily access APIs with {httr2}",
    "section": "req_url_query()",
    "text": "req_url_query()\n\nhttps://api.open.fec.gov/v1/candidates/?api_key=DEMO_KEY&office=P\n\n\n\nreq_pres &lt;- req_candidates |&gt; \n  req_url_query(\n    api_key = \"DEMO_KEY\",\n    office = \"P\"\n  )\n\n\n\nCan add query parameters piecewise, even before path!\n\n\n\nreq_fec_auth &lt;- req_fec |&gt; \n  req_url_query(api_key = \"DEMO_KEY\")\nreq_candidates_auth &lt;- req_fec_auth |&gt; \n  req_url_path_append(\"candidates\")\nreq_pres2 &lt;- req_candidates_auth |&gt; \n  req_url_query(office = \"P\")\n\n\n\n\nidentical(req_pres$url, req_pres2$url)\n\n#&gt; [1] TRUE\n\n\n\n\n\n‚ÄúQuery‚Äù = stuff after ‚Äú?‚Äù\nArguments for the endpoint",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#req_url_query.multi",
    "href": "slides/httr2/httr2.html#req_url_query.multi",
    "title": "Easily access APIs with {httr2}",
    "section": "req_url_query(.multi)",
    "text": "req_url_query(.multi)\n\n\nreq_url_query(req_candidates, office = c(\"H\", \"S\"))\n\n#&gt; Error in `req_url_query()`:\n#&gt; ! All vector elements of `...` must be length 1.\n#&gt; ‚Ñπ Use `.multi` to choose a strategy for handling vectors.\n\n\n\n\n.multi = \"pipe\"\n\nreq_url_query(req_candidates, office = c(\"H\", \"S\"), .multi = \"pipe\")$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates?office=H|S\"\n\n\n\n\n.multi = \"comma\"\n\nreq_url_query(req_candidates, office = c(\"H\", \"S\"), .multi = \"comma\")$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates?office=H,S\"\n\n\n\n\n.multi = \"explode\"\n\nreq_url_query(req_candidates, office = c(\"H\", \"S\"), .multi = \"explode\")$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates?office=H&office=S\"\n\n\n\n\n\nAPIs often can‚Äôt handle multiple params with same name\ndefault = ‚Äúerror‚Äù\n. in .multi so it doesn‚Äôt collide with a parameter named ‚Äúmulti‚Äù\n‚Äúpipe‚Äù or ‚Äúcomma‚Äù to list them out in same parameter\n‚Äúexplode‚Äù to separate them as separate copies of that parameter (what this API actually wants)",
    "crumbs": [
      "Get started",
      "Easily access APIs with {httr2}"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#json-responses",
    "href": "slides/httr2/httr2-responses.html#json-responses",
    "title": "Process other response types",
    "section": "JSON responses",
    "text": "JSON responses\n\napplication/json or */json\nhttr2::resp_body_json() uses jsonlite::fromJSON()\n\n\nthis slide & next might be entirely covered in earlier chapter",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#json-data",
    "href": "slides/httr2/httr2-responses.html#json-data",
    "title": "Process other response types",
    "section": "JSON data",
    "text": "JSON data\n\n4 scalars (length-1 vectors)\n\nnull ‚âà NA\nstring ‚âà character(1), always \" (not ')\nnumber ‚âà numeric(1), no Inf/-Inf/NaN\nboolean ‚âà logical(1), true = TRUE, false = FALSE\n\narray ‚âà unnamed list()\n\n[]: [null, \"a\", 1, true] ‚âà list(NULL, \"a\", 1, TRUE)\n\nobject ‚âà named list()\n\n{}: {\"a\": 1, \"b\": [1, 2]} ‚âà list(a = 1, b = list(1, 2))\n\n\n\n\nWe never went into details about what‚Äôs legal in the JSON format.\nArrays of the same type are roughly equivalent to vectors, parsers like jsonlite often turn such arrays into vectors.",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#xml-responses",
    "href": "slides/httr2/httr2-responses.html#xml-responses",
    "title": "Process other response types",
    "section": "XML responses",
    "text": "XML responses\neXtensible Markup Language\n\napplication/xml, text/xml, or */xml\nhttr2::resp_body_xml() uses xml2::read_xml()",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#xml-data",
    "href": "slides/httr2/httr2-responses.html#xml-data",
    "title": "Process other response types",
    "section": "XML data",
    "text": "XML data\n\nTags as &lt;tagname attribute=\"a\"&gt;contents&lt;/tagname&gt;\nEverything nestable",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#xml-example-raw",
    "href": "slides/httr2/httr2-responses.html#xml-example-raw",
    "title": "Process other response types",
    "section": "XML example: raw",
    "text": "XML example: raw\n\nresp_xml &lt;- req_template(request(example_url()), \"/xml\") |&gt;\n  req_perform()\nresp_xml |&gt; resp_body_string() |&gt; cat()\n\n#&gt; &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n#&gt; &lt;root&gt;\n#&gt;    &lt;address&gt;\n#&gt;       &lt;city&gt;New York&lt;/city&gt;\n#&gt;       &lt;postalCode&gt;10021-3100&lt;/postalCode&gt;\n#&gt;       &lt;state&gt;NY&lt;/state&gt;\n#&gt;       &lt;streetAddress&gt;21 2nd Street&lt;/streetAddress&gt;\n#&gt;    &lt;/address&gt;\n#&gt;    &lt;age&gt;27&lt;/age&gt;\n#&gt;    &lt;children /&gt;\n#&gt;    &lt;firstName&gt;John&lt;/firstName&gt;\n#&gt;    &lt;isAlive&gt;true&lt;/isAlive&gt;\n#&gt;    &lt;lastName&gt;Smith&lt;/lastName&gt;\n#&gt;    &lt;phoneNumbers&gt;\n#&gt;       &lt;element&gt;\n#&gt;          &lt;number&gt;212 555-1234&lt;/number&gt;\n#&gt;          &lt;type&gt;home&lt;/type&gt;\n#&gt;       &lt;/element&gt;\n#&gt;       &lt;element&gt;\n#&gt;          &lt;number&gt;646 555-4567&lt;/number&gt;\n#&gt;          &lt;type&gt;office&lt;/type&gt;\n#&gt;       &lt;/element&gt;\n#&gt;    &lt;/phoneNumbers&gt;\n#&gt;    &lt;spouse null=\"true\" /&gt;\n#&gt; &lt;/root&gt;",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#xml-example-parsed",
    "href": "slides/httr2/httr2-responses.html#xml-example-parsed",
    "title": "Process other response types",
    "section": "XML example: parsed",
    "text": "XML example: parsed\n\nextracted_xml &lt;- resp_body_xml(resp_xml)\nclass(extracted_xml)\n\n#&gt; [1] \"xml_document\" \"xml_node\"\n\n# We'll see other ways to parse this in {rvest} chapter.\nxml2::as_list(extracted_xml) |&gt; str(max.level = 2)\n\n#&gt; List of 1\n#&gt;  $ root:List of 8\n#&gt;   ..$ address     :List of 4\n#&gt;   ..$ age         :List of 1\n#&gt;   ..$ children    : list()\n#&gt;   ..$ firstName   :List of 1\n#&gt;   ..$ isAlive     :List of 1\n#&gt;   ..$ lastName    :List of 1\n#&gt;   ..$ phoneNumbers:List of 2\n#&gt;   ..$ spouse      : list()\n#&gt;   .. ..- attr(*, \"null\")= chr \"true\"",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#html-responses",
    "href": "slides/httr2/httr2-responses.html#html-responses",
    "title": "Process other response types",
    "section": "HTML responses",
    "text": "HTML responses\nHyperText Markup Language\n\ntext/html, rarely application/xhtml+xml\nhttr2::resp_body_html() uses xml2::read_html()\n\nwhich uses xml2::read_xml(..., as_html = TRUE)\n\n\n\n\nHTML came before XML, but XML now includes HTML, so\nHTML is XML with specific, defined tags\nMuch more on this in rvest chapter",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#images",
    "href": "slides/httr2/httr2-responses.html#images",
    "title": "Process other response types",
    "section": "Images",
    "text": "Images\n\n\nresp_body_raw(resp) |&gt; magick::image_read()\n\n\n\n\n# requires {rsvg}\nresp_body_raw(resp) |&gt; magick::image_read_svg()\n\n\n\n\n# requires {pdftools}\nresp_body_raw(resp) |&gt; magick::image_read_pdf()\n\n\n\n\nCan also save directly, but this reads the object directly into R.\nSVG and PDF work best with dedicated packages.\nParsing PDFs could be a book itself.",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#video",
    "href": "slides/httr2/httr2-responses.html#video",
    "title": "Process other response types",
    "section": "Video",
    "text": "Video\nI haven‚Äôt found anything yet for working with ‚Äúraw‚Äù audio/video!\n\n\nresp_body_raw(resp) |&gt; writeBin(path)\n\n\n\n\nav::av_video_convert(path, output = \"output.mp4\", verbose = TRUE)\n\n\n\n\nffmpeg_cmd &lt;- glue::glue(\n  \"ffmpeg -v quiet \",\n  \"-i {input_path} \",\n  \"-ss {start_time} -to {end_time} \",\n  \"-c copy {output_path}\"\n)\nsystem(ffmpeg_cmd, ignore.stdout = TRUE)\n\n\n\n\nAs far as I can tell, you always have to save audio/video, and THEN parse it.\nHow much do people want here? Pointers in right direction? Full examples (which might not apply in their use case)?\nHas anybody worked with video? This feels hacky!",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#audio",
    "href": "slides/httr2/httr2-responses.html#audio",
    "title": "Process other response types",
    "section": "Audio",
    "text": "Audio\nI haven‚Äôt found anything yet for working with ‚Äúraw‚Äù audio/video!\n\n\nresp_body_raw(resp) |&gt; writeBin(filename)\n\n\n\n\nav::av_audio_convert(\n  path, output = \"output.mp3\", format = NULL,\n  channels = NULL, sample_rate = NULL,\n  start_time = NULL, total_time = NULL,\n  verbose = TRUE\n)\n\n\n\n\nHow much do people want here? Pointers in right direction? Full examples (which might not apply in their use case)?\nHas anybody worked with audio? This feels hacky!",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#raw-data",
    "href": "slides/httr2/httr2-responses.html#raw-data",
    "title": "Process other response types",
    "section": "Raw data",
    "text": "Raw data\nDanger zone!\n\n\nresp_body_raw(resp) |&gt; writeBin(filename)\n\n\n\n\nAnything else likely has to be saved before any tools will know what to do.\nDon‚Äôt save random binary files if you don‚Äôt have reason to trust what they are!",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#base64-encoded-json-data",
    "href": "slides/httr2/httr2-responses.html#base64-encoded-json-data",
    "title": "Process other response types",
    "section": "Base64-encoded JSON data",
    "text": "Base64-encoded JSON data\n\nBase64 transforms binary data into text\n\n6-bit blocks ‚û°Ô∏è 1 of 64 characters\n\n\n\n\nraw_data &lt;- resp_body_json(resp) |&gt;\n  _$b64_json |&gt; # Or whatever the element is named\n  jsonlite::base64_dec()\n\nmagick::image_read(raw_data) # Etc\n\n\n\n\nOpenAI API can send generated images this way (that‚Äôs how I was reminded about it).\n64 = 2^6",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#http-status-codes",
    "href": "slides/httr2/httr2-responses.html#http-status-codes",
    "title": "Process other response types",
    "section": "HTTP status codes",
    "text": "HTTP status codes\n\n\n\nRange\nDescription\nNotes\n\n\n\n\n1xx\nInformational\nHandled by {curl}\n\n\n2xx\nSuccessful\nresp_*()\n\n\n3xx\nRedirection\nAuto-followed\n\n\n4xx\nClient error\n‚ÄúYour fault‚Äù\n\n\n5xx\nServer error\n‚ÄúServer‚Äôs fault‚Äù\n\n\n\n\n\nAs with everything, codes can be incorrectly implemented\n‚ÄúClient error‚Äù might result from mistake on server side\n‚ÄúServer error‚Äù might mean you sent an expired key",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#handling-errors",
    "href": "slides/httr2/httr2-responses.html#handling-errors",
    "title": "Process other response types",
    "section": "Handling errors",
    "text": "Handling errors\nreq_error(req, is_error = NULL, body = NULL)\n\nis_error = function to identify errors\nbody = function to turn error resp into message\n\n\n\n# Never trigger R errors\nreq |&gt; \n  req_error(is_error = \\(resp) FALSE)\n\n\n\n\n# Only trigger R errors for \"Server error\" responses\nreq |&gt; \n  req_error(is_error = \\(resp) resp_status(resp) &gt;= 500)\n\n\n\n\n# Include information from response in error message\nreq |&gt; \n  req_error(\n    body = function(resp) {\n      resp_body_json(resp)$error_msg # Often more complicated than this\n    }\n  )\n\n\n\n\nAdd req_error() before req_perform() (or req_perform_iterative())\nMost common use cases:\n\nDon‚Äôt let httr2 handle errors, so you can do something yourself.\nOverride bad status codes from server.\nProvide more details in error message from server.\n\nTODO: Find an API that returns error details!",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#errors-and-pagination",
    "href": "slides/httr2/httr2-responses.html#errors-and-pagination",
    "title": "Process other response types",
    "section": "Errors and pagination",
    "text": "Errors and pagination\n\nreq_perform_iterative() has on_error = c(\"stop\", \"return\")\n\nOn R error\n‚Äústop‚Äù = ‚Äúthrow an R error if any call throws an R error‚Äù\n‚Äúreturn‚Äù = ‚Äústop iterating, return everything so far‚Äù\n\nreq_error(is_error = \\(resp) FALSE) can cause that not to trigger\nMay want to combine these for your use-case",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#more-on-retries",
    "href": "slides/httr2/httr2-responses.html#more-on-retries",
    "title": "Process other response types",
    "section": "More on retries",
    "text": "More on retries\n\nhttr2::req_retry(\n  req,\n  max_tries = NULL,\n  max_seconds = NULL,\n  is_transient = NULL,\n  backoff = NULL,\n  after = NULL\n)\n\n\nis_transient = function to decide whether to retry from resp\nbackoff = function to convert tries to wait_seconds\nafter = function to convert resp to wait_seconds\n\n\n\nIn pagination chapter, we just set max_tries here to 3\nThe LinkedIn API throws a transient 404 randomly during some calls, so I set it up to retry on 404.",
    "crumbs": [
      "Get more data",
      "Process other response types"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#browsing-apis.guru",
    "href": "slides/httr2/apis-start.html#browsing-apis.guru",
    "title": "Get started with APIs",
    "section": "Browsing APIs.guru",
    "text": "Browsing APIs.guru\n(launch APIs.guru to explore)\n\nWarning: No API database is complete! Just because it isn‚Äôt here doesn‚Äôt mean it doesn‚Äôt exist!\nGood if you know what you‚Äôre looking for\nLess good for exploration\nBut we can grab the data directly!",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#the-apis.guru-api-list",
    "href": "slides/httr2/apis-start.html#the-apis.guru-api-list",
    "title": "Get started with APIs",
    "section": "The APIs.guru API List",
    "text": "The APIs.guru API List\n\n(list.json result)\n\n\n\nJSON = JavaScript Object Notation\nBy far most common format for API data\nI‚Äôm using JSONVue browser extension\nJSON: Great for nested data\nWe aren‚Äôt going to dig into the format because we won‚Äôt use it directly",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#fetch-all-apis.guru-apis",
    "href": "slides/httr2/apis-start.html#fetch-all-apis.guru-apis",
    "title": "Get started with APIs",
    "section": "Fetch all APIs.guru APIs",
    "text": "Fetch all APIs.guru APIs\n\n\nall_apis &lt;- jsonlite::fromJSON(\"https://api.apis.guru/v2/list.json\")\n\n\n\n\nlength(all_apis)\n\n#&gt; [1] 2529\n\n\n\n\n\nhead(names(all_apis))\n\n#&gt; [1] \"1forge.com\"                    \"1password.com:events\"         \n#&gt; [3] \"1password.local:connect\"       \"6-dot-authentiqio.appspot.com\"\n#&gt; [5] \"ably.io:platform\"              \"ably.net:control\"\n\n\n\n\n\npurrr::pluck_depth(all_apis)\n\n#&gt; [1] 10\n\n\n\n\n\nstr(head(all_apis, 2), max.level = 2)\n\n#&gt; List of 2\n#&gt;  $ 1forge.com          :List of 3\n#&gt;   ..$ added    : chr \"2017-05-30T08:34:14.000Z\"\n#&gt;   ..$ preferred: chr \"0.0.1\"\n#&gt;   ..$ versions :List of 1\n#&gt;  $ 1password.com:events:List of 3\n#&gt;   ..$ added    : chr \"2021-07-19T10:17:09.188Z\"\n#&gt;   ..$ preferred: chr \"1.0.0\"\n#&gt;   ..$ versions :List of 1\n\n\n\n\n\njsonlite = one of several packages for parsing JSON\n\nWe‚Äôll stick with it because it works & is used by higher-level packages\nUsed in {shiny}, {httr}, {httr2}, dozens of other packages\n\nfromJSON does some automatic guessing, we‚Äôll come back to this in a later chapter\n\nAlternatives: read_json reads file, parse_json reads string; don‚Äôt guess by default\n\nThis result is a huge, nested list\npurrr::pluck_depth() tells you how nested a list is\nhard to see this. Let‚Äôs rectangle it!",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#fetch-json-exercises",
    "href": "slides/httr2/apis-start.html#fetch-json-exercises",
    "title": "Get started with APIs",
    "section": "Fetch JSON: Exercises",
    "text": "Fetch JSON: Exercises\n(not written yet, but general idea will be‚Ä¶)\n\nProvide URLs of JSON-formatted data\n\nHow many top-level items are described in this data?\nHow deeply is this data nested?\nWhat is the X of the Yth item?\n\n\n\n\nThis data will be on the book‚Äôs website to avoid changes.",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#unnesting",
    "href": "slides/httr2/apis-start.html#unnesting",
    "title": "Get started with APIs",
    "section": "Unnesting",
    "text": "Unnesting\n\nIs value a list of lists of observations?\n\ntidyr::unnest_longer(value) separates into rows\n\nIs value a list of lists of variables?\n\ntidyr::unnest_wider(value) separates into columns\n\ntidyr::unnest_auto() uses heuristic to choose between those\n\n\n\nTidy data: Every row is a single observation, every column is a single variable.\n‚ÄúHeuristic‚Äù is a fancy word for ‚Äúset of rules.‚Äù I used it here specifically so I can define it and try to demystify it.\nunnest_auto() isn‚Äôt perfect.",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#how-does-unnest_auto-choose",
    "href": "slides/httr2/apis-start.html#how-does-unnest_auto-choose",
    "title": "Get started with APIs",
    "section": "How does unnest_auto() choose?",
    "text": "How does unnest_auto() choose?\n\n\n\n\n\nflowchart TD\n    B{{\"How many elements have names?\"}}\n        B --&gt;|\"none\"| C[\"Unnest longer, drop indices\"]\n        B --&gt;|\"some\"| C\n        B --&gt;|\"all\"| D{{\"Are any names reused?\"}}\n            D --&gt;|\"yes\"| E[\"Unnest wider\"]\n            D --&gt;|\"no\"| F[\"Unnest longer, keep indices\"]\n\n\n\n\n\n\n\nWould it be helpful to see this as code?",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-1",
    "href": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-1",
    "title": "Get started with APIs",
    "section": "What does unnest_auto() miss? (1)",
    "text": "What does unnest_auto() miss? (1)\nColumn is a named list (not a list of named lists).\n\nError: Names are lost\nCheck: rlang::is_named(df$col)\nFix: dplyr::mutate(col_name = names(col)) before unnesting.",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-2",
    "href": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-2",
    "title": "Get started with APIs",
    "section": "What does unnest_auto() miss? (2)",
    "text": "What does unnest_auto() miss? (2)\nOne or more elements of a list column are empty.\n\nError: Assumes unnest_longer(), even if it‚Äôs just some missing values among a column that is obviously otherwise unnest_wider-worthy.\nCheck: any(lengths(df$col) == 0)\nFix: Do the unnest_auto() checks only on values of col that have lengths(col) &gt; 0\n\n\n\nAn empty item doesn‚Äôt have any names.\nCould be NULL or empty list()\nThis is relatively common in JSON.",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-3",
    "href": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-3",
    "title": "Get started with APIs",
    "section": "What does unnest_auto() miss? (3)",
    "text": "What does unnest_auto() miss? (3)\nOne or more elements of a list column lacks names, other elements have names.\n\nError: Names are lost.\nCheck: (flowchart already tests this, but makes the wrong decision)\nFix: unnest_longer(col, indices_to = \"descriptive_name\") as fall-through",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#how-should-i-choose-unnest-direction",
    "href": "slides/httr2/apis-start.html#how-should-i-choose-unnest-direction",
    "title": "Get started with APIs",
    "section": "How should I choose unnest direction?",
    "text": "How should I choose unnest direction?\n\n\n\n\n\nflowchart TD\n    A{{\"Is the overall column named?\"}}\n        A --&gt;|\"yes\"| AA[\"Create a names column\"]\n            AA --&gt; B\n        A --&gt;|\"no\"| B\n    B{{\"How many non-empty elements have names?\"}}\n        B --&gt;|\"none\"| C[\"Unnest longer, drop indices\"]\n        B --&gt;|\"some\"| F\n        B --&gt;|\"all\"| D{{\"Are any names reused?\"}}\n            D --&gt;|\"yes\"| E[\"Unnest wider\"]\n            D --&gt;|\"no\"| F[\"Unnest longer, keep indices\"]\n\n\n\n\n\n\n\n\nDoes the overall column have names? Avoid losing the names\nFor the name check, only use non-empty names.\nWhen all have names you should validate! Overlapping names could be coincidental (eg, first version is always ‚Äúv1‚Äù, some have additional versions)\nWhen you keep indices, you should give them a descriptive name.\nWe‚Äôll see this in code as we go.",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#enframe",
    "href": "slides/httr2/apis-start.html#enframe",
    "title": "Get started with APIs",
    "section": "enframe()",
    "text": "enframe()\n\n\nall_apis_df &lt;- all_apis |&gt;\n  tibble::enframe(name = \"api_name\")\n\n\n\n\nall_apis_df\n\n#&gt; # A tibble: 2,529 √ó 2\n#&gt;    api_name                      value           \n#&gt;    &lt;chr&gt;                         &lt;list&gt;          \n#&gt;  1 1forge.com                    &lt;named list [3]&gt;\n#&gt;  2 1password.com:events          &lt;named list [3]&gt;\n#&gt;  3 1password.local:connect       &lt;named list [3]&gt;\n#&gt;  4 6-dot-authentiqio.appspot.com &lt;named list [3]&gt;\n#&gt;  5 ably.io:platform              &lt;named list [3]&gt;\n#&gt;  6 ably.net:control              &lt;named list [3]&gt;\n#&gt;  7 abstractapi.com:geolocation   &lt;named list [3]&gt;\n#&gt;  8 adafruit.com                  &lt;named list [3]&gt;\n#&gt;  9 adobe.com:aem                 &lt;named list [3]&gt;\n#&gt; 10 adyen.com:AccountService      &lt;named list [3]&gt;\n#&gt; # ‚Ñπ 2,519 more rows\n\n\n\n\n\ntibble::enframe() is underused, imo!\nBest with named lists\nname arg is often useful (if input is named)\n\nIf it isn‚Äôt named, set to NULL\n\nvalue arg is available but we‚Äôre almost always going to destroy that column\nNeed to figure out whether those values are blocks of results (rows) or separate pieces of information about a single result (columns)",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#value-column-unnest-wider-or-longer",
    "href": "slides/httr2/apis-start.html#value-column-unnest-wider-or-longer",
    "title": "Get started with APIs",
    "section": "value column: Unnest wider or longer?",
    "text": "value column: Unnest wider or longer?\n(incorporate flowchart once it exists)\n\n\nrlang::is_named(all_apis_df$value)\n\n#&gt; [1] FALSE\n\n\n\n\n\nnon_empties &lt;- all_apis_df$value[lengths(all_apis_df$value) &gt; 0]\nelement_names &lt;- purrr::map(non_empties, names)\nhas_null &lt;- unique(purrr::map_lgl(element_names, is.null))\n\n\n\n\nhas_null\n\n#&gt; [1] FALSE\n\n\n\n\n\ncommon_names &lt;- purrr::reduce(element_names, intersect)\n\n\n\n\ncommon_names\n\n#&gt; [1] \"added\"     \"preferred\" \"versions\"\n\n\n\n\n\nWider if multiple variables per value, longer if multiple observations per value.\nThe purrr reduce thing checks for names that everything shares (inspired by unnest_auto).\n(make sure everyone groks why wider)",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#unnest-values",
    "href": "slides/httr2/apis-start.html#unnest-values",
    "title": "Get started with APIs",
    "section": "Unnest values",
    "text": "Unnest values\n\n\nall_apis_versions &lt;- all_apis_df |&gt;\n  tidyr::unnest_wider(value)\n\n\n\n\nall_apis_versions\n\n#&gt; # A tibble: 2,529 √ó 4\n#&gt;    api_name                      added                    preferred versions    \n#&gt;    &lt;chr&gt;                         &lt;chr&gt;                    &lt;chr&gt;     &lt;list&gt;      \n#&gt;  1 1forge.com                    2017-05-30T08:34:14.000Z 0.0.1     &lt;named list&gt;\n#&gt;  2 1password.com:events          2021-07-19T10:17:09.188Z 1.0.0     &lt;named list&gt;\n#&gt;  3 1password.local:connect       2021-04-16T15:56:45.939Z 1.5.7     &lt;named list&gt;\n#&gt;  4 6-dot-authentiqio.appspot.com 2017-03-15T14:45:58.000Z 6         &lt;named list&gt;\n#&gt;  5 ably.io:platform              2019-07-13T11:28:07.000Z 1.1.0     &lt;named list&gt;\n#&gt;  6 ably.net:control              2021-07-26T09:45:31.536Z 1.0.14    &lt;named list&gt;\n#&gt;  7 abstractapi.com:geolocation   2021-04-14T17:12:40.648Z 1.0.0     &lt;named list&gt;\n#&gt;  8 adafruit.com                  2018-02-10T10:41:43.000Z 2.0.0     &lt;named list&gt;\n#&gt;  9 adobe.com:aem                 2019-01-03T07:01:34.000Z 3.7.1-pr‚Ä¶ &lt;named list&gt;\n#&gt; 10 adyen.com:AccountService      2023-02-17T11:02:20.620Z 6         &lt;named list&gt;\n#&gt; # ‚Ñπ 2,519 more rows",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-if-we-went-longer",
    "href": "slides/httr2/apis-start.html#what-if-we-went-longer",
    "title": "Get started with APIs",
    "section": "What if we went longer?",
    "text": "What if we went longer?\n\nall_apis_df |&gt;\n  tidyr::unnest_longer(value)\n\n#&gt; # A tibble: 7,587 √ó 3\n#&gt;    api_name                      value            value_id \n#&gt;    &lt;chr&gt;                         &lt;named list&gt;     &lt;chr&gt;    \n#&gt;  1 1forge.com                    &lt;chr [1]&gt;        added    \n#&gt;  2 1forge.com                    &lt;chr [1]&gt;        preferred\n#&gt;  3 1forge.com                    &lt;named list [1]&gt; versions \n#&gt;  4 1password.com:events          &lt;chr [1]&gt;        added    \n#&gt;  5 1password.com:events          &lt;chr [1]&gt;        preferred\n#&gt;  6 1password.com:events          &lt;named list [1]&gt; versions \n#&gt;  7 1password.local:connect       &lt;chr [1]&gt;        added    \n#&gt;  8 1password.local:connect       &lt;chr [1]&gt;        preferred\n#&gt;  9 1password.local:connect       &lt;named list [1]&gt; versions \n#&gt; 10 6-dot-authentiqio.appspot.com &lt;chr [1]&gt;        added    \n#&gt; # ‚Ñπ 7,577 more rows\n\n\n\n\nThankfully going the wrong way is often obvious.\ntidyr::unnest() creates this same monstrosity",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#choose_unnest_direction",
    "href": "slides/httr2/apis-start.html#choose_unnest_direction",
    "title": "Get started with APIs",
    "section": "choose_unnest_direction()",
    "text": "choose_unnest_direction()\n\n# Based on `tidyr::unnest_auto` and `tidyr:::guess_dir`\nchoose_unnest_direction &lt;- function(df, col) {\n  col &lt;- tidyselect::vars_pull(dplyr::tbl_vars(df), {{col}})\n  col_contents &lt;- df[[col]]\n  code &lt;- character()\n  \n  if (rlang::is_named(col_contents)) {\n    code &lt;- c(\n      code,\n      glue::glue(\n        \"dplyr::mutate(descriptive_name = names({col}), .before = {col})\"\n      )\n    )\n  }\n  \n  non_empties &lt;- col_contents[lengths(col_contents) &gt; 0]\n  \n  element_names &lt;- purrr::map(non_empties, names)\n  has_null &lt;- unique(purrr::map_lgl(element_names, is.null))\n  if (identical(has_null, TRUE)) {\n    code &lt;- c(\n      code, \n      glue::glue(\"tidyr::unnest_longer({col}, indices_include = FALSE)\")\n    )\n    return(glue::glue_collapse(code, sep = \" |&gt;\\n  \"))\n  } else if (identical(has_null, FALSE)) {\n    common_names &lt;- purrr::reduce(element_names, intersect)\n    n_common &lt;- length(common_names)\n    if (n_common &gt; 0) {\n      code &lt;- c(\n        code,\n        glue::glue(\"tidyr::unnest_wider({col})\")\n      )\n      return(glue::glue_collapse(code, sep = \" |&gt;\\n  \"))\n    }\n  }\n  code &lt;- c(\n    code,\n    glue::glue(\"tidyr::unnest_longer({col}, indices_to = \\\"descriptive_name\\\")\")\n  )\n  return(glue::glue_collapse(code, sep = \" |&gt;\\n  \"))\n}\n\n\nThis has some tidyeval, so I‚Äôll probably move it to a package and talk about it or put it online to copy/paste, rather than showing the code here",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#unnest-versions-wider-or-longer",
    "href": "slides/httr2/apis-start.html#unnest-versions-wider-or-longer",
    "title": "Get started with APIs",
    "section": "Unnest versions: Wider or longer?",
    "text": "Unnest versions: Wider or longer?\n\n\nrlang::is_named(all_apis_versions$versions)\n\n#&gt; [1] FALSE\n\n\n\n\n\nnon_empties &lt;- all_apis_versions$versions[lengths(all_apis_versions$versions) &gt; 0]\nelement_names &lt;- purrr::map(non_empties, names)\nhas_null &lt;- unique(purrr::map_lgl(element_names, is.null))\n\n\n\n\nhas_null\n\n#&gt; [1] FALSE\n\n\n\n\n\ncommon_names &lt;- purrr::reduce(element_names, intersect)\n\n\n\n\ncommon_names\n\n#&gt; character(0)\n\n\n\n\n\nchoose_unnest_direction(all_apis_versions, versions)\n\n#&gt; tidyr::unnest_longer(versions, indices_to = \"descriptive_name\")",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#unnest-versions",
    "href": "slides/httr2/apis-start.html#unnest-versions",
    "title": "Get started with APIs",
    "section": "Unnest versions",
    "text": "Unnest versions\n\n\nall_apis_longer &lt;- all_apis_versions |&gt;\n  tidyr::unnest_longer(versions, indices_to = \"version\")\n\n\n\n\nall_apis_longer\n\n#&gt; # A tibble: 3,992 √ó 5\n#&gt;    api_name                      added            preferred versions     version\n#&gt;    &lt;chr&gt;                         &lt;chr&gt;            &lt;chr&gt;     &lt;named list&gt; &lt;chr&gt;  \n#&gt;  1 1forge.com                    2017-05-30T08:3‚Ä¶ 0.0.1     &lt;named list&gt; 0.0.1  \n#&gt;  2 1password.com:events          2021-07-19T10:1‚Ä¶ 1.0.0     &lt;named list&gt; 1.0.0  \n#&gt;  3 1password.local:connect       2021-04-16T15:5‚Ä¶ 1.5.7     &lt;named list&gt; 1.5.7  \n#&gt;  4 6-dot-authentiqio.appspot.com 2017-03-15T14:4‚Ä¶ 6         &lt;named list&gt; 6      \n#&gt;  5 ably.io:platform              2019-07-13T11:2‚Ä¶ 1.1.0     &lt;named list&gt; 1.1.0  \n#&gt;  6 ably.net:control              2021-07-26T09:4‚Ä¶ 1.0.14    &lt;named list&gt; 1.0.14 \n#&gt;  7 abstractapi.com:geolocation   2021-04-14T17:1‚Ä¶ 1.0.0     &lt;named list&gt; 1.0.0  \n#&gt;  8 adafruit.com                  2018-02-10T10:4‚Ä¶ 2.0.0     &lt;named list&gt; 2.0.0  \n#&gt;  9 adobe.com:aem                 2019-01-03T07:0‚Ä¶ 3.7.1-pr‚Ä¶ &lt;named list&gt; 3.7.1-‚Ä¶\n#&gt; 10 adyen.com:AccountService      2023-02-17T11:0‚Ä¶ 6         &lt;named list&gt; 3      \n#&gt; # ‚Ñπ 3,982 more rows",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-if-we-went-wider",
    "href": "slides/httr2/apis-start.html#what-if-we-went-wider",
    "title": "Get started with APIs",
    "section": "What if we went wider?",
    "text": "What if we went wider?\n\nall_apis_versions |&gt; head() |&gt; tidyr::unnest_wider(versions)\n\n#&gt; # A tibble: 6 √ó 9\n#&gt;   api_name   added preferred `0.0.1`      `1.0.0`      `1.5.7`      `6`         \n#&gt;   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;     &lt;list&gt;       &lt;list&gt;       &lt;list&gt;       &lt;list&gt;      \n#&gt; 1 1forge.com 2017‚Ä¶ 0.0.1     &lt;named list&gt; &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;      \n#&gt; 2 1password‚Ä¶ 2021‚Ä¶ 1.0.0     &lt;NULL&gt;       &lt;named list&gt; &lt;NULL&gt;       &lt;NULL&gt;      \n#&gt; 3 1password‚Ä¶ 2021‚Ä¶ 1.5.7     &lt;NULL&gt;       &lt;NULL&gt;       &lt;named list&gt; &lt;NULL&gt;      \n#&gt; 4 6-dot-aut‚Ä¶ 2017‚Ä¶ 6         &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;       &lt;named list&gt;\n#&gt; 5 ably.io:p‚Ä¶ 2019‚Ä¶ 1.1.0     &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;      \n#&gt; 6 ably.net:‚Ä¶ 2021‚Ä¶ 1.0.14    &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;      \n#&gt; # ‚Ñπ 2 more variables: `1.1.0` &lt;list&gt;, `1.0.14` &lt;list&gt;\n\n\n\n\nhead() because otherwise we have something like 800 new columns\nNote the NULLs",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#preferred-versions",
    "href": "slides/httr2/apis-start.html#preferred-versions",
    "title": "Get started with APIs",
    "section": "Preferred versions",
    "text": "Preferred versions\n\n\nall_apis_preferred &lt;- all_apis_longer |&gt;\n  dplyr::filter(preferred == version) |&gt;\n  dplyr::select(api_name, version, versions)\n\n\n\n\nall_apis_preferred\n\n#&gt; # A tibble: 2,529 √ó 3\n#&gt;    api_name                      version     versions        \n#&gt;    &lt;chr&gt;                         &lt;chr&gt;       &lt;named list&gt;    \n#&gt;  1 1forge.com                    0.0.1       &lt;named list [7]&gt;\n#&gt;  2 1password.com:events          1.0.0       &lt;named list [7]&gt;\n#&gt;  3 1password.local:connect       1.5.7       &lt;named list [7]&gt;\n#&gt;  4 6-dot-authentiqio.appspot.com 6           &lt;named list [7]&gt;\n#&gt;  5 ably.io:platform              1.1.0       &lt;named list [7]&gt;\n#&gt;  6 ably.net:control              1.0.14      &lt;named list [7]&gt;\n#&gt;  7 abstractapi.com:geolocation   1.0.0       &lt;named list [8]&gt;\n#&gt;  8 adafruit.com                  2.0.0       &lt;named list [7]&gt;\n#&gt;  9 adobe.com:aem                 3.7.1-pre.0 &lt;named list [7]&gt;\n#&gt; 10 adyen.com:AccountService      6           &lt;named list [7]&gt;\n#&gt; # ‚Ñπ 2,519 more rows",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#preferred-versions-wider-or-longer",
    "href": "slides/httr2/apis-start.html#preferred-versions-wider-or-longer",
    "title": "Get started with APIs",
    "section": "Preferred versions: Wider or longer?",
    "text": "Preferred versions: Wider or longer?\n\n\nchoose_unnest_direction(all_apis_preferred, versions)\n\n#&gt; dplyr::mutate(descriptive_name = names(versions), .before = versions) |&gt;\n#&gt;   tidyr::unnest_wider(versions)\n\n\n\n\n\nhead(names(all_apis_preferred$versions))\n\n#&gt; [1] \"0.0.1\"  \"1.0.0\"  \"1.5.7\"  \"6\"      \"1.1.0\"  \"1.0.14\"\n\n\n\n\n\nall_apis_preferred_wide &lt;- all_apis_preferred |&gt;\n  tidyr::unnest_wider(versions)\n\n\n\n\nWe already dealt with these names, don‚Äôt need the mutate.",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#preferred-versions-unnested",
    "href": "slides/httr2/apis-start.html#preferred-versions-unnested",
    "title": "Get started with APIs",
    "section": "Preferred versions unnested",
    "text": "Preferred versions unnested\n\nall_apis_preferred_wide\n\n#&gt; # A tibble: 2,529 √ó 10\n#&gt;    api_name         version added info         updated swaggerUrl swaggerYamlUrl\n#&gt;    &lt;chr&gt;            &lt;chr&gt;   &lt;chr&gt; &lt;list&gt;       &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;         \n#&gt;  1 1forge.com       0.0.1   2017‚Ä¶ &lt;named list&gt; 2017-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt;  2 1password.com:e‚Ä¶ 1.0.0   2021‚Ä¶ &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt;  3 1password.local‚Ä¶ 1.5.7   2021‚Ä¶ &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt;  4 6-dot-authentiq‚Ä¶ 6       2017‚Ä¶ &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt;  5 ably.io:platform 1.1.0   2019‚Ä¶ &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt;  6 ably.net:control 1.0.14  2021‚Ä¶ &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt;  7 abstractapi.com‚Ä¶ 1.0.0   2021‚Ä¶ &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt;  8 adafruit.com     2.0.0   2018‚Ä¶ &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt;  9 adobe.com:aem    3.7.1-‚Ä¶ 2019‚Ä¶ &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt; 10 adyen.com:Accou‚Ä¶ 6       2023‚Ä¶ &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶ https://api.a‚Ä¶\n#&gt; # ‚Ñπ 2,519 more rows\n#&gt; # ‚Ñπ 3 more variables: openapiVer &lt;chr&gt;, link &lt;chr&gt;, externalDocs &lt;list&gt;",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#preferred-versions-glimpse",
    "href": "slides/httr2/apis-start.html#preferred-versions-glimpse",
    "title": "Get started with APIs",
    "section": "Preferred versions glimpse",
    "text": "Preferred versions glimpse\n\ndplyr::glimpse(all_apis_preferred_wide)\n\n#&gt; Rows: 2,529\n#&gt; Columns: 10\n#&gt; $ api_name       &lt;chr&gt; \"1forge.com\", \"1password.com:events\", \"1password.local:‚Ä¶\n#&gt; $ version        &lt;chr&gt; \"0.0.1\", \"1.0.0\", \"1.5.7\", \"6\", \"1.1.0\", \"1.0.14\", \"1.0‚Ä¶\n#&gt; $ added          &lt;chr&gt; \"2017-05-30T08:34:14.000Z\", \"2021-07-19T10:17:09.188Z\",‚Ä¶\n#&gt; $ info           &lt;list&gt; [[\"contact@1forge.com\", \"1Forge\", \"http://1forge.com\"]‚Ä¶\n#&gt; $ updated        &lt;chr&gt; \"2017-06-27T16:49:57.000Z\", \"2023-02-27T15:08:09.418Z\",‚Ä¶\n#&gt; $ swaggerUrl     &lt;chr&gt; \"https://api.apis.guru/v2/specs/1forge.com/0.0.1/swagge‚Ä¶\n#&gt; $ swaggerYamlUrl &lt;chr&gt; \"https://api.apis.guru/v2/specs/1forge.com/0.0.1/swagge‚Ä¶\n#&gt; $ openapiVer     &lt;chr&gt; \"2.0\", \"3.0.0\", \"3.0.2\", \"3.0.0\", \"3.0.1\", \"3.0.1\", \"3.‚Ä¶\n#&gt; $ link           &lt;chr&gt; \"https://api.apis.guru/v2/specs/1forge.com/0.0.1.json\",‚Ä¶\n#&gt; $ externalDocs   &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, [\"API ‚Ä¶",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#info-wider-or-longer",
    "href": "slides/httr2/apis-start.html#info-wider-or-longer",
    "title": "Get started with APIs",
    "section": "info: wider or longer?",
    "text": "info: wider or longer?\n\nchoose_unnest_direction(all_apis_preferred_wide, info)\n\n#&gt; tidyr::unnest_wider(info)\n\nall_apis_preferred_wide |&gt; \n  tidyr::unnest_wider(info, names_sep = \"_\")\n\n#&gt; # A tibble: 2,529 √ó 76\n#&gt;    api_name  version added info_contact info_description info_title info_version\n#&gt;    &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt; &lt;list&gt;       &lt;chr&gt;            &lt;chr&gt;      &lt;chr&gt;       \n#&gt;  1 1forge.c‚Ä¶ 0.0.1   2017‚Ä¶ &lt;named list&gt; \"Stock and Fore‚Ä¶ 1Forge Fi‚Ä¶ 0.0.1       \n#&gt;  2 1passwor‚Ä¶ 1.0.0   2021‚Ä¶ &lt;NULL&gt;       \"1Password Even‚Ä¶ Events API 1.0.0       \n#&gt;  3 1passwor‚Ä¶ 1.5.7   2021‚Ä¶ &lt;named list&gt; \"REST API inter‚Ä¶ 1Password‚Ä¶ 1.5.7       \n#&gt;  4 6-dot-au‚Ä¶ 6       2017‚Ä¶ &lt;named list&gt; \"Strong authent‚Ä¶ Authentiq‚Ä¶ 6           \n#&gt;  5 ably.io:‚Ä¶ 1.1.0   2019‚Ä¶ &lt;named list&gt; \"The [REST API ‚Ä¶ Platform ‚Ä¶ 1.1.0       \n#&gt;  6 ably.net‚Ä¶ 1.0.14  2021‚Ä¶ &lt;named list&gt; \"Use the Contro‚Ä¶ Control A‚Ä¶ 1.0.14      \n#&gt;  7 abstract‚Ä¶ 1.0.0   2021‚Ä¶ &lt;NULL&gt;       \"Abstract IP ge‚Ä¶ IP geoloc‚Ä¶ 1.0.0       \n#&gt;  8 adafruit‚Ä¶ 2.0.0   2018‚Ä¶ &lt;NULL&gt;       \"### The Intern‚Ä¶ Adafruit ‚Ä¶ 2.0.0       \n#&gt;  9 adobe.co‚Ä¶ 3.7.1-‚Ä¶ 2019‚Ä¶ &lt;named list&gt; \"Swagger AEM is‚Ä¶ Adobe Exp‚Ä¶ 3.7.1-pre.0 \n#&gt; 10 adyen.co‚Ä¶ 6       2023‚Ä¶ &lt;named list&gt; \"This API is us‚Ä¶ Account A‚Ä¶ 6           \n#&gt; # ‚Ñπ 2,519 more rows\n#&gt; # ‚Ñπ 69 more variables: `info_x-apisguru-categories` &lt;list&gt;,\n#&gt; #   `info_x-logo` &lt;list&gt;, `info_x-origin` &lt;list&gt;, `info_x-providerName` &lt;chr&gt;,\n#&gt; #   `info_x-serviceName` &lt;chr&gt;, info_license &lt;list&gt;, info_termsOfService &lt;chr&gt;,\n#&gt; #   `info_x-unofficialSpec` &lt;lgl&gt;, `info_x-preferred` &lt;lgl&gt;,\n#&gt; #   `info_x-publicVersion` &lt;lgl&gt;, `info_x-timestamp` &lt;chr&gt;,\n#&gt; #   `info_x-description-language` &lt;chr&gt;, `info_x-release-note` &lt;list&gt;, ‚Ä¶\n\n\n\n\nnames_sep avoids name overlap & shows us all the things that came from info\nNotice that it went from 10 columns to 76.",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#info-hoist",
    "href": "slides/httr2/apis-start.html#info-hoist",
    "title": "Get started with APIs",
    "section": "info: hoist()",
    "text": "info: hoist()\n\n\nall_preferred_apis_with_categories &lt;- all_apis_preferred_wide |&gt;\n  tidyr::hoist(info, categories = \"x-apisguru-categories\")\n\n\n\n\nall_preferred_apis_with_categories\n\n#&gt; # A tibble: 2,529 √ó 11\n#&gt;    api_name             version added categories info         updated swaggerUrl\n#&gt;    &lt;chr&gt;                &lt;chr&gt;   &lt;chr&gt; &lt;list&gt;     &lt;list&gt;       &lt;chr&gt;   &lt;chr&gt;     \n#&gt;  1 1forge.com           0.0.1   2017‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2017-0‚Ä¶ https://a‚Ä¶\n#&gt;  2 1password.com:events 1.0.0   2021‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶\n#&gt;  3 1password.local:con‚Ä¶ 1.5.7   2021‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶\n#&gt;  4 6-dot-authentiqio.a‚Ä¶ 6       2017‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  5 ably.io:platform     1.1.0   2019‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  6 ably.net:control     1.0.14  2021‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  7 abstractapi.com:geo‚Ä¶ 1.0.0   2021‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  8 adafruit.com         2.0.0   2018‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  9 adobe.com:aem        3.7.1-‚Ä¶ 2019‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶\n#&gt; 10 adyen.com:AccountSe‚Ä¶ 6       2023‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶\n#&gt; # ‚Ñπ 2,519 more rows\n#&gt; # ‚Ñπ 4 more variables: swaggerYamlUrl &lt;chr&gt;, openapiVer &lt;chr&gt;, link &lt;chr&gt;,\n#&gt; #   externalDocs &lt;list&gt;",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#filter-apis",
    "href": "slides/httr2/apis-start.html#filter-apis",
    "title": "Get started with APIs",
    "section": "Filter APIs",
    "text": "Filter APIs\n\nall_apis_preferred_wide |&gt;\n  tidyr::hoist(info, categories = \"x-apisguru-categories\") |&gt;\n  dplyr::rowwise() |&gt;\n  dplyr::filter(\"open_data\" %in% categories) |&gt;\n  dplyr::ungroup()\n\n#&gt; # A tibble: 318 √ó 11\n#&gt;    api_name             version added categories info         updated swaggerUrl\n#&gt;    &lt;chr&gt;                &lt;chr&gt;   &lt;chr&gt; &lt;list&gt;     &lt;list&gt;       &lt;chr&gt;   &lt;chr&gt;     \n#&gt;  1 amentum.space:aviat‚Ä¶ 1.5.0   2021‚Ä¶ &lt;chr [2]&gt;  &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶\n#&gt;  2 amentum.space:gravi‚Ä¶ 1.1.1   2021‚Ä¶ &lt;chr [2]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  3 amentum.space:space‚Ä¶ 1.1.2   2021‚Ä¶ &lt;chr [2]&gt;  &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶\n#&gt;  4 api.gov.uk:vehicle-‚Ä¶ 1.1.0   2020‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  5 apis.guru            2.2.0   2015‚Ä¶ &lt;chr [2]&gt;  &lt;named list&gt; 2023-0‚Ä¶ https://a‚Ä¶\n#&gt;  6 apisetu.gov.in:aaha‚Ä¶ 3.0.0   2021‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  7 apisetu.gov.in:acko  3.0.0   2021‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  8 apisetu.gov.in:agtr‚Ä¶ 3.0.0   2021‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt;  9 apisetu.gov.in:ahar‚Ä¶ 3.0.0   2021‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt; 10 apisetu.gov.in:aiim‚Ä¶ 3.0.0   2021‚Ä¶ &lt;chr [1]&gt;  &lt;named list&gt; 2021-0‚Ä¶ https://a‚Ä¶\n#&gt; # ‚Ñπ 308 more rows\n#&gt; # ‚Ñπ 4 more variables: swaggerYamlUrl &lt;chr&gt;, openapiVer &lt;chr&gt;, link &lt;chr&gt;,\n#&gt; #   externalDocs &lt;list&gt;\n\n\n\n\nPoint here is now we can work with this as data.\nCould also unnest_longer and filter for ‚Äúopen_data‚Äù\nswaggerUrl is JSON, swaggerYamlUrl is YAML version of the same thing\nYAML is another data format. Technically YAML is a superset of JSON, with added commenting capabilities.\nRMarkdown headers + package descriptions are YAML-related.\nWe‚Äôll see more about YAML and find out what ‚ÄúSwagger‚Äù means in the next chapter!",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#rectangling-exercises",
    "href": "slides/httr2/apis-start.html#rectangling-exercises",
    "title": "Get started with APIs",
    "section": "Rectangling: Exercises",
    "text": "Rectangling: Exercises\n\nProvide sample (constructed) data, have you choose direction.\nTo include:\n\nSimple longer.\nSimple wider.\nOverall column is named, otherwise nothing to unnest.\nOverall column is named, then there‚Äôs stuff to unnest.\nEmpty values, otherwise clearly wider.\nunnest_auto() goes wider, but shared names are coincidental.\nSome elements unnamed, but definitely longer.",
    "crumbs": [
      "Get started",
      "Get started with APIs"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#posit-cloud",
    "href": "slides/plumber/plumber-deploy.html#posit-cloud",
    "title": "Web APIs with R Book Club",
    "section": "Posit Cloud",
    "text": "Posit Cloud\n\nFree tier available\nDeploying: (relatively) Easy & Free\nUsing: Difficult\n\nLoad API in browser\n\nLogin to posit.cloud\n\nCopy cookie (see How do I tell the API who I am)\nPaste cookie into file\nUse file with httr2::req_cookie_preserve()"
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#posit-cloud-demo",
    "href": "slides/plumber/plumber-deploy.html#posit-cloud-demo",
    "title": "Web APIs with R Book Club",
    "section": "Posit Cloud: Demo",
    "text": "Posit Cloud: Demo\n\ndeploy_api &lt;- function(package, name, appName = name, ...) {\n  api_dir &lt;- withr::local_tempdir(\"api\")\n  file_path &lt;- paste0(api_dir, \"/entrypoint.R\")\n  entrypoint_text &lt;- glue::glue(\n    'library({package})',\n    'plumber::plumb_api(\"{package}\", \"{name}\")',\n    .sep = \"\\n\"\n  )\n  writeLines(entrypoint_text, file_path)\n  rsconnect::deployAPI(api_dir, appName = appName, ...)\n}\n# Login to posit.cloud; click your name, then Account, then Tokens\n# + New Token, or Copy existing token, and follow instructions\ndeploy_api(\"yourPackage\", \"yourAPI\")"
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#posit-connect",
    "href": "slides/plumber/plumber-deploy.html#posit-connect",
    "title": "Web APIs with R Book Club",
    "section": "Posit Connect",
    "text": "Posit Connect\n\nPosit Connect = paid enterprise service\nDeploying: Identical to Posit Cloud (just different token)\nUsing: Easy\n\nNo hurdles other than what your IT creates"
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#plumberdeploy",
    "href": "slides/plumber/plumber-deploy.html#plumberdeploy",
    "title": "Web APIs with R Book Club",
    "section": "plumberDeploy",
    "text": "plumberDeploy\nTODO: Does this still work? No updates in 2.5 years"
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#others",
    "href": "slides/plumber/plumber-deploy.html#others",
    "title": "Web APIs with R Book Club",
    "section": "Others",
    "text": "Others\nTODO: Add the hard things. The free/‚Äúeasy‚Äù ones ate the day!"
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#meeting-videos",
    "href": "slides/plumber/plumber-deploy.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#the-2-auths",
    "href": "slides/plumber/plumber-security.html#the-2-auths",
    "title": "Web APIs with R Book Club",
    "section": "The 2 auths",
    "text": "The 2 auths\n\n\n\nAuthentication\n\n\nVerifying who you are\nUses some sort of ‚Äúcredentials‚Äù\n\n\n\nAuthorization\n\n\nGranting access\n\n\n\n\nBoth often abbreviated ‚Äúauth‚Äù\nOften used interchangeably\n\n\n\nThe HTTP Authorization request header can be used to provide credentials that authenticate a user agent with a server, allowing access to a protected resource. ‚Äî MDN web docs\n\n\n\n\n‚ÄúTECHNICALLY‚Ä¶‚Äù\nCredentials = username & password, api key, temporary token‚Ä¶\n‚ÄúDespite what the internet will insist on telling you‚Ä¶‚Äù (‚ÄúOften used‚Äù)\nMozilla Developer Network (MDN) is pretty much THE reference for these things, and it mixes them.\n(Learned there that server is supposed to send 401 with info about how to auth in WWW-Authenticate header! Haven‚Äôt found an API that actually does that.)"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#what-are-the-dangers-of-leaked-creds",
    "href": "slides/plumber/plumber-security.html#what-are-the-dangers-of-leaked-creds",
    "title": "Web APIs with R Book Club",
    "section": "What are the dangers of leaked creds?",
    "text": "What are the dangers of leaked creds?\n\n\n\nHow much control does it have?\n\nCan it lock you out?\nCan it reveal sensitive data?\n\n\n\n\nHow long does it last?\n\nShorter = safer\nCan you revoke it?\n\n\n\n\n\nHow likely is it to leak?\n\nWhen do you send it?\nWhere do you send it?\nHow often do you send it?"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#types-of-authentication",
    "href": "slides/plumber/plumber-security.html#types-of-authentication",
    "title": "Web APIs with R Book Club",
    "section": "Types of authentication",
    "text": "Types of authentication\n\n\n\nüî¥ HTTP Basic: username + password sent with request\n\nAccess entire account\nOften difficult to turn off\n\n\n\nüü† API Key: password-like thing sent with request\n\nUsually key == you\nYou can often revoke\n\n\n\n\nüü° Bearer Token: shorter-lived api-key-like thing\n\nDifferent token for different use\nOften short-lived\n\n\n\nüü¢ OAuth: Multi-step process to generate a key\n\nExists to minimize dangers\nMultiple short-lived pieces\n\n\n\n\n\n\nThere are other things, but these three cover almost everything.\nAnd almost nobody uses the first one for APIs anymore.\nOauth not always implemented correctly\nOther schemes like api keys in cookies, SSL certs not discussed here"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#review-of-authentication-schemes",
    "href": "slides/plumber/plumber-security.html#review-of-authentication-schemes",
    "title": "Web APIs with R Book Club",
    "section": "Review of authentication schemes",
    "text": "Review of authentication schemes\n(FROM httr2-authentication.Rmd once that‚Äôs edited)"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#api-key-considerations",
    "href": "slides/plumber/plumber-security.html#api-key-considerations",
    "title": "Web APIs with R Book Club",
    "section": "API key considerations",
    "text": "API key considerations\n\nAccept in URL query?\n\nMay be easier for user (eg, purely in-browser)\nLess secure than header\n\nCookies? {-}\n\nIf you set cookie, you need to read it (see later slide)\nProbably also accept header"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#api-keys-with-plumber-process-keys",
    "href": "slides/plumber/plumber-security.html#api-keys-with-plumber-process-keys",
    "title": "Web APIs with R Book Club",
    "section": "API keys with plumber: Process Keys",
    "text": "API keys with plumber: Process Keys\n\n#* Authorize user\n#* @filter authorize_api_key\nfunction(req) {\n  api_key &lt;- req$HTTP_AUTHORIZATION %||%            # Header\n    req$session$api_key %||% req$cookies$api_key    # Cookies\n  # Code to validate and process the API key.\n  req$authorized &lt;- TRUE # Or FALSE, set in auth section\n  plumber::forward()\n}\n\n\n#* @preempt authorize_api_key if endpoint doesn‚Äôt use auth"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#api-keys-with-plumber-error",
    "href": "slides/plumber/plumber-security.html#api-keys-with-plumber-error",
    "title": "Web APIs with R Book Club",
    "section": "API keys with plumber: Error",
    "text": "API keys with plumber: Error\n\n#* Error: Unauthorized\n#* @filter stop_unauthorized\nfunction(req) {\n  if (req$authorized) {\n    plumber::forward()\n  }\n  res$status &lt;- 401L\n  # TODO: do_the_log_thing() per plumber-errors.Rmd\n  res$serializer &lt;- plumber::serializer_json\n  res$body &lt;- list(\n    error = \"Unauthorized\",\n    message = \"Obtain an API key at https://your_key_process.html\"\n  )\n}\n\n\n#* @preempt stop_unauthorized if endpoint doesn‚Äôt require auth\n\nIn addition to authorize_api_key if not used at all"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#oauth2-with-plumber",
    "href": "slides/plumber/plumber-security.html#oauth2-with-plumber",
    "title": "Web APIs with R Book Club",
    "section": "OAuth2 with plumber",
    "text": "OAuth2 with plumber\n\nEndpoint for user to initiate Oauth2 dance\n\nWill launch browser for interaction with OAuth2 provider\n\nEndpoint for provider to send code\nUse state params to keep track of user\nEnd result is a bearer token (+ possibly other pieces)\n\nTODO: Actually implement this and make sure it works how you think!"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#using-cookies-for-user-state",
    "href": "slides/plumber/plumber-security.html#using-cookies-for-user-state",
    "title": "Web APIs with R Book Club",
    "section": "Using cookies for user state",
    "text": "Using cookies for user state\n\nClient controls cookies, so don‚Äôt store anything you ‚Äúown‚Äù\n\nEg, store a key, not a user ID\nSafer: Store preferences\nGeneral rule: things you‚Äôd accept as user input\n\nres$setCookie() for unencrypted data"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#encrypted-cookies",
    "href": "slides/plumber/plumber-security.html#encrypted-cookies",
    "title": "Web APIs with R Book Club",
    "section": "Encrypted cookies",
    "text": "Encrypted cookies\n\npr_cookie(pr, key, name) in router\n\nTells plumber to read/write that cookie.\nEncrypts with key\nBy default name = \"plumber\"\n\nAll stored in req$session$plumber\n\n\nCan include lists (ends up as json)\nTODO: Add details about env vars and/or keyring (probably same as httr2 slides)"
  },
  {
    "objectID": "slides/plumber/plumber-security.html#meeting-videos",
    "href": "slides/plumber/plumber-security.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/plumber/plumber-output.html#serializers",
    "href": "slides/plumber/plumber-output.html#serializers",
    "title": "Web APIs with R Book Club",
    "section": "Serializers",
    "text": "Serializers\n\nVocab: ‚ÄúSerialize‚Äù = ‚Äútranslate into a format for storage or transmission‚Äù\nDefault = json via jsonlite::toJSON()\n#* @serializer NAME list(ARGS)\n\neg, #* @serializer json list(na = \"string\")\n\nImpacts behavior AND Swagger docs"
  },
  {
    "objectID": "slides/plumber/plumber-output.html#structured-text",
    "href": "slides/plumber/plumber-output.html#structured-text",
    "title": "Web APIs with R Book Club",
    "section": "Structured text",
    "text": "Structured text\n\n\n\n\n\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\njson (default)\njsonlite::toJSON()\napplication/json\n\n\nunboxedJSON\njsonlite::toJSON(¬†¬†auto_unbox = TRUE)\napplication/json\n\n\ngeojson\ngeojsonsf::sfc_geojson() or geojsonsf::sf_geojson()\napplication/json\n\n\nyaml\nyaml::as_yaml()\ntext/x-yaml\n\n\ncsv\nreadr::format_csv\ntext/csv\n\n\ntsv\nreadr::format_tsv\ntext/tab-separated-values"
  },
  {
    "objectID": "slides/plumber/plumber-output.html#larger-data",
    "href": "slides/plumber/plumber-output.html#larger-data",
    "title": "Web APIs with R Book Club",
    "section": "Larger data",
    "text": "Larger data\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\nrds\nbase::serialize()\napplication/rds\n\n\nfeather\narrow::write_feather()\napplication/vnd.apache.arrow.file\n\n\nparquet\narrow::write_parquet()\napplication/parquet"
  },
  {
    "objectID": "slides/plumber/plumber-output.html#html-xml",
    "href": "slides/plumber/plumber-output.html#html-xml",
    "title": "Web APIs with R Book Club",
    "section": "HTML & XML",
    "text": "HTML & XML\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\nhtml\n(unprocessed)\ntext/html; charset=UTF-8\n\n\nhtmlwidget\nhtmlwidgets::saveWidget()\ntext/html; charset=UTF-8\n\n\n\nUse html for xml-structured data, too"
  },
  {
    "objectID": "slides/plumber/plumber-output.html#plain-text",
    "href": "slides/plumber/plumber-output.html#plain-text",
    "title": "Web APIs with R Book Club",
    "section": "Plain text",
    "text": "Plain text\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\ntext\nas.character()\ntext/plain\n\n\nformat\nformat()\ntext/plain\n\n\nprint\nprint()\ntext/plain\n\n\ncat\ncat()\ntext/plain"
  },
  {
    "objectID": "slides/plumber/plumber-output.html#devices-images-pdfs",
    "href": "slides/plumber/plumber-output.html#devices-images-pdfs",
    "title": "Web APIs with R Book Club",
    "section": "Devices (images & PDFs)",
    "text": "Devices (images & PDFs)\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\njpeg\njpeg()\nimage/jpeg\n\n\npng\npng()\nimage/png\n\n\nsvg\nsvg()\nimage/svg+xml\n\n\ntiff\ntiff()\nimage/tiff\n\n\nbmp\nbmp()\nimage/bmp\n\n\npdf\npdf()\napplication/pdf\n\n\n\nCan define new image serializers with serializer_device()"
  },
  {
    "objectID": "slides/plumber/plumber-output.html#other-things",
    "href": "slides/plumber/plumber-output.html#other-things",
    "title": "Web APIs with R Book Club",
    "section": "Other things",
    "text": "Other things\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\ncontentType\n(user-specified)\n(user-specified)\n\n\noctet\n(as is, must be raw)\napplication/octet-stream\n\n\n\n\n#* @serializer contentType list(type = \"application/protobuf\", serialize_fn = protolite::serialize_pb)\n\n\noctet is contentType with a serialize_fn that checks is.raw()"
  },
  {
    "objectID": "slides/plumber/plumber-output.html#meeting-videos",
    "href": "slides/plumber/plumber-output.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/plumber/creating-more.html#slide-1",
    "href": "slides/plumber/creating-more.html#slide-1",
    "title": "Web APIs with R Book Club",
    "section": "SLIDE 1",
    "text": "SLIDE 1\n\nADD SLIDES AS SECTIONS (##).\nTRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF."
  },
  {
    "objectID": "slides/plumber/creating-more.html#notes",
    "href": "slides/plumber/creating-more.html#notes",
    "title": "Web APIs with R Book Club",
    "section": "Notes",
    "text": "Notes\n\nLink to lambdr site.\nMention Shiny options for POST, etc?\nAlmost definitely link to OpenAPI book\nMaybe discuss a little bit about digging through (plumber) code to learn"
  },
  {
    "objectID": "slides/plumber/creating-more.html#meeting-videos",
    "href": "slides/plumber/creating-more.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/plumber/plumber-test.html#pure-functions",
    "href": "slides/plumber/plumber-test.html#pure-functions",
    "title": "Web APIs with R Book Club",
    "section": "Pure Functions",
    "text": "Pure Functions\n\nNo hidden inputs\nNo side effects\nGiven inputs, always return same output.\n\nAbstract pure functions out of endpoint functions for easier testing."
  },
  {
    "objectID": "slides/plumber/plumber-test.html#example-example-name",
    "href": "slides/plumber/plumber-test.html#example-example-name",
    "title": "Web APIs with R Book Club",
    "section": "Example: EXAMPLE NAME",
    "text": "Example: EXAMPLE NAME\nTODO: Create a simple API. First show as one function, then abstract out pure functions."
  },
  {
    "objectID": "slides/plumber/plumber-test.html#plumber-apis-as-packages",
    "href": "slides/plumber/plumber-test.html#plumber-apis-as-packages",
    "title": "Web APIs with R Book Club",
    "section": "plumber APIs as packages",
    "text": "plumber APIs as packages\n\nR Packages book for intro to R packages\nFunctions in R/\nAPIs in inst/plumber/API_NAME/\n\nRecommended: Use entrypoint.R to build router programmatically\n\nLaunch with plumber::plumb_api(\"yourpkg\", \"API_NAME\")"
  },
  {
    "objectID": "slides/plumber/plumber-test.html#brief-intro-to-testthat",
    "href": "slides/plumber/plumber-test.html#brief-intro-to-testthat",
    "title": "Web APIs with R Book Club",
    "section": "Brief Intro to testthat",
    "text": "Brief Intro to testthat\nMuch more in R Packages!\n\nusethis::use_testthat() in package\nTests in tests/testthat/test-filename.R\ntest_that(\"What you expected\", { code to test that })\nPure functions are relatively easy to test!"
  },
  {
    "objectID": "slides/plumber/plumber-test.html#example-example-from-above-in-a-package",
    "href": "slides/plumber/plumber-test.html#example-example-from-above-in-a-package",
    "title": "Web APIs with R Book Club",
    "section": "Example: EXAMPLE FROM ABOVE IN A PACKAGE",
    "text": "Example: EXAMPLE FROM ABOVE IN A PACKAGE\nTODO: Fill this in, describing where the bits from above go inside a package."
  },
  {
    "objectID": "slides/plumber/plumber-test.html#req-helper",
    "href": "slides/plumber/plumber-test.html#req-helper",
    "title": "Web APIs with R Book Club",
    "section": "req helper",
    "text": "req helper\n\n# tests/testthat/helper-req.R\nas_mock_req &lt;- function(...,\n                        body = list(), \n                        path = list(), \n                        query = list(),\n                        cookies = list()) {\n  list2env(c(\n    list(...), \n    argsBody = body, argsPath = path, argsQuery = query,  cookies = cookies\n  ))\n}"
  },
  {
    "objectID": "slides/plumber/plumber-test.html#testing-api-specific-functions",
    "href": "slides/plumber/plumber-test.html#testing-api-specific-functions",
    "title": "Web APIs with R Book Club",
    "section": "Testing API-specific functions",
    "text": "Testing API-specific functions\nTODO: FILL THIS IN WITH SPECIFICS\n\ntest_that(\"THE THING WORKS\", {\n  req &lt;- as_mock_req(body = list(whatever = 1))\n  expect_equal(function_to_test(req), expected_result)\n})"
  },
  {
    "objectID": "slides/plumber/plumber-test.html#local_api",
    "href": "slides/plumber/plumber-test.html#local_api",
    "title": "Web APIs with R Book Club",
    "section": "local_api()",
    "text": "local_api()\n\n# tests/testthat/helper-plumber.R\npr_run_bg &lt;- function(pr, port) {\n  callr::r_bg(\n    plumber::pr_run,\n    list(pr = pr, port = port),\n    package = \"plumber\"\n  )\n}\nlocal_api &lt;- function(pr, port, env = parent.frame()) {\n  bg_api &lt;- pr_run_bg(pr, port)\n  # Sys.sleep(2) # TODO: Test whether this is necessary!\n  withr::defer(bg_api$kill(), envir = env)\n}\nreq_local_api &lt;- function(endpoint, port) {\n  httr2::request(glue::glue(\"http://127.0.0.1:{port}\")) |&gt; \n    httr2::req_url_path_append(endpoint)\n}"
  },
  {
    "objectID": "slides/plumber/plumber-test.html#testing-plumber-routers",
    "href": "slides/plumber/plumber-test.html#testing-plumber-routers",
    "title": "Web APIs with R Book Club",
    "section": "Testing plumber routers",
    "text": "Testing plumber routers\nUse these for auth, errors, etc\n\n# test/testthat/test-router.R\ntest_that(\"My router does an expected thing\", {\n  api &lt;- plumber::plumb_api(\"mypackage\", \"target_api\")\n  port &lt;- httpuv::randomPort()\n  local_api(api, port)\n  # TODO: Update this with auth failure.\n  req &lt;- req_local_api(\"predict/x\", port)\n  expect_error(\n    httr2::req_perform(req),\n    class = \"mypkg_error_auth\"\n  )\n})"
  },
  {
    "objectID": "slides/plumber/plumber-test.html#random-notes",
    "href": "slides/plumber/plumber-test.html#random-notes",
    "title": "Web APIs with R Book Club",
    "section": "random notes",
    "text": "random notes\nInclude ideas from these plumber articles:\n\nRuntime\n\nJumpingRivers had a blog about this!"
  },
  {
    "objectID": "slides/plumber/plumber-test.html#meeting-videos",
    "href": "slides/plumber/plumber-test.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#path-vs-other",
    "href": "slides/plumber/plumber-input.html#path-vs-other",
    "title": "Web APIs with R Book Club",
    "section": "Path vs Other",
    "text": "Path vs Other\n\nPath for main noun (the thing you‚Äôre acting on)\nQuery/body for arguments\nCookies/header for metadata, auth, etc"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#types-of-inputs",
    "href": "slides/plumber/plumber-input.html#types-of-inputs",
    "title": "Web APIs with R Book Club",
    "section": "Types of inputs",
    "text": "Types of inputs\nHow will your API be used?\n\nDirectly in browser (Are you sure?)\n\nGET\nQuery for things user decides\nCookies for state, etc\n\nMostly programmatic (including from Shiny, etc)\n\nPOST, PUT, PATCH, DELETE\nBody for things related to this specific request\nHeader for things that aren‚Äôt function arguments\nPossibly cookies for state still"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#api-function-arguments",
    "href": "slides/plumber/plumber-input.html#api-function-arguments",
    "title": "Web APIs with R Book Club",
    "section": "API function arguments",
    "text": "API function arguments\n\nCan expect named arguments, BUT\nBetter: Accept req (request object)\nSpecify priority (or only accept certain ones)\n\nGood documentation MUCH better than flexibility!\nBy default: argsQuery &gt; argsPath &gt; argsBody\n\n\n\nfunction(req) {\n  x &lt;- req$argsPath$x %||% req$argsBody$x %||% req$argsQuery$x %||% \n    req$cookies$x %||% req$HTTP_X\n}"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#parameter-types",
    "href": "slides/plumber/plumber-input.html#parameter-types",
    "title": "Web APIs with R Book Club",
    "section": "Parameter types",
    "text": "Parameter types\n\nOptionally specify type (~class) in API definition\n\n@param x:int (more details later)\n\nEnclose in [] to allow length &gt; 1 (array)\n\n@param x:[int]"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#parameter-types-table",
    "href": "slides/plumber/plumber-input.html#parameter-types-table",
    "title": "Web APIs with R Book Club",
    "section": "Parameter types table",
    "text": "Parameter types table\n\n\n\ntype\nR class\nin\n\n\n\n\n‚Äúboolean‚Äù\nlogical\nquery, path\n\n\n‚Äúnumber‚Äù\nnumeric\nquery, path\n\n\n‚Äúinteger‚Äù\ninteger\nquery, path\n\n\n‚Äústring‚Äù\ncharacter\nquery, path\n\n\n‚Äúobject‚Äù\nlist\nbody\n\n\n‚Äúfile‚Äù\nraw\nbody\n\n\n\n\nAll of these have other aliases (eg int for integer)\nStick with these for smooth experience"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#path-parameters",
    "href": "slides/plumber/plumber-input.html#path-parameters",
    "title": "Web APIs with R Book Club",
    "section": "Path parameters",
    "text": "Path parameters\n\n#* @get /users/&lt;id&gt;\nfunction(id) {...} # better: use req$argsPath$id\n\nOptional: only route certain types\n\n#* @get /users/&lt;id:int&gt;\nfunction(id) {...} # better: use req$argsPath$id\n\n{plumber} casts typed path input"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#query-parameters",
    "href": "slides/plumber/plumber-input.html#query-parameters",
    "title": "Web APIs with R Book Club",
    "section": "Query parameters",
    "text": "Query parameters\nhttps://example.com/api/repeat?letter=x&number=1\n\n#* @get repeat\n#* @param letter:string The letter.\n#* @param number:integer The number of times to repeat it.\n\n{plumber} does not cast query input!"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#request-bodies",
    "href": "slides/plumber/plumber-input.html#request-bodies",
    "title": "Web APIs with R Book Club",
    "section": "Request bodies",
    "text": "Request bodies\n\nreq$body ‚âà req$bodyArgs\n\nbody sometimes has raw value + parsed, other details\n\nParsers can prepare body\n\nSpecify as #* @parser PARSER (json, csv, rds, etc)\nArgs in list: #* @parser json list(simplifyVector = FALSE)\n\n\n\n#* @param df:object The input data.frame. Must contain columns \"first_name\" \n#*        and \"city\".\n#* @parser feather list(col_select = c(\"first_name\", \"city\"))"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#stabilizing-input",
    "href": "slides/plumber/plumber-input.html#stabilizing-input",
    "title": "Web APIs with R Book Club",
    "section": "Stabilizing input",
    "text": "Stabilizing input\nTODO: {stbl} package introduction once it‚Äôs stable.\nTODO: Also talk about DoS avoidance (input limits) + Sanitation"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#http-headers",
    "href": "slides/plumber/plumber-input.html#http-headers",
    "title": "Web APIs with R Book Club",
    "section": "HTTP headers",
    "text": "HTTP headers\nHeaders are processed and included in req object:\n\n- replaced with _\nUPPERCASE\nHTTP_ prefix\n\nX-custom-header ‚Üí req$HTTP_X_CUSTOM_HEADER"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#inputs-in-cookies",
    "href": "slides/plumber/plumber-input.html#inputs-in-cookies",
    "title": "Web APIs with R Book Club",
    "section": "Inputs in Cookies",
    "text": "Inputs in Cookies\n\nreq$cookies = named list of (unencrypted) cookies\nreq$session = named list from encrypted cookies\n\nMuch more info when we save cookies"
  },
  {
    "objectID": "slides/plumber/plumber-input.html#remember-filters",
    "href": "slides/plumber/plumber-input.html#remember-filters",
    "title": "Web APIs with R Book Club",
    "section": "Remember filters",
    "text": "Remember filters\nTODO: Add slide about dealing with things that aren‚Äôt specific to a given function via filters (eg, for auth)."
  },
  {
    "objectID": "slides/plumber/plumber-input.html#meeting-videos",
    "href": "slides/plumber/plumber-input.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#plumber-quickstart",
    "href": "slides/plumber/plumber-intro.html#plumber-quickstart",
    "title": "Web APIs with R Book Club",
    "section": "plumber quickstart",
    "text": "plumber quickstart\n\nDefine API endpoints in an R script.\nLaunch that API locally.\nLater chapter(s): Deploy that API somewhere else."
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#echo-endpoint-function",
    "href": "slides/plumber/plumber-intro.html#echo-endpoint-function",
    "title": "Web APIs with R Book Club",
    "section": "echo endpoint: function",
    "text": "echo endpoint: function\n\necho &lt;- function(msg = \"\") {\n  list(msg = paste0(\"The message is: '\", msg, \"'\"))\n}\n\necho(\"my message\")\n\n#&gt; $msg\n#&gt; [1] \"The message is: 'my message'\""
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#echo-endpoint-plumber",
    "href": "slides/plumber/plumber-intro.html#echo-endpoint-plumber",
    "title": "Web APIs with R Book Club",
    "section": "echo endpoint: plumber",
    "text": "echo endpoint: plumber\n\n#* Echo back the input parameter\n#* @param msg The message to echo back.\n#* @get /echo\nfunction(msg = \"\") {\n  list(msg = paste0(\"The message is: '\", msg, \"'\"))\n}"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#echo-endpoint-plumber-alternate",
    "href": "slides/plumber/plumber-intro.html#echo-endpoint-plumber-alternate",
    "title": "Web APIs with R Book Club",
    "section": "echo endpoint: plumber (alternate)",
    "text": "echo endpoint: plumber (alternate)\n\n#* Echo back the input parameter\n#* @param msg The message to echo back.\n#* @get /echo\necho &lt;- function(msg = \"\") {\n  list(msg = paste0(\"The message is: '\", msg, \"'\"))\n}\n\nor\n\n#* Echo back the input parameter\n#* @param msg The message to echo back.\n#* @get /echo\necho # Defined elsewhere"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#echo-endpoint-in-action",
    "href": "slides/plumber/plumber-intro.html#echo-endpoint-in-action",
    "title": "Web APIs with R Book Club",
    "section": "echo endpoint in action",
    "text": "echo endpoint in action"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#plot-endpoint",
    "href": "slides/plumber/plumber-intro.html#plot-endpoint",
    "title": "Web APIs with R Book Club",
    "section": "plot endpoint",
    "text": "plot endpoint\n\n#* Plot out data from the iris dataset\n#* @param spec If provided, filter the data to only this species (e.g. 'setosa')\n#* @get /plot\n#* @serializer png\nfunction(spec) {\n  myData &lt;- iris\n  title &lt;- \"All Species\"\n\n  # Filter if the species was specified\n  if (!missing(spec)){\n    title &lt;- paste0(\"Only the '\", spec, \"' Species\")\n    myData &lt;- subset(iris, Species == spec)\n  }\n\n  plot(myData$Sepal.Length, myData$Petal.Length,\n       main=title, xlab=\"Sepal Length\", ylab=\"Petal Length\")\n}"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#plot-endpoint-in-action",
    "href": "slides/plumber/plumber-intro.html#plot-endpoint-in-action",
    "title": "Web APIs with R Book Club",
    "section": "plot endpoint in action",
    "text": "plot endpoint in action"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#launch-the-api",
    "href": "slides/plumber/plumber-intro.html#launch-the-api",
    "title": "Web APIs with R Book Club",
    "section": "Launch the API",
    "text": "Launch the API\n\napi &lt;- pr(\"plumber.R\")\napi &lt;- pr() |&gt; pr_post({definition}) |&gt; etc()\napi &lt;- plumb(dir = \"path/to/definition\")\n\nLooks for entrypoint.R, else plumber.R\n\n\nIn any case: pr_run(api) to run locally."
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#organize-plumber-projects",
    "href": "slides/plumber/plumber-intro.html#organize-plumber-projects",
    "title": "Web APIs with R Book Club",
    "section": "Organize plumber projects",
    "text": "Organize plumber projects\n\nNon-Package:\n\nplumber.R = ‚Äúmain‚Äù file\n\nCan source() any other files, but\n#* defs must be in main file\n\nAlternative: entrypoint.R file to construct api programmatically\n\nPackage:\n\ninst/plumber/{API_DIR_NAME}/plumber.R\n\nSame rules as above, but filenames matter more\nLeast surprise = use entrypoint.R\n\nplumb_api(package = \"{pkg}\", name = \"{API_DIR_NAME}\")\navailable_apis(package = \"{pkg}\")"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#nest-plumber-apis",
    "href": "slides/plumber/plumber-intro.html#nest-plumber-apis",
    "title": "Web APIs with R Book Club",
    "section": "Nest plumber APIs",
    "text": "Nest plumber APIs\n\n# Define in entrypoint.R\n\nusers &lt;- pr(\"users.R\")\nproducts &lt;- pr(\"products.R\")\n\npr |&gt; \n  pr_mount(\"/users\", users) |&gt; \n  pr_mount(\"/products\", products)"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#design-a-restful-api",
    "href": "slides/plumber/plumber-intro.html#design-a-restful-api",
    "title": "Web APIs with R Book Club",
    "section": "Design a RESTful API",
    "text": "Design a RESTful API\n\nEndpoints = nouns\n\nSubpaths = particular individual\n\n/tasks = all tasks, vs\n/tasks/1234 = task ID 1234\n\n\nMethods define action\n\nGET = fetch\nPOST = create\nPUT = replace\nPATCH = modify\nDELETE = remove"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#more-on-designing-apis",
    "href": "slides/plumber/plumber-intro.html#more-on-designing-apis",
    "title": "Web APIs with R Book Club",
    "section": "More on designing APIs",
    "text": "More on designing APIs\n\nMany books on just this\n\nDesigning APIs with Swagger and OpenAPI by Joshua S. Ponelat & Lukas L. Rosenstock\n(more suggestions to come)"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#implementing-apis-in-plumber",
    "href": "slides/plumber/plumber-intro.html#implementing-apis-in-plumber",
    "title": "Web APIs with R Book Club",
    "section": "Implementing APIs in plumber",
    "text": "Implementing APIs in plumber\n\nGenerally think of each method as a separate thing\n#* @get /tasks totally separate block from #* @post /tasks\nCan put multiple @methods in 1 block\n\nFunction can use req$REQUEST_METHOD for routing\n\nRemember pr_mount() for nested APIs!"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#process-requests-with-filters",
    "href": "slides/plumber/plumber-intro.html#process-requests-with-filters",
    "title": "Web APIs with R Book Club",
    "section": "Process requests with filters",
    "text": "Process requests with filters\n\nFilter process before endpoints\n#* @filter FILTER_NAME\nDo one of 3 things at end:\n\nForward control to next handler\nReturn a response itself without forwarding to endpoint\nThrow an error\n\nInputs = req (the request object), res (the response object)\n\nMore on these in next chapter"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#modify-apis-with-hooks",
    "href": "slides/plumber/plumber-intro.html#modify-apis-with-hooks",
    "title": "Web APIs with R Book Club",
    "section": "Modify APIs with hooks",
    "text": "Modify APIs with hooks\n\nExecute code at points in request lifecycle\n\npreroute(data, req, res)\npostroute(data, req, res, value)\npreserialize(data, req, res, value)\npostserialize(data, req, res, value)\n\npr_hook() for 1, pr_hooks() for multiple\nUse for: logging, open/close DB connection, debugging"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#debug-a-plumber-api",
    "href": "slides/plumber/plumber-intro.html#debug-a-plumber-api",
    "title": "Web APIs with R Book Club",
    "section": "Debug a plumber API",
    "text": "Debug a plumber API\n\nprint(), cat(), cli::cli_inform() in code to throw info to console\nUse hooks to log things along the path\nbrowser() in API functions will throw RStudio into debugger\npr_set_debug() is on by default when interactive"
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#meeting-videos",
    "href": "slides/plumber/plumber-intro.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#plumbers-default-error-handling",
    "href": "slides/plumber/plumber-errors.html#plumbers-default-error-handling",
    "title": "Web APIs with R Book Club",
    "section": "Plumber‚Äôs default error handling",
    "text": "Plumber‚Äôs default error handling\n\n#* @get /simple\nfunction(){\n  stop(\"I'm an error!\")\n}\n\n#&gt; {\"error\":[\"500 - Internal server error\"],\"message\":[\"Error in (function () : \n#&gt; I'm an error!\\n\"]}\n\n\nHTTP status code 500 for all errors\nError sent to client\nError also printed in terminal"
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#custom-error-handling-basics",
    "href": "slides/plumber/plumber-errors.html#custom-error-handling-basics",
    "title": "Web APIs with R Book Club",
    "section": "Custom error handling: basics",
    "text": "Custom error handling: basics\n\nmy_error_handler &lt;- function(req, res, err) {\n  res$status &lt;- 500 # Or something else, see below.\n  \n  # Do something server-side (logs)\n  print(err)\n  \n  # Return an error JSON object.\n  list(error = \"An error occurred. Please contact your administrator.\")\n}\n\npr(\"plumber.R\") |&gt; \n  pr_set_error(my_error_handler) |&gt; \n  pr_run()"
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#logging-strategies",
    "href": "slides/plumber/plumber-errors.html#logging-strategies",
    "title": "Web APIs with R Book Club",
    "section": "Logging strategies",
    "text": "Logging strategies\n\nprint() for function output\ncat() for messages\ncli::cli_inform() for formatted messages\n{log4r} package for neater logs\nSee DevOps for Data Science: Logging and Monitoring for more"
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#error-responses",
    "href": "slides/plumber/plumber-errors.html#error-responses",
    "title": "Web APIs with R Book Club",
    "section": "Error responses",
    "text": "Error responses\nAPI errors are still responses\n\nStatus code specifies broad error category (see next slide)\n\n400 to 499 = Client errors (user did something wrong)\n500 to 599 = Server errors (something is broken)\nReminder: By default, {plumber} uses 500\n\nBest practice: Error format same as successful response\n\nBe careful about this, don‚Äôt make silent errors easy!\n\nNeed plumber::pr_handle() family for advanced options"
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#http-error-status-codes",
    "href": "slides/plumber/plumber-errors.html#http-error-status-codes",
    "title": "Web APIs with R Book Club",
    "section": "HTTP error status codes",
    "text": "HTTP error status codes\n\n\n\ncode\ntitle\nusage\n\n\n\n\n400\nBad Request\nMissing or bad argument, etc\n\n\n401\nUnauthorized\nNo or invalid authentication\n\n\n403\nForbidden\nKnown user can‚Äôt do that\n\n\n404\nNot Found\npath arg doesn‚Äôt exist\n\n\n502\nBad Gateway\nYour api hits another api, got error\n\n\n504\nGateway Timeout\nYour api hits another api, timed out\n\n\n500\nInternal Server Error\nCatch-all for other errors\n\n\n\nSee MDN HTTP response status codes for more options and further details"
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#error-descriptions-in-plumber-block",
    "href": "slides/plumber/plumber-errors.html#error-descriptions-in-plumber-block",
    "title": "Web APIs with R Book Club",
    "section": "Error descriptions in plumber block",
    "text": "Error descriptions in plumber block\n\n#* @response 400 Bad request. This usually occurs because of a missing or \n#*   malformed parameter.\n#* @response 401 Unauthorized. A valid API token was not provided.\n#* @response 403 Forbidden. This user cannot access that file.\n\n\n@response Status Code Description\nCan only give description (not object details)\nThis is a promise, but isn‚Äôt validated by {plumber}"
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#recommended-error_handler",
    "href": "slides/plumber/plumber-errors.html#recommended-error_handler",
    "title": "Web APIs with R Book Club",
    "section": "Recommended error_handler",
    "text": "Recommended error_handler\n\n# TODO: Finish working this out!\nerror_handler &lt;- function(req, res, err) {\n  res$status &lt;- attr(err, \"status_code\") %||% 500L\n  \n  # TODO: Better understanding of log4r or another option.\n  do_the_log_thing(err)\n\n  # Skip serialization to always return JSON  \n  res$headers &lt;- list(\"Content-type\" = \"application/json\")\n  res$body &lt;- jsonlite::toJSON(unclass(err))\n  return(res) \n}"
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#programmatic-responses",
    "href": "slides/plumber/plumber-errors.html#programmatic-responses",
    "title": "Web APIs with R Book Club",
    "section": "Programmatic responses",
    "text": "Programmatic responses\nTODO: Adapt/finish this slide. And probably add one more about the internal error handling in plumber.R.\n\nCan specify full OpenAPI Response Object programmatically\nImpacts auto-generated Swagger documentation\nNot well documented (outside of this book)\n\n\npr_get(\n  \"/pathToEndpoint\", function(res, req) { ... },\n  responses = list(\n    \"403\" = list(\n      description = \"Forbidden\",\n      content = list(\"application/json\" = list())\n    )\n  )\n)"
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#meeting-videos",
    "href": "slides/plumber/plumber-errors.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/httr2/rvest.html#do-i-need-to-scrape-this-data",
    "href": "slides/httr2/rvest.html#do-i-need-to-scrape-this-data",
    "title": "Scrape data from web pages",
    "section": "Do I need to scrape this data?",
    "text": "Do I need to scrape this data?\n\nTry {datapasta} üì¶\n\nRStudio Addins\n\nIf it‚Äôs one time & over-complicated, consider other copy/paste strategies\nOnly scrape what you need\nLook for an API!\n\n\n\nEven consider manual copy/paste one field at a time if it‚Äôs not a TON of data.\nWe‚Äôll see one place to look for an API on the next slide.\nMore on looking for APIs in chapter 9 ‚ÄúFind APIs‚Äù",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#can-i-legally-scrape-this-data",
    "href": "slides/httr2/rvest.html#can-i-legally-scrape-this-data",
    "title": "Scrape data from web pages",
    "section": "Can I legally scrape this data?",
    "text": "Can I legally scrape this data?\n\n‚úÖ Personal use or nonprofit education usually ok\n‚ö†Ô∏è Personally Identifiable Information (PII)\n‚ö†Ô∏è Legal disclaimers (but may be over-protective)\nUSA:\n\nCan‚Äôt copyright facts,\nCAN copyright collections of facts in some cases (creative)\nTidyTuesday 2023-08-29: Fair Use\n\nOther places:\n\nSometimes stricter (EU)\nSometimes more lax\n\n\n\n\nIf it‚Äôs important, consult a lawyer.\nPII: Or even user-generated information in some cases\nThis is why recipe blogs have stories about the recipes.\nThat TidyTuesday dataset exists because I was writing these notes.\nEU provides more protections for database creators and for user-generated data",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#should-i-scrape-this-data",
    "href": "slides/httr2/rvest.html#should-i-scrape-this-data",
    "title": "Scrape data from web pages",
    "section": "Should I scrape this data?",
    "text": "Should I scrape this data?\nrobots.txt: github, wikipedia\n\nUser-agent: * = everybody\nSearch for name(s) of package(s)\nSearch for specific pages\nCheck root of site (/) and your particular subfolder\nThese aren‚Äôt (necessarily) legally binding\n{robotstxt} üì¶ for parsing robots.txt\n\n\n\nNo official standards, but certain things are common.\nBoth examples point to the API. This is the right way to write a robots.txt!\nrobots.txt might be OVER protective, but watch for notes on how to use it\nDon‚Äôt hit a site you like a billion times in fast succession, you could ‚Äúuse up‚Äù their monthly bandwidth, for example\nYour actions COULD cost them money, so don‚Äôt be a jerk!\nWe‚Äôll see the {polite} package shortly, which wraps {robotstxt}",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#three-steps-of-web-scraping",
    "href": "slides/httr2/rvest.html#three-steps-of-web-scraping",
    "title": "Scrape data from web pages",
    "section": "Three steps of web scraping",
    "text": "Three steps of web scraping\n\nLoad the page.\nFind the object(s) you want.\nExtract text into R object(s).\n\n\n\nPages come in as text, regardless of what they contain.\n\nSome text might point to an image‚Äôs URL, but the page is just text.\n\nMaybe you want a specific table, or specific blocks of information (like a list of products).\nAgain, even if you‚Äôre getting numbers, they‚Äôre text until you say otherwise.\n(put this bullet later): Can use {readr} to parse_*() data (or {stbl} or probably others)",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#load-the-page",
    "href": "slides/httr2/rvest.html#load-the-page",
    "title": "Scrape data from web pages",
    "section": "Load the page",
    "text": "Load the page\n\nrvest::read_html(\n    x,                                    # Usually URL\n    encoding = \"\",                        # Assumes UTF-8, specify if garbled\n    ...,                                  # Never used as far as I can find\n    options= c(                           # Options for `libxml2` parsers\n      \"RECOVER\", \"NOERROR\", \"NOBLANKS\"\n    )\n)\n\n\n\nYou‚Äôll almost always just send a URL to this function, but it CAN be HTML as text, or a file, or several other things.\nI don‚Äôt think I‚Äôve ever used any options other than defaults.",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#find-the-object",
    "href": "slides/httr2/rvest.html#find-the-object",
    "title": "Scrape data from web pages",
    "section": "Find the object",
    "text": "Find the object\n\nHTML = HyperText Markup Language\nTags as &lt;tagname attribute=\"a\"&gt;contents&lt;/tagname&gt;\nrvest::html_element() output same length as input\nrvest::html_elements() flattens things\nCan use ‚ÄúCSS selectors‚Äù or ‚ÄúXPath expressions‚Äù\n\nWe‚Äôll focus on CSS selectors\n\n\n\n\nI often forget the difference between html_element() and html_elements()\n\nVERY rough rule of thumb: html_elements() once, then html_element to get things inside of those elements.\n\nCSS selectors and XPath expressions can each be their own book\n\nW3 schools tutorials are helpful!\nCSS diner for CSS selectors",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#extract-text",
    "href": "slides/httr2/rvest.html#extract-text",
    "title": "Scrape data from web pages",
    "section": "Extract text",
    "text": "Extract text\n\nTODO: WORKING HERE\nhtml_text() vs html_text2()\nreadr::parse_*(), {stbl}?, others?",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#example-1-all-tables-on-page",
    "href": "slides/httr2/rvest.html#example-1-all-tables-on-page",
    "title": "Scrape data from web pages",
    "section": "Example 1: All tables on page",
    "text": "Example 1: All tables on page\n\n\n\nThe W3 Schools page about HTML Tables\n\n\n\n\nI‚Äôll host examples for everything in this chapter in the final book, so I have control over them.\nNotice that the first row is headers in this case.\nOn the page, scroll down to ‚ÄúHTML Table Tags‚Äù for another example of a table.",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#scraping-tables-1",
    "href": "slides/httr2/rvest.html#scraping-tables-1",
    "title": "Scrape data from web pages",
    "section": "Scraping tables",
    "text": "Scraping tables\n\nrvest::html_table(\n    x,                  # A page loaded \n    header = NA,\n    trim = TRUE,\n    dec = \".\",\n    na.strings = \"NA\",\n    convert = TRUE\n)",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#example-2-choose-a-specific-table",
    "href": "slides/httr2/rvest.html#example-2-choose-a-specific-table",
    "title": "Scrape data from web pages",
    "section": "Example 2: Choose a specific table",
    "text": "Example 2: Choose a specific table\n(screenshot of tables on page)\n\n\nTidyTuesday README has two tables, even though it isn‚Äôt necessarily obvious (first is the ‚Äúmain‚Äù GH content)",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#choosing-a-table",
    "href": "slides/httr2/rvest.html#choosing-a-table",
    "title": "Scrape data from web pages",
    "section": "Choosing a table",
    "text": "Choosing a table\n(code demo of scraping one of many tables)",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#scraping-multiple-tables",
    "href": "slides/httr2/rvest.html#scraping-multiple-tables",
    "title": "Scrape data from web pages",
    "section": "Scraping multiple tables",
    "text": "Scraping multiple tables\n(purrr)",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#example-3-non-tabular-data",
    "href": "slides/httr2/rvest.html#example-3-non-tabular-data",
    "title": "Scrape data from web pages",
    "section": "Example 3: Non-tabular data",
    "text": "Example 3: Non-tabular data\n(screenshot of page with non-tabular data, possibly CSS selector rules)",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#using-selectorgadget",
    "href": "slides/httr2/rvest.html#using-selectorgadget",
    "title": "Scrape data from web pages",
    "section": "Using SelectorGadget",
    "text": "Using SelectorGadget\n(record clicks? also show code where it goes)",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#using-css-selectors",
    "href": "slides/httr2/rvest.html#using-css-selectors",
    "title": "Scrape data from web pages",
    "section": "Using CSS selectors",
    "text": "Using CSS selectors",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#example-4-login",
    "href": "slides/httr2/rvest.html#example-4-login",
    "title": "Scrape data from web pages",
    "section": "Example 4: Login",
    "text": "Example 4: Login",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#scraping-data-behind-a-login",
    "href": "slides/httr2/rvest.html#scraping-data-behind-a-login",
    "title": "Scrape data from web pages",
    "section": "Scraping data behind a login",
    "text": "Scraping data behind a login",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#example-5-dynamic-data",
    "href": "slides/httr2/rvest.html#example-5-dynamic-data",
    "title": "Scrape data from web pages",
    "section": "Example 5: Dynamic data",
    "text": "Example 5: Dynamic data",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#scraping-data-that-requires-interaction",
    "href": "slides/httr2/rvest.html#scraping-data-that-requires-interaction",
    "title": "Scrape data from web pages",
    "section": "Scraping data that requires interaction",
    "text": "Scraping data that requires interaction\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Get more data",
      "Scrape data from web pages"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#graphql",
    "href": "slides/httr2/accessing-other.html#graphql",
    "title": "Communicate with other types of APIs",
    "section": "GraphQL",
    "text": "GraphQL\n\nCurrent landscape feels like ‚ÄúI use GraphQL in other languages, and want it to technically be possible to do so from R.‚Äù\nQueries: ghql\n\nDemo on next slide\n\nServer side: gqlr (more in later chapter)",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#graphql-setup",
    "href": "slides/httr2/accessing-other.html#graphql-setup",
    "title": "Communicate with other types of APIs",
    "section": "GraphQL setup",
    "text": "GraphQL setup\n\nghql_con &lt;- GraphqlClient$new(\n  url = \"https://api.github.com/graphql\",\n  headers = list(Authorization = paste0(\"Bearer \", Sys.getenv(\"GITHUB_PAT\")))\n)\nghql_con$load_schema()\nqry &lt;- Query$new()",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#graphql-query",
    "href": "slides/httr2/accessing-other.html#graphql-query",
    "title": "Communicate with other types of APIs",
    "section": "GraphQL query",
    "text": "GraphQL query\n\nqry$query('mydata', '{\n  repositoryOwner(login:\"jonthegeek\") {\n    repositories(first: 5, orderBy: {field:PUSHED_AT,direction:DESC}, isFork:false) {\n      edges {\n        node {\n          name\n          stargazers {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n}')",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#graphql-response",
    "href": "slides/httr2/accessing-other.html#graphql-response",
    "title": "Communicate with other types of APIs",
    "section": "GraphQL response",
    "text": "GraphQL response\n\nx &lt;- ghql_con$exec(qry$queries$mydata) # We created a query named \"mydata\"\njsonlite::fromJSON(x)\n#&gt; $data\n#&gt; $data$repositoryOwner\n#&gt; $data$repositoryOwner$repositories\n#&gt; $data$repositoryOwner$repositories$edges\n#&gt;                   node.name node.totalCount\n#&gt; 1                     wapir              17\n#&gt; 2                    zoomer               3\n#&gt; 3                rstats.fyi               0\n#&gt; 4                 tidyslack               0\n#&gt; 5 jonthegeek.r-universe.dev               0",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-review",
    "href": "slides/httr2/accessing-other.html#websocket-review",
    "title": "Communicate with other types of APIs",
    "section": "websocket review",
    "text": "websocket review\n\nAlternative to HTTP\nws:// or wss://\n2-way communication\n{websocket} package",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#aside-shiny-websockets",
    "href": "slides/httr2/accessing-other.html#aside-shiny-websockets",
    "title": "Communicate with other types of APIs",
    "section": "Aside: shiny & websockets",
    "text": "Aside: shiny & websockets\n\nYou might see websocket-related errors in Shiny\nShiny UI & server communicate via a websocket connection\nMore directly managed via {httpuv} & TypeScript code\nBeyond the scope of this book",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-demo-setup",
    "href": "slides/httr2/accessing-other.html#websocket-demo-setup",
    "title": "Communicate with other types of APIs",
    "section": "websocket demo: setup",
    "text": "websocket demo: setup\n\nws &lt;- WebSocket$new(\"ws://echo.websocket.events/\", autoConnect = FALSE)\nws$onMessage(\\(event) {\n  now &lt;- format(Sys.time(), digits = 0)\n  cat(\"Client got msg:\", event$data, \"at\", now, \"\\n\")\n})",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-demo",
    "href": "slides/httr2/accessing-other.html#websocket-demo",
    "title": "Communicate with other types of APIs",
    "section": "websocket demo",
    "text": "websocket demo\n\nws$connect()\n#&gt; Client got msg: echo.websocket.events sponsored by Lob.com at 2023-11-15 2023-11-15 08:28:04\n# (can do other things in console now)\n1\n#&gt; [1] 1\nws$send(\"hello\")\n#&gt; Client got msg: hello at 2023-11-15 08:28:10\nws$close()",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-toward-usefulness",
    "href": "slides/httr2/accessing-other.html#websocket-toward-usefulness",
    "title": "Communicate with other types of APIs",
    "section": "websocket: toward usefulness",
    "text": "websocket: toward usefulness\n\nws_counter &lt;- 1\nws2 &lt;- WebSocket$new(\"ws://echo.websocket.events/\", autoConnect = FALSE)\nws2$onMessage(\\(event) {\n  ws_counter &lt;&lt;- ws_counter + 1 # Add 1 to global ws_counter var \n  cat(ws_counter, \"\\n\")\n})\nws_counter\n#&gt; 1\nws2$connect()\n#&gt; 2\nws2$send(\"update\")\n#&gt; 3\nws2$send(\"update again\")\n#&gt; 4\nws2$close()",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-usecases",
    "href": "slides/httr2/accessing-other.html#websocket-usecases",
    "title": "Communicate with other types of APIs",
    "section": "websocket usecases",
    "text": "websocket usecases\n\nNews/Message feeds\n\nDisplay new content as it comes in\n\nMessaging\n\nSend and receive ~simultaneously without new connections\n\nMulti-player games\nCollaborative editing\nReal-time dashboards",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#grpc-review",
    "href": "slides/httr2/accessing-other.html#grpc-review",
    "title": "Communicate with other types of APIs",
    "section": "gRPC review",
    "text": "gRPC review\n\nGoogle Remote Procedure Call\nBecoming very popular\nGood for real-time, 2-way communication\nUses HTTP/2 (more socket-like)",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#grpc-what-is-it-really",
    "href": "slides/httr2/accessing-other.html#grpc-what-is-it-really",
    "title": "Communicate with other types of APIs",
    "section": "gRPC: What is it really?",
    "text": "gRPC: What is it really?\n\nHTTP/2 (upgraded HTTP)\n\nCan access via {httr2}\n\n‚ÄúProtocol buffers‚Äù datatype\n\nFully implemented in {RProtoBuf} package\n{protolite} for basics",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#grpc-demo",
    "href": "slides/httr2/accessing-other.html#grpc-demo",
    "title": "Communicate with other types of APIs",
    "section": "gRPC demo",
    "text": "gRPC demo\nFrom RProtoBuf paper\n\nresp &lt;- request(\"https://demo.ocpu.io/MASS/data/Animals/pb\") |&gt; \n  req_perform()\noutput &lt;- resp_body_raw(resp) |&gt; \n  unserialize_pb() # This is the important part\nidentical(output, MASS::Animals)\n#&gt; [1] TRUE\nhead(output)\n#&gt;                     body brain\n#&gt; Mountain beaver     1.35   8.1\n#&gt; Cow               465.00 423.0\n#&gt; Grey wolf          36.33 119.5\n#&gt; Goat               27.66 115.0\n#&gt; Guinea pig          1.04   5.5\n#&gt; Dipliodocus     11700.00  50.0",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#grpc-demo2-r-via-api",
    "href": "slides/httr2/accessing-other.html#grpc-demo2-r-via-api",
    "title": "Communicate with other types of APIs",
    "section": "gRPC demo2: R via API",
    "text": "gRPC demo2: R via API\n\nargs &lt;- list(n = 5, mean = 100)\npayload &lt;- serialize_pb(args, connection = NULL)\nresp &lt;- request(\"https://cloud.opencpu.org/ocpu/library\") |&gt; \n  req_url_path_append(\"stats\", \"R\", \"rnorm\", \"pb\") |&gt; \n  req_body_raw(payload, type = \"application/protobuf\") |&gt;\n  req_perform()\n\nresp_body_raw(resp) |&gt; \n  unserialize_pb()\n#&gt; [1] 102.61489 101.70467  99.12647  99.85958 100.47736",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#meeting-videos",
    "href": "slides/httr2/accessing-other.html#meeting-videos",
    "title": "Communicate with other types of APIs",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Do more with APIs",
      "Communicate with other types of APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#what-is-a-user-agent",
    "href": "slides/httr2/httr2-authentication.html#what-is-a-user-agent",
    "title": "Tell APIs who you are",
    "section": "What is a user agent?",
    "text": "What is a user agent?\n\n‚ÄúUser agent‚Äù = software that accesses the web\nUser-Agent request header = string IDing the ‚Äúuser agent‚Äù\n\nRequest header = extra info sent with request\n\n{httr2} attaches a default User-Agent header\n\n\n\nhttr2::request(\"https://example.com\") |&gt; httr2::req_dry_run()\n#&gt; GET / HTTP/1.1\n#&gt; Host: example.com\n#&gt; User-Agent: httr2/1.0.1 r-curl/5.2.1 libcurl/8.3.0\n#&gt; Accept: */*\n#&gt; Accept-Encoding: deflate, gzip\n\n\n\n\nIt‚Äôs arguable whether your code is the user agent or httr2 is.\nHeaders are the things at the top of a request, outside the request itself\n\nUsually what you‚Äôre expecting back + user agent",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#should-i-override-the-default-user-agent",
    "href": "slides/httr2/httr2-authentication.html#should-i-override-the-default-user-agent",
    "title": "Tell APIs who you are",
    "section": "Should I override the default user agent?",
    "text": "Should I override the default user agent?\n\nAre you hitting the API a lot?\nAre you providing reusable code for others to hit the API?\nDoes the API documentation mention it?\n\n\n\nDefault is fine almost all the time\nInclude UA in package (with option for user to expand)\nIf you use your code repeatedly/automatically, provide a UA\nDocumentation might ask for it (like Jim found in api.crossref.org docs)",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#how-do-i-override-the-default-user-agent",
    "href": "slides/httr2/httr2-authentication.html#how-do-i-override-the-default-user-agent",
    "title": "Tell APIs who you are",
    "section": "How do I override the default user agent?",
    "text": "How do I override the default user agent?\nhttr2::req_user_agent(req, string = NULL)\n\nhttr2::request(\"https://example.com\") |&gt; \n  httr2::req_user_agent(\"MyUserAgent/1.0 (more details; separate with ;)\") |&gt; \n  httr2::req_dry_run()\n#&gt; GET / HTTP/1.1\n#&gt; Host: example.com\n#&gt; User-Agent: MyUserAgent/1.0 (more details; separate with ;)\n#&gt; Accept: */*\n#&gt; Accept-Encoding: deflate, gzip\n\n\n\nConvention is Software slash version,\nDetails in parentheses,\nSeparate with ;\nBut can be any string",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#an-experimental-.rprofile-user-agent-function",
    "href": "slides/httr2/httr2-authentication.html#an-experimental-.rprofile-user-agent-function",
    "title": "Tell APIs who you are",
    "section": "An experimental .Rprofile user agent function",
    "text": "An experimental .Rprofile user agent function\n\n.httr2_ua &lt;- function() {\n  # Recreate the default httr2 string.\n  versions &lt;- c(\n    httr2 = as.character(utils::packageVersion(\"httr2\")),\n    `r-curl` = as.character(utils::packageVersion(\"curl\")),\n    libcurl = curl::curl_version()$version\n  )\n  paste0(names(versions), \"/\", versions, collapse = \" \")\n}\n.req_ua &lt;- function(req) {\n  httr2_string &lt;- .httr2_ua()\n  me &lt;- \"Jon Harmon\"\n  url &lt;- \"https://wapir.io\"\n  email &lt;- \"jonthegeek+useragent@gmail.com\"\n  string &lt;- glue::glue(\n    \"{httr2_string} ({me}; {url}; mailto:{email})\"\n  )\n  httr2::req_user_agent(req, string = string)\n}\n\n\n\nusethis::edit_r_profile()\nStart with . so it doesn‚Äôt show in my environment.\nIn general, UA should tell the API how you‚Äôre accessing it\nI‚Äôll likely put a version of this into {nectar} soon.",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#what-is-authentication",
    "href": "slides/httr2/httr2-authentication.html#what-is-authentication",
    "title": "Tell APIs who you are",
    "section": "What is authentication?",
    "text": "What is authentication?\n\nAuthentication: Verifying who you are.\nAuthorization: Granting permissions to do things (based on authentication)\nAuth: Used interchangeably for both\n\n\n\nInternet makes a big deal about this distinction if you Google\nFor users, the difference doesn‚Äôt matter\n\nYou auth with the server so the server will auth you",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#what-are-some-types-of-authentication",
    "href": "slides/httr2/httr2-authentication.html#what-are-some-types-of-authentication",
    "title": "Tell APIs who you are",
    "section": "What are some types of authentication?",
    "text": "What are some types of authentication?\n\nüî¥ HTTP Basic: username + password sent with request\n\n\n¬†¬†¬†¬†¬†¬†¬†¬†üìú deed to your house\n\n\nüü† API Key: password-like thing sent with request\n\n\n¬†¬†¬†¬†¬†¬†¬†¬†üîë key to your house\n\n\nüü° Bearer Token: shorter-lived, limited key\n\n\n¬†¬†¬†¬†¬†¬†¬†¬†üí≥ keycard\n\n\nüü¢ OAuth: multistep process to generate a bearer token\n\n\n¬†¬†¬†¬†¬†¬†¬†¬†üïµÔ∏è background check to issue keycard\n\n\n\nAlmost nobody uses HTTP basic for APIs anymore.\nIf you gave an ex a key to your house, you can change the lock without disrupting your life too much\nName ‚Äúbearer token‚Äù is stupid; anybody can use an API key, too, so the ‚Äúbearer‚Äù part is weird to highlight\nNothing enforces difference between bearer tokens and api keys; it‚Äôs a vocabulary thing, which API makers might screw up\nKeycard can be limited to open certain doors, not open others\nEnd result of OAuth is a bearer token\nThere are other things, but these four cover almost everything.\nOther schemes like api keys in cookies, SSL certs not discussed here",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#api-auth-documentation",
    "href": "slides/httr2/httr2-authentication.html#api-auth-documentation",
    "title": "Tell APIs who you are",
    "section": "API Auth Documentation",
    "text": "API Auth Documentation\n\nSadly, no standard\nOpenFEC\nGoogle Calendar\n\n\n\nUsually either at top of docs or in each relevant endpoint\nSometimes different endpoints have different requirements (particularly OAuth scopes, more below)\n\nThis endpoint only requires read, this one requires read and write\n\nOften docs give the basics, but might not have all details for actually using OAuth in code, for example.",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#openapi-securityschemes",
    "href": "slides/httr2/httr2-authentication.html#openapi-securityschemes",
    "title": "Tell APIs who you are",
    "section": "OpenAPI: securitySchemes",
    "text": "OpenAPI: securitySchemes\nIf you have the APID, use it!\n\ncomponents$securitySchemes = ways to auth\nsecurity (top level) = default schemes\nOpenFEC\nGoogle Calendar\n\n\n\nAPID = API description in OpenAPI format\nOften still necessary to dig through docs for details\nI suspect the 2 ‚ÄúapiKey in query‚Äù schemes for OpenFEC are the default key vs a user-specific key, their way of implementing scopes.",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#practice-safe-git",
    "href": "slides/httr2/httr2-authentication.html#practice-safe-git",
    "title": "Tell APIs who you are",
    "section": "Practice safe git",
    "text": "Practice safe git\n\nRun usethis::git_vaccinate()\nOften usethis::use_git_ignore(\".Renviron\")\n\n\n\ngit_vaccinate() ‚ÄúAdds Rproj.user, .Rhistory, .Rdata, .httr-oauth, .DS_Store, and .quarto to your global (a.k.a. user-level) .gitignore.‚Äù\nhttr2 actually puts auth info in a more-secure, harder-to-check-in place.\nWe‚Äôll often put keys in personal .Renviron, but you might want a project-specific one for special keys.\nEven better: use {keyring} (TODO: Go down this rabbit hole!)",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#use-keyring",
    "href": "slides/httr2/httr2-authentication.html#use-keyring",
    "title": "Tell APIs who you are",
    "section": "Use keyring",
    "text": "Use keyring\n\ninstall.packages(\"keyring\")\nkeyring::key_set(service)\n\nkeyring::key_set(\"FEC_API_KEY\")\n\nkeyring::key_set_with_value(service, password = NULL)\nkeyring::key_get(service)\nMay need to copy keyring to env for packages\n\nSys.setenv(FEC_API_KEY = keyring::key_get(\"FEC_API_KEY\"))\n\n\n\n\n{keyring} works with your operating system‚Äôs key manager\nkey_set() has you enter the key in a secure password window\nkey_set_with_value() useful if a function fetches a key (you never need to see it)\nkey_get() returns that key",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#where-do-i-send-api-keys",
    "href": "slides/httr2/httr2-authentication.html#where-do-i-send-api-keys",
    "title": "Tell APIs who you are",
    "section": "Where do I send API keys?",
    "text": "Where do I send API keys?\n\nin: query\n\nhttr2::req_url_query(.req, ...)\n\nin: header\n\nhttr2::req_headers(.req, ..., .redact = NULL)\n.redact = character vector of headers to hide in print\n\nin: cookie\n\nhttr2::req_headers(.req, Cookie = \"name=val1; name2=val2\", .redact = \"Cookie\")\n\n\n\n\nAPID does a good job of describing where these can go.\nHeader more secure than query, so use that when available\n... = name-value pairs, case-insensitive (but usually just copy-paste from docs).\nCookies are meaningful in the browser, but for your code it‚Äôs easiest just to think of them as a type of header.",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#how-can-i-authenticate-fecapi-requests",
    "href": "slides/httr2/httr2-authentication.html#how-can-i-authenticate-fecapi-requests",
    "title": "Tell APIs who you are",
    "section": "How can I authenticate FECAPI requests?",
    "text": "How can I authenticate FECAPI requests?\nOpenFEC APID\n\n\nrequest(\"https://api.open.fec.gov/v1\") |&gt; \n  req_headers(\"X-Api-Key\" = \"DEMO_KEY\", .redact = \"X-Api-Key\")\n\n\n\n\n#&gt; &lt;httr2_request&gt;\n#&gt; GET https://api.open.fec.gov/v1\n#&gt; Headers:\n#&gt; ‚Ä¢ X-Api-Key: '&lt;REDACTED&gt;'\n#&gt; Body: empty\n\n\n\n\nrequest(\"https://api.open.fec.gov/v1\") |&gt; \n  req_headers(\"X-Api-Key\" = keyring::key_get(\"FEC_API_KEY\"), .redact = \"X-Api-Key\")\n\n\n\n\n#&gt; &lt;httr2_request&gt;\n#&gt; GET https://api.open.fec.gov/v1\n#&gt; Headers:\n#&gt; ‚Ä¢ X-Api-Key: '&lt;REDACTED&gt;'\n#&gt; Body: empty\n\n\n\n\nNotice that the key never prints anywhere in the keyring version\nSys.getenv() is also an option, but then the key is stored in plain text in your .Renviron file.",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#authenticating-with-nectar",
    "href": "slides/httr2/httr2-authentication.html#authenticating-with-nectar",
    "title": "Tell APIs who you are",
    "section": "Authenticating with nectar",
    "text": "Authenticating with nectar\n{nectar} üì¶ translates APID to {httr2}\n\n\nrequest(\"https://api.open.fec.gov/v1\") |&gt; \n  nectar::req_auth_api_key(\n    location = \"header\", \n    parameter_name = \"X-Api-Key\", \n    api_key = Sys.getenv(\"FEC_API_KEY\")\n  )\n\n\n\n\n#&gt; &lt;httr2_request&gt;\n#&gt; GET https://api.open.fec.gov/v1\n#&gt; Headers:\n#&gt; ‚Ä¢ X-Api-Key: '&lt;REDACTED&gt;'\n#&gt; Body: empty\n\n\n\n\nTechnically only PART of the purpose of {nectar}\nAimed primarily at package authors, but I‚Äôm finding more and more use cases\nI‚Äôll recommend it for book helper functions",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-terminology-participants",
    "href": "slides/httr2/httr2-authentication.html#oauth-terminology-participants",
    "title": "Tell APIs who you are",
    "section": "Oauth terminology: Participants",
    "text": "Oauth terminology: Participants\n\n\n\nterm(s)\nmeaning\n\n\n\n\nuser\nthe person who you‚Äôre acting as\n\n\napplication, app\nyour R code\n\n\nclient, oauth application\nyou create this at oauth host\n\n\noauth host\nthe API\n\n\n\n\n\nOauth is complicated! Don‚Äôt feel bad if you‚Äôre confused!\nWe‚Äôll go over the ‚Äúdance‚Äù on an upcoming slide\nThe point of the multiple steps is to make it hard for attacker to intercept, and minimize what they can do if they do\nAlso to allow third parties to act on your behalf; can be confusing, because we‚Äôre both the user and the app!\nBold = what I‚Äôll call it on other pages\nApp could be package, could be website, could be a separate API (‚Äúlogin with Google‚Äù)\nClient has an id and a secret, that‚Äôs how your app logs in\n\nWe‚Äôll talk more about these in a minute\n\nClient also has settings like valid redirect URLs (next slide)",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-terminology-things",
    "href": "slides/httr2/httr2-authentication.html#oauth-terminology-things",
    "title": "Tell APIs who you are",
    "section": "Oauth terminology: Things",
    "text": "Oauth terminology: Things\n\n\n\n\n\n\n\nterm(s)\nmeaning\n\n\n\n\nscope\nstring(s) describing specific capabilities\n\n\nauthorization code\nvery temporary key\n\n\noauth token, token\nthe real key, often with extra info\n\n\n\n\n\nIf app only hits read endpoints, only needs to request read scopes\n\nOr if this user has only asked to read\n\nAuth code can only be sent to specified URLs\nThe ‚Äúreal key‚Äù here is a bearer token.\nToken often includes a ‚Äúrefresh token‚Äù, longer-lived shortcut around the auth process.\n\n‚ÄúThis user already gave me permission, I just need an updated keycard.‚Äù",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-terminology-places",
    "href": "slides/httr2/httr2-authentication.html#oauth-terminology-places",
    "title": "Tell APIs who you are",
    "section": "Oauth terminology: Places",
    "text": "Oauth terminology: Places\n\n\n\n\n\n\n\nterm(s)\nmeaning\n\n\n\n\nauthorization url\nwhere to send initial request\n\n\nredirect url(s)\nwhere host can send auth codes\n\n\ntoken url\nwhere app can exchange auth codes\n\n\n\n\n\nUser is sent to auth url in browser, sees authorization request directly from host\nAuth code can only be sent to redirect URLs\n\nOften will be localhost, where httr2 sets up a web host to listens for a response\nIsn‚Äôt default, but you often need to specify a port for host to accept this as a valid redirect\n\nRequest from app to token url is sent server-to-server, no user/browser in-between. Auth code in header in this case, generally.",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#the-oauth-dance",
    "href": "slides/httr2/httr2-authentication.html#the-oauth-dance",
    "title": "Tell APIs who you are",
    "section": "The OAuth ‚Äúdance‚Äù",
    "text": "The OAuth ‚Äúdance‚Äù\n\nuser to app: Hit this API for me!\n&lt;app sends user to host @ auth url in browser&gt;\nhost to user: Can client act as you with these scopes?\nuser to host: Yes\n&lt;host sends user to app @ redirect url with auth code&gt;\napp directly to host @ token url: Here‚Äôs my client + user‚Äôs auth code\nhost directly to app: Here‚Äôs an oauth token for that user (with the requested permissions)\n\n\nTODO: Image of OAuth dance\n\nThis is sometimes called 3-legged auth\n\nTook me forever to differentiate ‚Äúapp‚Äù from ‚Äúuser‚Äù to make the 3 legs make sense\nHost is at multiple urls but it just counts as one leg\n\nStep 2: App sends client id and permissions as part of that introduction\nNot covered: Then (not much) later app sends bearer token to host with API requests, and host checks that token can do those things.",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-credential-dangers",
    "href": "slides/httr2/httr2-authentication.html#oauth-credential-dangers",
    "title": "Tell APIs who you are",
    "section": "OAuth credential dangers",
    "text": "OAuth credential dangers\n\nüü¢ Client id: Like knowing package name\nüü° Authorization code: Unlikely to be an issue\n\nOnly sent to provided redirect url\nExtremely short lived (often minutes or less)\n\nüü° Refresh token:\n\nThis + client secret for access token\nUsually revoked if you auth from scratch\n\n\n\n\nYellows here are light green, really\nAuth code: Need client secret for it to do anything\nRefresh token: Longer lived, but otherwise similar to auth code",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-credential-dangers-cont",
    "href": "slides/httr2/httr2-authentication.html#oauth-credential-dangers-cont",
    "title": "Tell APIs who you are",
    "section": "OAuth credential dangers (cont)",
    "text": "OAuth credential dangers (cont)\n\nüü° Client secret: Iffy\n\nCan pretend to be you (user still needs to say ok)\nCan your client do anything special?\n\nInstalled (e.g.¬†Slack app)?\nAPI usage limits (e.g.¬†YouTube)?\n\n\nüü† Access token: The thing we‚Äôre protecting\n\nCan do whatever it‚Äôs authorized to do\nUsually easy to revoke\n\nüî¥ Username + password: We don‚Äôt want to know these\n\n\n\nHadley says client secrets aren‚Äôt a big deal, but I disagree in a lot of cases.\nYour auth page at host can be copied, so that‚Äôs not a real concern, but‚Ä¶\nIf localhost is valid redirect, they can trick user to auth as you\nOnly matters if client itself can do something\nYouTube has client limits in addition to user limits",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#configure-your-client",
    "href": "slides/httr2/httr2-authentication.html#configure-your-client",
    "title": "Tell APIs who you are",
    "section": "Configure your client",
    "text": "Configure your client\nConstruct one client object for your code\n\nhttr2::oauth_client(\n  id, \n  token_url, \n  secret = NULL, \n  key = NULL, \n  auth = c(\"body\", \"header\", \"jwt_sig\"), \n  auth_params = list(), \n  name = hash(id)\n)\n\n\n\nid = Client ID\ntoken_url = URL where clients exchange authorization codes for tokens\nsecret = Client secret\nOften auth = \"header\"\nIf this client has multiple uses: name = unique for this use case\n\nDefines where tokens are cached\nEg, Log in once for personal, another time for work (but see cache_key in next function)\n\nI don‚Äôt know yet why we don‚Äôt specify auth_url here (it‚Äôs in a later step)",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-client-demo",
    "href": "slides/httr2/httr2-authentication.html#oauth-client-demo",
    "title": "Tell APIs who you are",
    "section": "OAuth client demo",
    "text": "OAuth client demo\n\nyt_client &lt;- oauth_client(\n  id = Sys.getenv(\"YOUTUBE_CLIENT_ID\"), \n  token_url = \"https://oauth2.googleapis.com/token\",\n  secret = Sys.getenv(\"YOUTUBE_CLIENT_SECRET\")\n)",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#httr2req_oauth_auth_code",
    "href": "slides/httr2/httr2-authentication.html#httr2req_oauth_auth_code",
    "title": "Tell APIs who you are",
    "section": "httr2::req_oauth_auth_code()",
    "text": "httr2::req_oauth_auth_code()\n\nhttr2::req_oauth_auth_code(\n  req,\n  client,\n  auth_url,\n  scope = NULL,\n  pkce = TRUE,\n  auth_params = list(),\n  token_params = list(),\n  redirect_uri = oauth_redirect_uri(),\n  cache_disk = FALSE,\n  cache_key = NULL\n)\n\n\n\nI‚Äôm trying to figure out why auth_url isn‚Äôt wrapped in client\n\nBest guess is there are use cases of same client at different auth urls\nMaybe YouTube does this?\nDev vs production?\n\npkce = ‚ÄúProof key for code exchange‚Äù. Good if API supports it, but I often have to turn it off\nI can‚Äôt think of examples of auth_params or token_params\n\nwould be ~headers required by host\nauth_params sent to auth_url, token_params sent to token_url\n\ncache_disk = Set this TRUE if you can\n\ncache_key = unique name if you‚Äôll use this client for multiple tokens",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-request-demo",
    "href": "slides/httr2/httr2-authentication.html#oauth-request-demo",
    "title": "Tell APIs who you are",
    "section": "Oauth request demo",
    "text": "Oauth request demo\n\nplaylists &lt;- request(\"https://youtube.googleapis.com/youtube/v3\") |&gt; \n  req_url_path_append(\"playlists\") |&gt; \n  req_url_query(part = \"snippet\", mine = TRUE, maxResults = 50) |&gt; \n  req_oauth_auth_code(\n    client = yt_client, \n    auth_url = \"https://accounts.google.com/o/oauth2/v2/auth\",\n    scope = \"https://www.googleapis.com/auth/youtube\",\n    redirect_uri = \"http://127.0.0.1:8888\"\n  ) |&gt; \n  req_perform()",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#automating-oauth",
    "href": "slides/httr2/httr2-authentication.html#automating-oauth",
    "title": "Tell APIs who you are",
    "section": "Automating OAuth",
    "text": "Automating OAuth\n\nIf you can, use httr2 cache: easiest, but\n\nauto-deletes when 30 days old\nfills logs w/ ‚ÄúCaching httr2 token in ‚Ä¶‚Äù messages\n\nhttr2::req_oauth_bearer_jwt() if you have JSON web token (service account)\nhttr2::req_oauth_refresh() if you have a refresh token\n\nhttr2::oauth_flow_auth_code() once to get refresh",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#browser-cookies",
    "href": "slides/httr2/httr2-authentication.html#browser-cookies",
    "title": "Tell APIs who you are",
    "section": "Browser cookies",
    "text": "Browser cookies\nThis will feel hacky because it is hacky.\n\nInstall EditThisCookie browser extension\nUse API in browser\nOpen EditThisCookie extension\nOptions &gt; ‚ÄúChoose the preferred export format for cookies‚Äù &gt; Netscape HTTP Cookie File\nOpen EditThisCookie extension\nExport\nPaste into a file at path\nhttr2::req_cookie_preserve(req, path)\n\n\n\nOr cookie can be used in header",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#meeting-videos",
    "href": "slides/httr2/httr2-authentication.html#meeting-videos",
    "title": "Tell APIs who you are",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Get started",
      "Tell APIs who you are"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#why-paginate",
    "href": "slides/httr2/httr2-pagination.html#why-paginate",
    "title": "Get a lot of data from APIs",
    "section": "Why paginate?",
    "text": "Why paginate?\n\nNetwork traffic is slow & expensive\nBigger transfers ‚û°Ô∏è more corruption chance ‚û°Ô∏è resends\nSo APIs often limit results per call\n1 set of results = 1 page",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#what-are-some-pagination-strategies",
    "href": "slides/httr2/httr2-pagination.html#what-are-some-pagination-strategies",
    "title": "Get a lot of data from APIs",
    "section": "What are some pagination strategies?",
    "text": "What are some pagination strategies?\n\n\n\nOffset: page param\n\nOpenFEC\nCrossref.org\n\nCursor: cursor or token param\n\nCrossref.org ‚Äúdeep paging‚Äù\n\n\n\n\nHeader link: Link: to next in response header\n\nGitHub\nMTG cars\n\nBody link: nextUrl in response body\n\nopen5e.com monsters\n\n\n\n\n\nshared: Most offer perPage or pageSize param",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#how-can-i-determine-how-an-api-handles-pagination",
    "href": "slides/httr2/httr2-pagination.html#how-can-i-determine-how-an-api-handles-pagination",
    "title": "Get a lot of data from APIs",
    "section": "How can I determine how an API handles pagination?",
    "text": "How can I determine how an API handles pagination?\nUnfortunately, no standard.\n\nAlmost always: Mentioned in relevant paths\nOften: Separate ‚Äúpagination‚Äù section near top of docs\nFall-throughs:\n\npage, perPage, cursor parameters\nLook at a response",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#aside-retries-and-api-consumer-etiquette",
    "href": "slides/httr2/httr2-pagination.html#aside-retries-and-api-consumer-etiquette",
    "title": "Get a lot of data from APIs",
    "section": "Aside: Retries and API consumer etiquette",
    "text": "Aside: Retries and API consumer etiquette\n\nPagination ‚û°Ô∏è repeated API calls\nBe nice!\nhttr2::req_retry()\n\nMust set max_tries or max_seconds\nOther options usually ok as-is\n\nMore in ‚ÄúProcess other response types‚Äù\n\n\n\nIf neither max_tries nor max_seconds set, silently ignored\nOther things: req_throttle() limits calls/second, req_timeout() to set a time limit for single big calls",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#req_perform_iterative",
    "href": "slides/httr2/httr2-pagination.html#req_perform_iterative",
    "title": "Get a lot of data from APIs",
    "section": "req_perform_iterative()",
    "text": "req_perform_iterative()\n\n Added in {httr2} 1.0.0.\nReplaces req_perform()\n\n\n\nnormal_request |&gt; \n  req_retry(max_tries = 3) |&gt; # Tries *per page*\n  req_perform_iterative(\n    next_req = function_to_choose_next_req,\n    max_reqs = 20 # Maximum separate page calls\n  )\n\n\n\n‚ÄúIteration helpers‚Äù = built-in next_req functions\n\n\n\nUsually include retry, because API might yell at you for multiple calls\nmax_reqs default is 20. Start low when experimenting, Inf when solid\nEach iteration helper gets a slide",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#iteration-helpers-iterate_with_offset",
    "href": "slides/httr2/httr2-pagination.html#iteration-helpers-iterate_with_offset",
    "title": "Get a lot of data from APIs",
    "section": "Iteration helpers: iterate_with_offset()",
    "text": "Iteration helpers: iterate_with_offset()\n\nparam_name = \"page\" or whatever API calls it\nstart, offset = almost always leave as-is\nresp_pages = function to convert resp to page count\n\nmax_reqs &lt;- min(max_reqs, total_pages)\n\nresp_complete = function to check if resp is last page\n\nEg: \\(resp) !length(resp_body_json(resp))\n\n\n\n\nAlmost always ‚Äúpage‚Äù.\nresp_pages called 1st response. Optional.\n\nHelp says it‚Äôs called once, but, if it fails to find total, it will be called for each response.\n\nresp_complete usually not needed\n\nExample is shorthand for ‚ÄúDid we get an empty body?‚Äù",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#offset-example-openfec",
    "href": "slides/httr2/httr2-pagination.html#offset-example-openfec",
    "title": "Get a lot of data from APIs",
    "section": "Offset example: OpenFEC",
    "text": "Offset example: OpenFEC\n\ncandidates_request &lt;- \n  request(\"https://api.open.fec.gov/v1/candidates\") |&gt; \n  req_url_query(api_key = \"DEMO_KEY\", election_year = 2020, office = \"P\") |&gt; \n  req_url_query(has_raised_funds = TRUE)\n\n\n\n\n\ncandidates_single &lt;- \n  candidates_request |&gt; \n  req_perform() |&gt; \n  resp_body_json()\nlength(candidates_single$results)\n#&gt; [1] 20\ncandidates_single$pagination$count\n#&gt; [1] 173\n\n\n\ncandidates_multi &lt;- \n  candidates_request |&gt; \n  req_retry(max_tries = 3) |&gt; \n  req_perform_iterative(\n    next_req = iterate_with_offset(\n      \"page\",\n      resp_pages = \\(resp) {\n        content &lt;- resp_body_json(resp)\n        content$pagination$pages\n      }\n    ),\n    max_reqs = Inf\n  )\nlength(candidates_multi)\n#&gt; [1] 9\n\n\n\n\n\nWarning: This might take a while with the DEMO_KEY\nWe‚Äôll see how to extract data from the pages shortly",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#offset-example-crossref.org",
    "href": "slides/httr2/httr2-pagination.html#offset-example-crossref.org",
    "title": "Get a lot of data from APIs",
    "section": "Offset example: crossref.org",
    "text": "Offset example: crossref.org\n\ncrossref_request &lt;- \n  request(\"https://api.crossref.org/works\") |&gt; \n  req_url_query(query = \"apis\")\n\n\n\n\n\ncrossref_single &lt;- \n  crossref_request |&gt; \n  req_perform() |&gt; \n  resp_body_json()\nlength(crossref_single$message$items)\n#&gt; [1] 20\ncrossref_single$message$`total-results`\n#&gt; [1] 14114\n\n\n\ncrossref_multi &lt;- \n  crossref_request |&gt; \n  req_retry(max_tries = 3) |&gt; \n  req_perform_iterative(\n    next_req = iterate_with_offset(\n      \"offset\",\n      resp_pages = \\(resp) {\n        content &lt;- resp_body_json(resp)\n        content$pagination$message$`total-results`\n      }\n    ),\n    max_reqs = Inf\n  )\nlength(crossref_multi)\n#&gt; [1] 706\n\n\n\n\n\nWarning: This takes a long time, probably don‚Äôt actually run it!\nThis one has a faster (?) method that we‚Äôll check in a sec.\nWe‚Äôll see how to extract data from the pages shortly",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#iteration-helpers-iterate_with_cursor",
    "href": "slides/httr2/httr2-pagination.html#iteration-helpers-iterate_with_cursor",
    "title": "Get a lot of data from APIs",
    "section": "Iteration helpers: iterate_with_cursor()",
    "text": "Iteration helpers: iterate_with_cursor()\n\nparam_name = \"cursor\" or whatever API calls it\nresp_param_value = function to convert resp to next cursor\n\nNULL if no more pages\n\n\n\n\nI‚Äôve seen ‚Äúcursor‚Äù, ‚Äútoken‚Äù and variations, like ‚ÄúnextPageToken‚Äù.\nSingle function because usually this style ends with an empty nextCursor.",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#cursor-example-crossref",
    "href": "slides/httr2/httr2-pagination.html#cursor-example-crossref",
    "title": "Get a lot of data from APIs",
    "section": "Cursor example: Crossref",
    "text": "Cursor example: Crossref\n\ncrossref_request_cursor &lt;- \n  crossref_request |&gt; \n  req_url_query(cursor = \"*\")\n\n\n\n\n\ncrossref_single &lt;- \n  crossref_request_cursor |&gt; \n  req_perform() |&gt; \n  resp_body_json()\nnames(crossref_single$message)\n#&gt; [1] \"facets\"         \"next-cursor\"    \"total-results\"  \"items\"          \"items-per-page\"\n#&gt; [6] \"query\" \n\n\n\ncrossref_multi &lt;- \n  crossref_request_cursor |&gt; \n  req_retry(max_tries = 3) |&gt; \n  req_perform_iterative(\n    next_req = iterate_with_cursor(\n      \"cursor\",\n      resp_param_value = \\(resp) {\n        content &lt;- resp_body_json(resp)\n        if (!length(content$message$items)) {\n          return(NULL)\n        }\n        content$message$`next-cursor`\n      }\n    ),\n    max_reqs = Inf\n  )\nlength(crossref_multi)\n#&gt; [1] 706\n\n\n\n\n\nWarning: This takes a long time, probably don‚Äôt actually run it!\nNot noticeably faster, but this API limits total results from normal pagination, unlimited for cursor-based\nIn this case they keep sending next-cursors even when results are empty, so we need to tell it to stop when no results",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#iteration-helpers-iterate_with_link_url",
    "href": "slides/httr2/httr2-pagination.html#iteration-helpers-iterate_with_link_url",
    "title": "Get a lot of data from APIs",
    "section": "Iteration helpers: iterate_with_link_url()",
    "text": "Iteration helpers: iterate_with_link_url()\n\nrel = \"next\" or whatever API calls it\nresp_param_value = function to convert resp to next cursor\n\nNULL if no more pages\n\n\n\n\nThis really should always be ‚Äúnext‚Äù, but it isn‚Äôt required\nCanonical example is the GitHub API, but I‚Äôm showing a demo that doesn‚Äôt require any setup by you",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#link-url-example-mtg",
    "href": "slides/httr2/httr2-pagination.html#link-url-example-mtg",
    "title": "Get a lot of data from APIs",
    "section": "Link-URL example: MTG",
    "text": "Link-URL example: MTG\n\nmtg_cards_request &lt;- \n  request(\"http://api.magicthegathering.io/v1\") |&gt; \n  req_url_path_append(\"cards\") |&gt; \n  req_url_query(name = \"bee\", pageSize = 20)\n\n\n\n\n\nmtg_cards_single &lt;- \n  mtg_cards_request |&gt; \n  req_perform()\nresp_header(mtg_cards_single, \"link\")\n#&gt; &lt;https://api.magicthegathering.io/v1/cards?name=bee&page=5&pageSize=20&gt;; rel=\"last\", \n#&gt; &lt;https://api.magicthegathering.io/v1/cards?name=bee&page=2&pageSize=20&gt;; rel=\"next\"\nmtg_cards_content &lt;- mtg_cards_single |&gt; \n  resp_body_json()\n\n\n\nmtg_cards_multi &lt;- \n  mtg_cards_request |&gt; \n  req_retry(max_tries = 3) |&gt; \n  req_perform_iterative(\n    next_req = iterate_with_link_url(),\n    max_reqs = Inf\n  )\nlength(mtg_cards_multi)\n#&gt; [1] 5\n\n\n\n\n\nIf I were working with this one a lot, I‚Äôd probably actually use offset pagination.",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#roll-your-own-iteration",
    "href": "slides/httr2/httr2-pagination.html#roll-your-own-iteration",
    "title": "Get a lot of data from APIs",
    "section": "Roll-your-own iteration",
    "text": "Roll-your-own iteration\n\nPeople love to reinvent this wheel.\nBody link: nextUrl in response body\n\nopen5e.com monsters",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#roll-your-own-example-dnd-monsters",
    "href": "slides/httr2/httr2-pagination.html#roll-your-own-example-dnd-monsters",
    "title": "Get a lot of data from APIs",
    "section": "Roll-your-own example: DnD Monsters",
    "text": "Roll-your-own example: DnD Monsters\n\ndnd_request &lt;- \n  request(\"https://api.open5e.com/monsters/?limit=100\") \n\n\n\n\n\ndnd_single &lt;- \n  dnd_request |&gt; \n  req_perform() |&gt; \n  resp_body_json()\nlength(dnd_single$results)\n#&gt; [1] 100\ndnd_single$count\n#&gt; [1] 2439\n\n\n\ndnd_multi &lt;- \n  dnd_request |&gt; \n  req_retry(max_tries = 3) |&gt; \n  req_perform_iterative(\n    next_req = function(resp, req) {\n      url &lt;- resp_body_json(resp)$`next`\n      if (!is.null(url)) {\n        req_url(req, url)\n      }\n    },\n    max_reqs = Inf\n  )\nlength(dnd_multi)\n#&gt; [1] 25\n\n\n\n\n\nUsed code returned by iterate_with_link_url() as template\nBe sure to keep all the non-URL bits of the req!",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#resps_data",
    "href": "slides/httr2/httr2-pagination.html#resps_data",
    "title": "Get a lot of data from APIs",
    "section": "resps_data()",
    "text": "resps_data()\n\nreq_perform_iterative() returns list of responses\nresps_data() takes that list + resp_data parsing function and merges\nUsually you need more than just something like resp_body_json\n\nGrab just the actual results\n\n\n\n\nClarify that resp_data is the function itself, NOT a call to the function.",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#resps_data-example-openfec",
    "href": "slides/httr2/httr2-pagination.html#resps_data-example-openfec",
    "title": "Get a lot of data from APIs",
    "section": "resps_data() example: OpenFEC",
    "text": "resps_data() example: OpenFEC\n\n\nfec_resp_parser &lt;- function(resp) {\n  resp_body_json(resp)$results\n}\n\n\n\n\ncandidates_multi_results &lt;- resps_data(\n  candidates_multi, fec_resp_parser\n)\ntibblify::tibblify(candidates_multi_results)\n\n#&gt; # A tibble: 173 √ó 24\n#&gt;    active_through candidate_id candidate_inactive candidate_status cycles    \n#&gt;             &lt;int&gt; &lt;chr&gt;        &lt;lgl&gt;              &lt;chr&gt;            &lt;list&gt;    \n#&gt;  1           2020 P00014241    FALSE              N                &lt;list [3]&gt;\n#&gt;  2           2024 P00008193    FALSE              N                &lt;list [4]&gt;\n#&gt;  3           2020 P00006296    FALSE              P                &lt;list [4]&gt;\n#&gt;  4           2020 P00010900    FALSE              N                &lt;list [1]&gt;\n#&gt;  5           2020 P00012104    FALSE              P                &lt;list [3]&gt;\n#&gt;  6           2020 P40003170    FALSE              N                &lt;list [5]&gt;\n#&gt;  7           2020 P00008128    FALSE              N                &lt;list [4]&gt;\n#&gt;  8           2020 P80004369    FALSE              N                &lt;list [2]&gt;\n#&gt;  9           2020 P00010090    FALSE              N                &lt;list [3]&gt;\n#&gt; 10           2024 P00015297    FALSE              N                &lt;list [3]&gt;\n#&gt; # ‚Ñπ 163 more rows\n#&gt; # ‚Ñπ 19 more variables: district &lt;chr&gt;, district_number &lt;int&gt;,\n#&gt; #   election_districts &lt;list&gt;, election_years &lt;list&gt;, federal_funds_flag &lt;lgl&gt;,\n#&gt; #   first_file_date &lt;chr&gt;, has_raised_funds &lt;lgl&gt;,\n#&gt; #   inactive_election_years &lt;list&gt;, incumbent_challenge &lt;chr&gt;,\n#&gt; #   incumbent_challenge_full &lt;chr&gt;, last_f2_date &lt;chr&gt;, last_file_date &lt;chr&gt;,\n#&gt; #   load_date &lt;chr&gt;, name &lt;chr&gt;, office &lt;chr&gt;, office_full &lt;chr&gt;, ‚Ä¶\n\n\n\n\n\nReiterate that fec_resp_parser is the function itself, not a call to the function.",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-pagination.html#resps_data-friends",
    "href": "slides/httr2/httr2-pagination.html#resps_data-friends",
    "title": "Get a lot of data from APIs",
    "section": "resps_data() friends",
    "text": "resps_data() friends\n\nreq_perform_iterative on_error arg: ‚Äústop‚Äù or ‚Äúreturn‚Äù\nresps_successes() extracts just successes from resps list\nresps_failures() same, but failures\nresps_requests() to see how they were called\n\n\n\nWe didn‚Äôt dig into it, but req_perform_iterative() has on_error arg\nCommon workflow might be to grab the successes, and then pass THAT to resps_data()\nreq_perform_iterative can only have 1 failure, but we‚Äôll see some more multi performs in a later chapter TBD\n\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Get more data",
      "Get a lot of data from APIs"
    ]
  },
  {
    "objectID": "slides/httr2/zzz-orphan-apis.html#browsers-and-http-requests",
    "href": "slides/httr2/zzz-orphan-apis.html#browsers-and-http-requests",
    "title": "How do computers communicate?",
    "section": "Browsers and HTTP Requests",
    "text": "Browsers and HTTP Requests\nhttps://wapir.io/apis.html is an HTTP request:\n\nhttps:// = ‚Äúuse HTTP(s) protocol‚Äù\nURL: wapir.io/apis.html = URL\nheaders: Cookies (plus some info about your browser)\nmethod: GET\nbody: Empty\n\n\n\nRequest = URL + headers + method + body\nYou (kinda) use APIs all the time!"
  },
  {
    "objectID": "slides/httr2/zzz-orphan-apis.html#http-api-frameworks-historic",
    "href": "slides/httr2/zzz-orphan-apis.html#http-api-frameworks-historic",
    "title": "How do computers communicate?",
    "section": "HTTP API Frameworks: Historic",
    "text": "HTTP API Frameworks: Historic\n\nRPC = Remote Procedure Call\n\nEndpoints = actions\nXML-RPC & JSON-RPC popular early\nOften just GET (GET /deleteItem/1234)\n\nSOAP = Simple Objects Access Protocol (briefly huge, mostly dead)\n\nEvolved from XML-RPC\nTechnically not limited to HTTP\n\n\n\n\nRPCs are making a come back (we‚Äôll see in a couple slides)"
  },
  {
    "objectID": "slides/httr2/zzz-orphan-apis.html#http-api-frameworks-modern",
    "href": "slides/httr2/zzz-orphan-apis.html#http-api-frameworks-modern",
    "title": "How do computers communicate?",
    "section": "HTTP API Frameworks: Modern",
    "text": "HTTP API Frameworks: Modern\n\nREST = REpresentational State Transfer\n\nMost common by far\nStateless (call defines the object)\nTechnically endpoints = nouns\nWhat we‚Äôll focus on in most of book\n\nGraphQL = Graph Query Language\n\nBody defines everything\n\nJSON with wildcards telling server what to fill in\n\nBasically GET + 1 endpoint\nMore details in ‚ÄúHow else can I communicate with APIs from R?‚Äù\n\n\n\n\nREST APIs often called ‚ÄúRESTful‚Äù APIs.\nGraphQL should be bigger than it is for data science"
  },
  {
    "objectID": "slides/httr2/zzz-orphan-apis.html#other-api-frameworks",
    "href": "slides/httr2/zzz-orphan-apis.html#other-api-frameworks",
    "title": "How do computers communicate?",
    "section": "Other API Frameworks",
    "text": "Other API Frameworks\n\nwebsocket\n\nws:// or wss:// vs http:// or https://\n2-way communication\n{websocket} package\n\ngRPC = Google RPC\n\nGood for real-time, 2-way communication\nUses HTTP/2 (more socket-like)\n\n\nDeeper dive coming in ‚ÄúHow else can I communicate with APIs from R?‚Äù!\n\n\nShiny is websocket between server (R) and ui (JS)\ngRPC best for tightly coupled microservices\n\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/httr2/httr2-misc.html#controlling-large-requests",
    "href": "slides/httr2/httr2-misc.html#controlling-large-requests",
    "title": "Do more with {httr2}",
    "section": "Controlling large requests",
    "text": "Controlling large requests\n\nhttr2::req_progress() adds a progress bar for requests that transfer a lot of data.\nhttr2::req_timeout() to add a maximum wait time in seconds\nhttr2::req_cache() to avoid re-calling slow calls"
  },
  {
    "objectID": "slides/httr2/httr2-misc.html#throttling-and-retries",
    "href": "slides/httr2/httr2-misc.html#throttling-and-retries",
    "title": "Do more with {httr2}",
    "section": "Throttling and retries",
    "text": "Throttling and retries\n\nAPIs often throw errors if hit too fast\nhttr2::req_throttle() to slow down\n\nrealm when endpoints have different limits (‚ÄúTier 1‚Äù vs ‚ÄúTier 2‚Äù)\n\nhttr2::req_retry() to try again for transient failures\n\nDefault: Statuses 429 & 503 = transient\n(optional) is_transient function to override\n(optional) after function to extract wait from response"
  },
  {
    "objectID": "slides/httr2/httr2-misc.html#dealing-with-errors",
    "href": "slides/httr2/httr2-misc.html#dealing-with-errors",
    "title": "Do more with {httr2}",
    "section": "Dealing with errors",
    "text": "Dealing with errors\n\nhttr2::req_error() to handle errors\n\nis_error function to escalate something to an error\n\nEg: Empty response you know isn‚Äôt really empty\n\nbody function to parse response into rlang::abort() message.\n\nEg: API description gives details of an error code‚Äôs meaning"
  },
  {
    "objectID": "slides/httr2/httr2-misc.html#multiple-requests",
    "href": "slides/httr2/httr2-misc.html#multiple-requests",
    "title": "Do more with {httr2}",
    "section": "Multiple requests",
    "text": "Multiple requests\n\nManually create list of separate requests\nPerform all:\n\nhttr2::req_perform_parallel() all at once\n\nNo reauth, no throttle, no retry, no cache\n\nhttr2::req_perform_sequential() serially\n\nSlower but can use other settings"
  },
  {
    "objectID": "slides/httr2/httr2-misc.html#multiple-requests-youtube",
    "href": "slides/httr2/httr2-misc.html#multiple-requests-youtube",
    "title": "Do more with {httr2}",
    "section": "Multiple requests: YouTube",
    "text": "Multiple requests: YouTube\nGet 10 most recent videos from list of playlists.\n\nbase_req &lt;- request(\"https://youtube.googleapis.com/youtube/v3\") |&gt; \n  req_url_path_append(\"playlistItems\") |&gt; \n  req_url_query(part = \"contentDetails\", maxResults = 10) |&gt; \n  req_auth_bearer_token(IGNORE_FOR_NOW)\n\nresps &lt;- purrr::map(\n  playlists, \\(playlist) req_url_query(base_req, playlistId = playlist)\n) |&gt; \n  req_perform_parallel() # or req_perform_sequential()"
  },
  {
    "objectID": "slides/httr2/httr2-misc.html#streaming",
    "href": "slides/httr2/httr2-misc.html#streaming",
    "title": "Do more with {httr2}",
    "section": "Streaming",
    "text": "Streaming\n\nhttr2::req_perform_stream() to stream data from API\nBlocks R session (see Chapter 10 for alternative)\nCall function every buffer_kb kilobytes\nEg: Save to file, different process could read that file from Shiny"
  },
  {
    "objectID": "slides/httr2/httr2-misc.html#streaming-simple-example",
    "href": "slides/httr2/httr2-misc.html#streaming-simple-example",
    "title": "Do more with {httr2}",
    "section": "Streaming: Simple example",
    "text": "Streaming: Simple example\n\nshow_bytes &lt;- function(x) {\n  cli::cli_inform(\"Got {length(x)} bytes at {Sys.time()}.\")\n  TRUE\n}\nresp &lt;- httr2::request(httr2::example_url()) |&gt;\n  httr2::req_url_path(\"/stream-bytes/100000\") |&gt;\n  httr2::req_perform_stream(show_bytes, buffer_kb = 32)"
  },
  {
    "objectID": "slides/httr2/httr2-misc.html#is-this-interesting",
    "href": "slides/httr2/httr2-misc.html#is-this-interesting",
    "title": "Do more with {httr2}",
    "section": "Is this interesting?",
    "text": "Is this interesting?\n\nreq_options() lets you directly set libcurl options not available in {httr2}\nShould I dig through and find what‚Äôs available but not implemented?\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/club-intro.html#process",
    "href": "slides/club-intro.html#process",
    "title": "Club Meetings",
    "section": "Ô∏è‚úÖ Process",
    "text": "Ô∏è‚úÖ Process\nMeetings = weekly\n\nüßë‚Äçüè´ Jon leads a discussion of a chapter\n\nüôã‚Äç‚ôÄÔ∏è IMPORTANT: You ask questions!\nÔ∏è‚úÖ Goal: Revise/finalize learning objectives\nüì∫ Recordings on DSLC YouTube\n\nüîÑÔ∏è Jon revises slides\n‚ùìJon writes ‚Äútest yourself‚Äù questions\n\nüßµ Discuss in channel?\n\n(revisions, maybe future cohorts)\nüìù Jon writes chapter\n\n\n\nTalked about this writing process in project club, dslc.io/youtube\nMeet every week‚Ä¶ unless I need a break to catch up.\nDiscussion even more important than in a normal club\nReview revised slides? Maybe spend 2 weeks per chapter?\nWould formal survey of some sort help?\nNot 100% certain about question structure yet (whether ‚Äúhomeworky‚Äù or ‚Äúthink about it‚Äù).\nHoping to write as we go, but definitely won‚Äôt keep up.\n\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Club Meetings"
    ]
  },
  {
    "objectID": "slides/leftovers.html#how-can-i-quickly-translate-api-docs",
    "href": "slides/leftovers.html#how-can-i-quickly-translate-api-docs",
    "title": "Unused Slides from Other Chapters",
    "section": "How can I quickly translate API docs?",
    "text": "How can I quickly translate API docs?\n\nDocs often have ‚ÄúTry it out‚Äù option\n\nhttps://api.open.fec.gov/developers/\n\nCopy the ‚ÄúCurl‚Äù block\n\n\n\ncurl_translate(\n  \"curl -X 'GET' \\\n  'https://api.open.fec.gov/v1/candidates/?api_key=DEMO_KEY&office=H'\"\n)\n\n\n\nrequest(\"https://api.open.fec.gov/v1/candidates/\") |&gt; \n  req_method(\"GET\") |&gt; \n  req_url_query(\n    api_key = \"DEMO_KEY\",\n    office = \"H\"\n  ) |&gt; \n  req_perform()\n\n\n\nIf you want to use this API, sign up for your own key at that same URL.\nI edited the given curl to fit\nThis code will usually get you started\nNow let‚Äôs clean it up and understand it!\nExtra: OpenAPI 3.0 description at https://api.apis.guru/v2/specs/fec.gov/1.0/openapi.json",
    "crumbs": [
      "Appendices",
      "Unused Slides from Other Chapters"
    ]
  },
  {
    "objectID": "slides/leftovers.html#the-pieces-of-a-url",
    "href": "slides/leftovers.html#the-pieces-of-a-url",
    "title": "Unused Slides from Other Chapters",
    "section": "The Pieces of a URL",
    "text": "The Pieces of a URL\nhttps://api.open.fec.gov/v1/candidates/?election_year=2020&office=P&api_key=DEMO_KEY\n\nhttps://api.open.fec.gov = ‚Äúscheme‚Äù + ‚Äúhost name‚Äù\n/v1/candidates/ = ‚Äúpath‚Äù\n?election_year=2020&office=P&api_key=DEMO_KEY = ‚Äúquery‚Äù\nNot present:\n\n:1234 = ‚Äúport‚Äù\n#target = ‚Äúfragment‚Äù\nusername:password@",
    "crumbs": [
      "Appendices",
      "Unused Slides from Other Chapters"
    ]
  },
  {
    "objectID": "slides/leftovers.html#endpoint-info-as-data",
    "href": "slides/leftovers.html#endpoint-info-as-data",
    "title": "Unused Slides from Other Chapters",
    "section": "Endpoint info as data",
    "text": "Endpoint info as data\n\n{tibblify} can load OpenAPI endpoint data\n\n\n\nopenfec_endpoints &lt;- tibblify::parse_openapi_spec(\"https://api.apis.guru/v2/specs/fec.gov/1.0/openapi.json\")\nopenfec_endpoints |&gt; \n  unnest(operations)\n\n\n\n\nThis is a dev version of tibblify, production version only gets some of this data.",
    "crumbs": [
      "Appendices",
      "Unused Slides from Other Chapters"
    ]
  },
  {
    "objectID": "slides/leftovers.html#endpoint-parameters",
    "href": "slides/leftovers.html#endpoint-parameters",
    "title": "Unused Slides from Other Chapters",
    "section": "Endpoint parameters",
    "text": "Endpoint parameters\n\ncandidates_endpoint &lt;- openfec_endpoints |&gt; \n  unnest(operations) |&gt; \n  filter(endpoint == \"/candidates/\")\ncandidates_endpoint |&gt; \n  select(parameters) |&gt; \n  unnest(parameters)",
    "crumbs": [
      "Appendices",
      "Unused Slides from Other Chapters"
    ]
  },
  {
    "objectID": "slides/leftovers.html#endpoint-responses",
    "href": "slides/leftovers.html#endpoint-responses",
    "title": "Unused Slides from Other Chapters",
    "section": "Endpoint responses",
    "text": "Endpoint responses\n\ncandidates_endpoint |&gt; \n  select(responses) |&gt;\n  unnest(responses) |&gt; \n  unnest(content)\n\n\n\nNote that spec is a tspec!\n\n\n\n\n\nDSLC.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Appendices",
      "Unused Slides from Other Chapters"
    ]
  },
  {
    "objectID": "slides/intro.html#api-application-programming-interface",
    "href": "slides/intro.html#api-application-programming-interface",
    "title": "Introduction",
    "section": "API = ‚Äúapplication programming interface‚Äù",
    "text": "API = ‚Äúapplication programming interface‚Äù\n\n‚Äúapplication‚Äù = function, website‚Ä¶ any computerized thing\n‚Äúprogramming‚Äù = can be used in code\n‚Äúinterface‚Äù = way to interact with something\n\n\nü§ñ APIs allow computers to talk to one another\n\n\n\nRight level?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#what-are-web-apis",
    "href": "slides/intro.html#what-are-web-apis",
    "title": "Introduction",
    "section": "What are web APIs?",
    "text": "What are web APIs?\n\nüíª Technically any function‚Äôs list of arguments is an API\n\n\n\n‚Äúhttr2 is a ground-up rewrite of httr that provides a pipeable API with an explicit request object that solves more problems felt by packages that wrap APIs‚Äù (httr2 docs, emphasis added)\n\n\n\nüï∏Ô∏è This book = web APIs\n\nWeb API = API on the internet\nFor rest of book, ‚ÄúAPI‚Äù means ‚Äúweb API‚Äù\n\n\n\n\nhttr2 quote helpful/interesting?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#what-are-some-api-examples",
    "href": "slides/intro.html#what-are-some-api-examples",
    "title": "Introduction",
    "section": "What are some API examples?",
    "text": "What are some API examples?\n\nCloud services ({paws})\nGovernment agencies (OpenFEC)\nRandom data (sunrisesunset.io)\nServices (OpenAI)\nAPIs.guru = API directory\n\n2,529 APIs as of 2024-01-22\n\n\n\n\nNumber of examples good?\nVariety of examples good?\nDeep enough, or more-full usage examples?\nWhat would you expect in book (vs slides)?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#what-does-each-chapter-cover",
    "href": "slides/intro.html#what-does-each-chapter-cover",
    "title": "Introduction",
    "section": "What does each chapter cover?",
    "text": "What does each chapter cover?\n\n\nPart 1: How can I get web data into R?\n\nHow can I access APIs from R?\nHow do I tell the API who I am?\nHow can I process API responses?\nHow can I get a lot of data from an API?\nHow can I find APIs?\nHow can I find API-wrapping packages?\nHow else can I communicate with APIs from R?\nHow can I get data from web pages?\nHow can I learn more about accessing web APIs?\n\n\nPart 2: How can I create my own APIs with R?\n\nHow can I create an API?\nHow can I get inputs from API users?\nHow can I control API output?\nHow can I handle API errors?\nHow can I authenticate API users?\nHow can I test my plumber API?\nHow do I deploy my plumber API?\nHow can I learn more about creating APIs?\n\n\n\n\n\nI want to quickly gauge interest, but more details in the survey.\nWill have an over-arching case study woven into most chapters (but as independent pieces to allow jumping around)\nAny missing topics?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#what-wont-i-learn",
    "href": "slides/intro.html#what-wont-i-learn",
    "title": "Introduction",
    "section": "What won‚Äôt I learn?",
    "text": "What won‚Äôt I learn?\n\nHow can I access APIs with {httr} or {curl}?\nHow can I access APIs from other programming languages?\nHow should I design a complex API?\n\nMany other books, such as Designing APIs with Swagger and OpenAPI\n\nHow can I administer an enterprise API?\n\nDevOps for Data Science for tips\nWork with professionals for full-scale deployments\n\n\n\n\nAnything else people would expect?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#who-should-read-this-book",
    "href": "slides/intro.html#who-should-read-this-book",
    "title": "Introduction",
    "section": "Who should read this book?",
    "text": "Who should read this book?\n\n\n\nData Analysts/Scientists\n\nPart 1: Enrich datasets\n\nMachine Learning Engineers\n\nPart 1: Feature engineering\nPart 2: Share predictions\n\n\n\n\nData Producers (Researchers, etc)\n\nPart 2: Share data\n\nShiny App Designers\n\nPart 1: Load/process data\nPart 2: Divide & conquer\n\n\n\n\n\n\nPeople who analyze data, not necessarily that job title.\nResearchers or anybody else with data to share.\nDoes anybody fit into something other than those use cases?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#prerequisites",
    "href": "slides/intro.html#prerequisites",
    "title": "Introduction",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nVery few hard prerequisites\n\nWill point to resources when helpful\n\nI assume familiarity with R\n\nR for Data Science\n\nHelpful:\n\nAdvanced R to construct more robust APIs\nR Packages for deeper dive into üì¶\n\n\n\n\n(I repeat these questions in the survey)\nHow many have read R4DS?\nHow many have read Advanced R?\nHow many have read R Packages?\nHow many have written a function?\nHow many have written a package?\nHow many have published a package on CRAN?\nAccessed an API from R with httr?\nAccessed an API from R with httr2?\nAccessed an API from R some other way?\nDiscuss level I can assume.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#how-are-chapters-structured",
    "href": "slides/intro.html#how-are-chapters-structured",
    "title": "Introduction",
    "section": "How are chapters structured?",
    "text": "How are chapters structured?\n\nLearning Objectives ‚âà skills\n\n‚ÄúAfter you read this chapter, you will be able to‚Ä¶‚Äù\nThere will be a separate index of these\n\nTest-Yourself Questions to check understanding\nCheck online version for API updates\n(TODO: Anything to note about code vs text?)\n(TODO: Probably an over-arching case study of an election data Shiny app?)",
    "crumbs": [
      "Introduction"
    ]
  }
]