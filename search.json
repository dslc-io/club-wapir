[
  {
    "objectID": "slides/los.html#what-type-of-los-are-we-focusing-on",
    "href": "slides/los.html#what-type-of-los-are-we-focusing-on",
    "title": "Learning Objectives",
    "section": "What type of LOs are we focusing on?",
    "text": "What type of LOs are we focusing on?\n\nReaders probably solving semi-specific problems, so…\nSkill-based learning objectives\n\n“After you read this chapter, you will be able to…”\n\n\n\n\nAny disagreement with that first bullet?",
    "crumbs": [
      "Learning Objectives"
    ]
  },
  {
    "objectID": "slides/los.html#why-do-they-matter",
    "href": "slides/los.html#why-do-they-matter",
    "title": "Learning Objectives",
    "section": "Why do they matter?",
    "text": "Why do they matter?\n\nStudents learn more when they have clear objectives.\nLends structure to my process.\nEventually: Lends structure to R4DS\n\n\n\nI like having a process!\nAiming to implement these across all of R4DS\n(Eventually want to also auto-map questions to them)",
    "crumbs": [
      "Learning Objectives"
    ]
  },
  {
    "objectID": "slides/los.html#part-1-learning-objectives-brain-dump",
    "href": "slides/los.html#part-1-learning-objectives-brain-dump",
    "title": "Learning Objectives",
    "section": "Part 1 Learning Objectives Brain Dump",
    "text": "Part 1 Learning Objectives Brain Dump\n\n\n\nDiscover useful APIs\nProcess web data into R-standard formats\nFetch data with simple APIs\nFetch lots of data from APIs\nAuthenticate with APIs\nFind specific APIs\n\n\n\nDo other things (send/update/delete data) with APIs\nFind R packages that wrap APIs\n(Use other forms of APIs?)\nGet web data without APIs ({rvest})\nLearn more about accessing APIs\n\n\n\n\n\nDiscover: Just vaguely via apis.guru or similar.\nProcess: This isn’t API-specific, but APIs often have deeply nested data\nFetch data: No auth. Very basic parsing of the return\nFetch lots: Important concept regardless of whether it’s “simple”\nAuthenticate: Complicated (see Slack), I want to make it as clear as possible\n\nIn part 2 we’ll build the complicated thing, I think.\n\nFind specific: Shoved this way down the list because it will be hard to have examples that aren’t easy. I think I’ll replace apis.guru with a true wiki.\nDo other: curl_translate() deep dive here.\nFind R packages: I want it late so you can tell if it’s a bad package\nOthers: gRPC, GraphQL, Websockets\nrvest: Technically could skip?\nLearn more: Book recommendations, blogs, etc.",
    "crumbs": [
      "Learning Objectives"
    ]
  },
  {
    "objectID": "slides/club-intro.html#process",
    "href": "slides/club-intro.html#process",
    "title": "Club Meetings",
    "section": "️✅ Process",
    "text": "️✅ Process\nMeetings = weekly\n\n🧑‍🏫 Jon leads a discussion of a chapter\n\n🙋‍♀️ IMPORTANT: You ask questions!\n️✅ Goal: Revise/finalize learning objectives\n📺 Recordings on R4DS YouTube\n\n🔄️ Jon revises slides\n❓Jon writes “test yourself” questions\n\n🧵 Discuss in channel?\n\n(revisions, maybe future cohorts)\n📝 Jon writes chapter\n\n\n\nTalked about this writing process in project club, r4ds.io/youtube\nMeet every week… unless I need a break to catch up.\nDiscussion even more important than in a normal club\nReview revised slides? Maybe spend 2 weeks per chapter?\nWould formal survey of some sort help?\nNot 100% certain about question structure yet (whether “homeworky” or “think about it”).\nHoping to write as we go, but definitely won’t keep up.\n\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "Club Meetings"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#what-do-httr2-calls-look-like",
    "href": "slides/httr2/httr2.html#what-do-httr2-calls-look-like",
    "title": "How can I access APIs from R?",
    "section": "What do {httr2} calls look like?",
    "text": "What do {httr2} calls look like?\n\nPipe-based API calls\n\n\n\ncandidates &lt;- \n  request(\"https://api.open.fec.gov/v1\") |&gt; \n  req_url_path_append(\"candidates\") |&gt; \n  req_url_query(api_key = \"DEMO_KEY\") |&gt; \n  req_url_query(election_year = 2024) |&gt; \n  req_perform() |&gt; \n  resp_body_json()\ncandidates$results[[1]]$candidate_id\n#&gt; [1] \"P40014052\"\n\n\n\n\nhttr2 is a rewrite of httr specifically to use the concept of the pipe.\n\nI’ll add a brief intro to the pipe in the Introduction chapter under prereqs!\nI use |&gt; base R pipe here. Pronounce it “and then”.\n\nhttr2 calls usually involve a request, which you perform, and then you parse the response.\nWe’re hitting the free, open api from the Federal Elections Commission.\n\nI’m thinking about building a Shiny app related to this API, and using it as a case study throughout the book, but I also need to find stable APIs with more options\nStable API ideas? Ideally free. I also might host something for people to use.\n\n(step through)\nHere we build the request piece-wise\n\nWe’ll get into details of the functions in a few slides\n\nThen we perform the request. This actually hits the server.\nThen we parse what we get back with a resp_body function.\nThis returns a larger object in a format called JSON, will talk about it more in a later chapter",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#why-httr",
    "href": "slides/httr2/httr2.html#why-httr",
    "title": "How can I access APIs from R?",
    "section": "Why “httr”?",
    "text": "Why “httr”?\n\nHTTP = HyperText Transfer Protocol\n\n“HyperText” = web content\n“Transfer” = exchange\n“Protocol” = rules\n“rules for exchanging web content”\nHTTP(S) = most of internet communication\n\n\n\n\nYou may have seen http or https at the start of URLs (web addresses)\n“web content” =\n\noriginally text and links (HTML = HyperText Markup Language)\nnow data, images, videos, etc.\n\n“exchange” or “move”\n“S” means “secure”\nIf anyone asks: 1.1 = most, 2.0 = 2-way",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#why-httr2",
    "href": "slides/httr2/httr2.html#why-httr2",
    "title": "How can I access APIs from R?",
    "section": "Why “httr2”?",
    "text": "Why “httr2”?\n\n“HTTP in R, take 2”\n\n\n\n\n\n\nBoth packages by Hadley Wickham (R4DS and other books, tidyverse, Chief Scientist at Posit)\nComplete rewrite. Why? Guesses?\nThings that depend on httr as of January 22, 2024 (Monday)\nCouldn’t fundamentally change, or these package would all break",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#how-do-i-use-httr2",
    "href": "slides/httr2/httr2.html#how-do-i-use-httr2",
    "title": "How can I access APIs from R?",
    "section": "How do I use {httr2}?",
    "text": "How do I use {httr2}?\n\nreq_*() functions return httr2_request objects\n\n\n\nreq_fec &lt;- request(\"https://api.open.fec.gov/v1\")\nreq_fec_auth &lt;- req_url_query(req_fec, api_key = \"DEMO_KEY\")\nreq_candidates &lt;- req_url_path_append(req_fec_auth, \"candidates\")\ncandidates_2024 &lt;- req_url_query(req_candidates, election_year = 2024) |&gt; \n  req_perform() |&gt; resp_body_json()\ncandidates_2022 &lt;- req_url_query(req_candidates, election_year = 2022) |&gt; \n  req_perform() |&gt; resp_body_json()\nreq_calendar &lt;- req_url_path_append(req_fec_auth, \"calendar-dates\")\n\n\n\n\nImagine you’re working with an API, like the FEC API\n\nWhat you’ll very often do.\n\nWe’ll go through function specifics in a moment, just soak in the utility of separate objects\nThis is super important, so let’s pause to sink this in\nI’m going to drink some water while you make sure you have that.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#how-can-i-quickly-translate-api-docs",
    "href": "slides/httr2/httr2.html#how-can-i-quickly-translate-api-docs",
    "title": "How can I access APIs from R?",
    "section": "How can I quickly translate API docs?",
    "text": "How can I quickly translate API docs?\n\nDocs often have “Try it out” option\n\nhttps://api.open.fec.gov/developers/\n\nCopy the “Curl” block\n\n\n\ncurl_translate(\n  \"curl -X 'GET' \\\n  'https://api.open.fec.gov/v1/candidates/?api_key=DEMO_KEY&office=H'\"\n)\n\n\n\nrequest(\"https://api.open.fec.gov/v1/candidates/\") |&gt; \n  req_method(\"GET\") |&gt; \n  req_url_query(\n    api_key = \"DEMO_KEY\",\n    office = \"H\"\n  ) |&gt; \n  req_perform()\n\n\n\nIf you want to use this API, sign up for your own key at that same URL.\nI edited the given curl to fit\nThis code will usually get you started\nNow let’s clean it up and understand it!\nExtra: OpenAPI 3.0 description at https://api.apis.guru/v2/specs/fec.gov/1.0/openapi.json",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#request-req_path_append",
    "href": "slides/httr2/httr2.html#request-req_path_append",
    "title": "How can I access APIs from R?",
    "section": "request() & req_path_append()",
    "text": "request() & req_path_append()\n\nrequest(\"https://api.open.fec.gov/v1/candidates/\") |&gt; \n  req_method(\"GET\") |&gt; \n  req_url_query(\n    api_key = \"DEMO_KEY\",\n    office = \"H\"\n  ) |&gt; \n  req_perform()\n\n\nCleaner: “main” request object + specific path\n\nreq_fec &lt;- request(\"https://api.open.fec.gov/v1\")\nreq_candidates &lt;- req_fec |&gt; \n  req_url_path_append(\"candidates\")\n\n\n\n\nreq_candidates$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates\"\n\n\n\n\n\nhttr2 “thinks” in pieces\nYou don’t have to think about the /\nWe have to be careful about the “v1” in our request, though!\n\nMore on next slide.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#dont-use-req_url_path",
    "href": "slides/httr2/httr2.html#dont-use-req_url_path",
    "title": "How can I access APIs from R?",
    "section": "Don’t use req_url_path()!",
    "text": "Don’t use req_url_path()!\n\n\nreq_path_bad &lt;- req_fec |&gt; \n  req_url_path(\"candidates\")\nreq_path_bad$url\n\n#&gt; [1] \"https://api.open.fec.gov/candidates\"\n\n\n\n\n\nreq_candidates$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates\"\n\n\n\n\n\nYou probably never want req_url_path()\nNotably the help docs don’t show an example for this one",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#req_method-more-later",
    "href": "slides/httr2/httr2.html#req_method-more-later",
    "title": "How can I access APIs from R?",
    "section": "req_method(): more later!",
    "text": "req_method(): more later!\n\nrequest(\"https://api.open.fec.gov/v1/candidates/\") |&gt; \n  req_method(\"GET\") |&gt; \n  req_url_query(\n    api_key = \"DEMO_KEY\",\n    office = \"H\"\n  ) |&gt; \n  req_perform()\n\n\n\n“GET” is default for what we’re doing, so we can leave this part out.\nWe don’t have to think about it until what’s now Chapter 6!",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#req_url_query",
    "href": "slides/httr2/httr2.html#req_url_query",
    "title": "How can I access APIs from R?",
    "section": "req_url_query()",
    "text": "req_url_query()\n\nhttps://api.open.fec.gov/v1/candidates/?api_key=DEMO_KEY&office=H\n\n\n\nreq_house &lt;- req_candidates |&gt; \n  req_url_query(\n    api_key = \"DEMO_KEY\",\n    office = \"H\"\n  )\n\n\n\nCan add query parameters piecewise, even before path!\n\n\n\nreq_fec_auth &lt;- req_fec |&gt; \n  req_url_query(api_key = \"DEMO_KEY\")\nreq_candidates_auth &lt;- req_fec_auth |&gt; \n  req_url_path_append(\"candidates\")\nreq_house2 &lt;- req_candidates_auth |&gt; \n  req_url_query(office = \"H\")\n\n\n\n\nidentical(req_house$url, req_house2$url)\n\n#&gt; [1] TRUE\n\n\n\n\n\nThis is the URL that was in the Curl call\n“Query” = stuff after “?”\nArguments for the endpoint\n1st req_url_query() call is what curl_translate gave us\nDoesn’t automatically set order, so watch out for that.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2.html#req_url_query.multi",
    "href": "slides/httr2/httr2.html#req_url_query.multi",
    "title": "How can I access APIs from R?",
    "section": "req_url_query(.multi)",
    "text": "req_url_query(.multi)\n\n\nreq_url_query(req_candidates, office = c(\"H\", \"S\"))\n\n#&gt; Error in `req_url_query()`:\n#&gt; ! All vector elements of `...` must be length 1.\n#&gt; ℹ Use `.multi` to choose a strategy for handling vectors.\n\n\n\n\n.multi = \"pipe\"\n\nreq_url_query(req_candidates, office = c(\"H\", \"S\"), .multi = \"pipe\")$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates?office=H|S\"\n\n\n\n\n.multi = \"comma\"\n\nreq_url_query(req_candidates, office = c(\"H\", \"S\"), .multi = \"comma\")$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates?office=H,S\"\n\n\n\n\n.multi = \"explode\"\n\nreq_url_query(req_candidates, office = c(\"H\", \"S\"), .multi = \"explode\")$url\n\n#&gt; [1] \"https://api.open.fec.gov/v1/candidates?office=H&office=S\"\n\n\n\n\n\nAPIs often can’t handle multiple params with same name\ndefault = “error”\n. in .multi so it doesn’t collide with a parameter named “multi”\n“pipe” or “comma” to list them out in same parameter\n“explode” to separate them as separate copies of that parameter (what this API actually wants)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I access APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/openapi.html#api-descriptions-1",
    "href": "slides/httr2/openapi.html#api-descriptions-1",
    "title": "How can I use an API description?",
    "section": "API Descriptions",
    "text": "API Descriptions\n\nAPIs.guru\nOpenFEC\nYouTube Data API v3\nAsana\n\n\n\nTechnically the OpenAPI specification is the standard, and each API has a “description”\nOpenAPI 3.0+ easier to use than Swagger (aka 2.0)\nStill some confusing bits, such as security vs components$securitySchemas\nPeople can and will do things wrong/weird."
  },
  {
    "objectID": "slides/httr2/openapi.html#read-an-api-description",
    "href": "slides/httr2/openapi.html#read-an-api-description",
    "title": "How can I use an API description?",
    "section": "Read an API description",
    "text": "Read an API description\n\n\nyoutube_spec &lt;- yaml::read_yaml(\"https://api.apis.guru/v2/specs/googleapis.com/youtube/v3/openapi.yaml\")\n\n\n\n\nnames(youtube_spec)\n\n#&gt; [1] \"openapi\"      \"servers\"      \"info\"         \"externalDocs\" \"tags\"        \n#&gt; [6] \"paths\"        \"components\""
  },
  {
    "objectID": "slides/httr2/openapi.html#introduction-to-tibblify",
    "href": "slides/httr2/openapi.html#introduction-to-tibblify",
    "title": "How can I use an API description?",
    "section": "Introduction to tibblify",
    "text": "Introduction to tibblify\n\nyoutube_paths &lt;- tibblify::tibblify(youtube_spec$paths) |&gt; \n  dplyr::glimpse()\n\n#&gt; Rows: 39\n#&gt; Columns: 6\n#&gt; $ .names     &lt;chr&gt; \"/youtube/v3/abuseReports\", \"/youtube/v3/activities\", \"/you…\n#&gt; $ parameters &lt;list&lt;tibble[,1]&gt;&gt; [&lt;tbl_df[11 x 1]&gt;], [&lt;tbl_df[11 x 1]&gt;], [&lt;tbl_…\n#&gt; $ post       &lt;tibble[,7]&gt; &lt;tbl_df[26 x 7]&gt;\n#&gt; $ get        &lt;tibble[,6]&gt; &lt;tbl_df[26 x 6]&gt;\n#&gt; $ delete     &lt;tibble[,6]&gt; &lt;tbl_df[26 x 6]&gt;\n#&gt; $ put        &lt;tibble[,7]&gt; &lt;tbl_df[26 x 7]&gt;"
  },
  {
    "objectID": "slides/httr2/openapi.html#openapi-references",
    "href": "slides/httr2/openapi.html#openapi-references",
    "title": "How can I use an API description?",
    "section": "OpenAPI References",
    "text": "OpenAPI References\n\nyoutube_paths$parameters[[1]]\n\n#&gt; # A tibble: 11 × 1\n#&gt;    `$ref`                                 \n#&gt;    &lt;chr&gt;                                  \n#&gt;  1 #/components/parameters/_.xgafv        \n#&gt;  2 #/components/parameters/access_token   \n#&gt;  3 #/components/parameters/alt            \n#&gt;  4 #/components/parameters/callback       \n#&gt;  5 #/components/parameters/fields         \n#&gt;  6 #/components/parameters/key            \n#&gt;  7 #/components/parameters/oauth_token    \n#&gt;  8 #/components/parameters/prettyPrint    \n#&gt;  9 #/components/parameters/quotaUser      \n#&gt; 10 #/components/parameters/upload_protocol\n#&gt; 11 #/components/parameters/uploadType"
  },
  {
    "objectID": "slides/httr2/openapi.html#parse_openapi_spec",
    "href": "slides/httr2/openapi.html#parse_openapi_spec",
    "title": "How can I use an API description?",
    "section": "parse_openapi_spec()",
    "text": "parse_openapi_spec()\n\nyoutube_paths &lt;- tibblify::parse_openapi_spec(youtube_spec)\n\n\n\nyoutube_paths\n\n#&gt; # A tibble: 39 × 2\n#&gt;    endpoint                          operations       \n#&gt;    &lt;chr&gt;                             &lt;list&gt;           \n#&gt;  1 /youtube/v3/abuseReports          &lt;tibble [1 × 10]&gt;\n#&gt;  2 /youtube/v3/activities            &lt;tibble [1 × 10]&gt;\n#&gt;  3 /youtube/v3/captions              &lt;tibble [4 × 10]&gt;\n#&gt;  4 /youtube/v3/captions/{id}         &lt;tibble [1 × 10]&gt;\n#&gt;  5 /youtube/v3/channelBanners/insert &lt;tibble [1 × 10]&gt;\n#&gt;  6 /youtube/v3/channelSections       &lt;tibble [4 × 10]&gt;\n#&gt;  7 /youtube/v3/channels              &lt;tibble [2 × 10]&gt;\n#&gt;  8 /youtube/v3/commentThreads        &lt;tibble [3 × 10]&gt;\n#&gt;  9 /youtube/v3/comments              &lt;tibble [4 × 10]&gt;\n#&gt; 10 /youtube/v3/comments/markAsSpam   &lt;tibble [1 × 10]&gt;\n#&gt; # ℹ 29 more rows\n\n\n\n\n\nWe’re looking at a dev version of tibblify which I plan to push through\n\npak::pak(\"mgirlich/tibblify#191\")\n\n“endpoint” is another term for “path” – a url in the API\nDeals with references from paths to components &gt; schemas\nCaptions has 4 different methods, so its tibble has 4 rows."
  },
  {
    "objectID": "slides/httr2/openapi.html#unnesting-paths",
    "href": "slides/httr2/openapi.html#unnesting-paths",
    "title": "How can I use an API description?",
    "section": "Unnesting paths",
    "text": "Unnesting paths\n\nyoutube_paths |&gt; tidyr::unnest(operations)\n\n#&gt; # A tibble: 76 × 11\n#&gt;    endpoint          operation summary description operation_id tags  parameters\n#&gt;    &lt;chr&gt;             &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt;       &lt;chr&gt;        &lt;chr&gt; &lt;list&gt;    \n#&gt;  1 /youtube/v3/abus… post      &lt;NA&gt;    Inserts a … youtube.abu… abus… &lt;tibble&gt;  \n#&gt;  2 /youtube/v3/acti… get       &lt;NA&gt;    Retrieves … youtube.act… acti… &lt;tibble&gt;  \n#&gt;  3 /youtube/v3/capt… delete    &lt;NA&gt;    Deletes a … youtube.cap… capt… &lt;tibble&gt;  \n#&gt;  4 /youtube/v3/capt… get       &lt;NA&gt;    Retrieves … youtube.cap… capt… &lt;tibble&gt;  \n#&gt;  5 /youtube/v3/capt… post      &lt;NA&gt;    Inserts a … youtube.cap… capt… &lt;tibble&gt;  \n#&gt;  6 /youtube/v3/capt… put       &lt;NA&gt;    Updates an… youtube.cap… capt… &lt;tibble&gt;  \n#&gt;  7 /youtube/v3/capt… get       &lt;NA&gt;    Downloads … youtube.cap… capt… &lt;tibble&gt;  \n#&gt;  8 /youtube/v3/chan… post      &lt;NA&gt;    Inserts a … youtube.cha… chan… &lt;tibble&gt;  \n#&gt;  9 /youtube/v3/chan… delete    &lt;NA&gt;    Deletes a … youtube.cha… chan… &lt;tibble&gt;  \n#&gt; 10 /youtube/v3/chan… get       &lt;NA&gt;    Retrieves … youtube.cha… chan… &lt;tibble&gt;  \n#&gt; # ℹ 66 more rows\n#&gt; # ℹ 4 more variables: request_body &lt;list&gt;, responses &lt;list&gt;, deprecated &lt;lgl&gt;,\n#&gt; #   global_parameters &lt;list&gt;\n\n\n\n\noperation aka method, we’ll discuss these more later; GET means you can load it like a web page\nNote rows 3-6 are that captions endpoint, and then 7 is captions/{id}"
  },
  {
    "objectID": "slides/httr2/openapi.html#path-details",
    "href": "slides/httr2/openapi.html#path-details",
    "title": "How can I use an API description?",
    "section": "Path details",
    "text": "Path details\n\nyoutube_paths |&gt; tidyr::unnest(operations) |&gt; dplyr::glimpse()\n\n#&gt; Rows: 76\n#&gt; Columns: 11\n#&gt; $ endpoint          &lt;chr&gt; \"/youtube/v3/abuseReports\", \"/youtube/v3/activities\"…\n#&gt; $ operation         &lt;chr&gt; \"post\", \"get\", \"delete\", \"get\", \"post\", \"put\", \"get\"…\n#&gt; $ summary           &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, …\n#&gt; $ description       &lt;chr&gt; \"Inserts a new resource into this collection.\", \"Ret…\n#&gt; $ operation_id      &lt;chr&gt; \"youtube.abuseReports.insert\", \"youtube.activities.l…\n#&gt; $ tags              &lt;chr&gt; \"abuseReports\", \"activities\", \"captions\", \"captions\"…\n#&gt; $ parameters        &lt;list&gt; [&lt;tbl_df[1 x 9]&gt;], [&lt;tbl_df[9 x 9]&gt;], [&lt;tbl_df[3 x …\n#&gt; $ request_body      &lt;list&gt; [&lt;tbl_df[1 x 3]&gt;], &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, [&lt;tbl_df…\n#&gt; $ responses         &lt;list&gt; [&lt;tbl_df[1 x 5]&gt;], [&lt;tbl_df[1 x 5]&gt;], [&lt;tbl_df[1 x …\n#&gt; $ deprecated        &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FAL…\n#&gt; $ global_parameters &lt;list&gt; [&lt;tbl_df[11 x 9]&gt;], [&lt;tbl_df[11 x 9]&gt;], [&lt;tbl_df[11…\n\n\n\n\n(endpoint = path)\n(operation = method = more details in a few chapters)\nsummary is meant for a very brief description, not often used\ndescription can have markdown\noperation_id = unique string for this operation, meant for tools to use as a function name\ntags = Categories; can have more than one per endpoint, but often just one\nparameters = tibble of inputs\nrequest_body = tibble of a fancier type of input (later chapter)\nresponses = tibble of expected output\ndeprecated = is this endpoint no longer intended to be used\nglobal_parameters = tibble of shared inputs\nThis tibble contains MOST of the useful information about the API\n\nWe’ll dig into this tibble for a simple API in the next chapter\n\n\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/httr2/accessing-more.html#slide-1",
    "href": "slides/httr2/accessing-more.html#slide-1",
    "title": "Web APIs with R Book Club",
    "section": "SLIDE 1",
    "text": "SLIDE 1\n\nADD SLIDES AS SECTIONS (##).\nTRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I learn more about accessing web APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-more.html#meeting-videos",
    "href": "slides/httr2/accessing-more.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I learn more about accessing web APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#content-type",
    "href": "slides/httr2/httr2-responses.html#content-type",
    "title": "Web APIs with R Book Club",
    "section": "Content-Type",
    "text": "Content-Type\n\nContent-Type = “MIME type”\n\n“Multipurpose Internet Mail Extensions”\n\ntype/subtype;parameter=value\nhttr2::resp_content_type() gets type/subtype\nhttr2::resp_encoding() gets charset parameter\nMore at MDN MIME types",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#common-text-content-types",
    "href": "slides/httr2/httr2-responses.html#common-text-content-types",
    "title": "Web APIs with R Book Club",
    "section": "Common text content types",
    "text": "Common text content types\n\n\n\nMIME type\nhttr2 function\nDescription\n\n\n\n\napplication/json\nresp_body_json()\nBy far most common\n\n\napplication/xml\nresp_body_xml()\nBriefly most common\n\n\ntext/html\nresp_body_html()\nSee later chapter on scraping\n\n\ntext/plain\nresp_body_string()\nText wildcard",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#json",
    "href": "slides/httr2/httr2-responses.html#json",
    "title": "Web APIs with R Book Club",
    "section": "JSON",
    "text": "JSON\n\napplication/json or */json\n4 scalars (length-1 vectors)\n\nnull ≈ NA\nstring ≈ character(1), always \" (not ')\nnumber ≈ numeric(1), no Inf/-Inf/NaN\nboolean ≈ logical(1), true = TRUE, false = FALSE\n\narray ≈ unnamed list()\n\n[]: [null, \"a\", 1, true] ≈ list(NULL, \"a\", 1, TRUE)\n\nobject ≈ named list()\n\n{}: {\"a\": 1, \"b\": [1, 2]} ≈ list(a = 1, b = list(1, 2))\n\nhttr2::resp_body_json() uses jsonlite::fromJSON()",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#json-example",
    "href": "slides/httr2/httr2-responses.html#json-example",
    "title": "Web APIs with R Book Club",
    "section": "JSON Example",
    "text": "JSON Example\n\nresp_json &lt;- req_template(request(example_url()), \"/json\") |&gt;\n  req_perform()\nresp_json |&gt; resp_body_string() |&gt; jsonlite::prettify(indent = 2)\nextracted_json &lt;- resp_body_json(resp_json)\nclass(extracted_json)\nnames(extracted_json)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#xml",
    "href": "slides/httr2/httr2-responses.html#xml",
    "title": "Web APIs with R Book Club",
    "section": "XML",
    "text": "XML\neXtensible Markup Language\n\napplication/xml, text/xml, or */xml)\nTags as &lt;tagname attribute=\"a\"&gt;contents&lt;/tagname&gt;\nEverything nestable\nhttr2::resp_body_xml() uses xml2::read_xml()",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#xml-example",
    "href": "slides/httr2/httr2-responses.html#xml-example",
    "title": "Web APIs with R Book Club",
    "section": "XML Example",
    "text": "XML Example\n\nresp_xml &lt;- req_template(request(example_url()), \"/xml\") |&gt;\n  req_perform()\nresp_xml |&gt; resp_body_string() |&gt; cat()\nextracted_xml &lt;-  resp_body_xml(resp_xml)\nclass(extracted_xml)\n# We'll see other ways to parse this in a later chapter.\nxml2::as_list(extracted_xml) |&gt; names()\nxml2::as_list(extracted_xml)$root |&gt; names()",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#nested-lists-tidyverse",
    "href": "slides/httr2/httr2-responses.html#nested-lists-tidyverse",
    "title": "Web APIs with R Book Club",
    "section": "Nested lists: tidyverse",
    "text": "Nested lists: tidyverse\n\ntibble::enframe() to tibble-ify the list()\ntidyr::unnest_wider() and/or tidyr::unnest_longer()\n\nSometimes tidyr::unnest() but it can hide layers\n\n\n\nlist(root = extracted_json) |&gt; \n  tibble::enframe(name = NULL) |&gt; \n  tidyr::unnest_wider(value)\n\nxml2::as_list(extracted_xml) |&gt; \n  tibble::enframe(name = NULL) |&gt; \n  tidyr::unnest_wider(value)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#nested-lists-tibblify",
    "href": "slides/httr2/httr2-responses.html#nested-lists-tibblify",
    "title": "Web APIs with R Book Club",
    "section": "Nested lists: tibblify",
    "text": "Nested lists: tibblify\n\nlist(root = extracted_json) |&gt; \n  tibblify::tibblify()\n\nxml2::as_list(extracted_xml) |&gt; \n  tibblify::tibblify()",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#response-objects-in-api-docs",
    "href": "slides/httr2/httr2-responses.html#response-objects-in-api-docs",
    "title": "Web APIs with R Book Club",
    "section": "Response objects in API docs",
    "text": "Response objects in API docs\n\nLook for 200 in docs for this path\nFind “OpenAPI” or “Swagger” links (or “API json”, “API yaml”, etc)\n\nEg: Asana\nSearch for the path, then method, then 200 (eg: /tasks:)\nOften a $ref to something like #/components/schemas/TaskCompact\nCtrl-F around that doc!\n\n{anyapi} will soon build a tibblify spec from API spec",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#binary-objects",
    "href": "slides/httr2/httr2-responses.html#binary-objects",
    "title": "Web APIs with R Book Club",
    "section": "Binary objects",
    "text": "Binary objects\n\nimage/* (png, jpeg, svg+xml)\naudio/* (webm, ogg, wav)\nvideo/* (webm, ogg, mp4)\napplication/octet-stream (catch-all)\n\nresp_body_raw(resp) |&gt; writeBin(filename)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-responses.html#meeting-videos",
    "href": "slides/httr2/httr2-responses.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I process API responses?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#should-i-scrape-this-data",
    "href": "slides/httr2/rvest.html#should-i-scrape-this-data",
    "title": "Web APIs with R Book Club",
    "section": "Should I scrape this data?",
    "text": "Should I scrape this data?",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#can-i-legally-scrape-this-data",
    "href": "slides/httr2/rvest.html#can-i-legally-scrape-this-data",
    "title": "Web APIs with R Book Club",
    "section": "Can I legally scrape this data?",
    "text": "Can I legally scrape this data?\n\nPersonal use or nonprofit education = usually ok\nBe careful about personally identifiable information (PII)\nCheck legal disclaimers (but may be over-protective)\nUS:\n\nCan’t copyright facts,\nCAN copyright collections of facts in some cases (creative)\n\nOther places:\n\nSometimes stricter (EU)\nSometimes more lax",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#should-i-scrape-this-data-1",
    "href": "slides/httr2/rvest.html#should-i-scrape-this-data-1",
    "title": "Web APIs with R Book Club",
    "section": "Should I scrape this data?",
    "text": "Should I scrape this data?\nrobots.txt\n\nUser-agent: * = everybody\nSearch for name(s) of package(s)\nSearch for specific pages\nCheck root of site (/) and your particular subfolder\nThese aren’t (necessarily) legally binding",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#do-i-need-to-scrape-this-data",
    "href": "slides/httr2/rvest.html#do-i-need-to-scrape-this-data",
    "title": "Web APIs with R Book Club",
    "section": "Do I need to scrape this data?",
    "text": "Do I need to scrape this data?\n\nTry {datapasta} 📦\n\nRStudio Addins\n\nIf it’s one time & over-complicated, consider other copy/paste strategies\nOnly scrape what you need\nLook for an API!",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#how-can-i-scrape-tables-of-data",
    "href": "slides/httr2/rvest.html#how-can-i-scrape-tables-of-data",
    "title": "Web APIs with R Book Club",
    "section": "How can I scrape tables of data?",
    "text": "How can I scrape tables of data?",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#example-1-single-table",
    "href": "slides/httr2/rvest.html#example-1-single-table",
    "title": "Web APIs with R Book Club",
    "section": "Example 1: Single table",
    "text": "Example 1: Single table\n(screenshot of table on page)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#how-can-i-scrape-a-single-table",
    "href": "slides/httr2/rvest.html#how-can-i-scrape-a-single-table",
    "title": "Web APIs with R Book Club",
    "section": "How can I scrape a single table?",
    "text": "How can I scrape a single table?\n(code demo of scraping a table)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#example-2-multiple-tables",
    "href": "slides/httr2/rvest.html#example-2-multiple-tables",
    "title": "Web APIs with R Book Club",
    "section": "Example 2: Multiple tables",
    "text": "Example 2: Multiple tables\n(screenshot of tables on page)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#how-can-i-choose-a-table",
    "href": "slides/httr2/rvest.html#how-can-i-choose-a-table",
    "title": "Web APIs with R Book Club",
    "section": "How can I choose a table?",
    "text": "How can I choose a table?\n(code demo of scraping one of many tables)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#how-can-i-scrape-multiple-tables",
    "href": "slides/httr2/rvest.html#how-can-i-scrape-multiple-tables",
    "title": "Web APIs with R Book Club",
    "section": "How can I scrape multiple tables?",
    "text": "How can I scrape multiple tables?\n(purrr)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#how-can-i-scrape-more-complex-data",
    "href": "slides/httr2/rvest.html#how-can-i-scrape-more-complex-data",
    "title": "Web APIs with R Book Club",
    "section": "How can I scrape more complex data?",
    "text": "How can I scrape more complex data?",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#what-is-selectorgadget",
    "href": "slides/httr2/rvest.html#what-is-selectorgadget",
    "title": "Web APIs with R Book Club",
    "section": "What is SelectorGadget?",
    "text": "What is SelectorGadget?\n\nADD CONTENTS",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#example-3-non-tabular-data",
    "href": "slides/httr2/rvest.html#example-3-non-tabular-data",
    "title": "Web APIs with R Book Club",
    "section": "Example 3: Non-tabular data",
    "text": "Example 3: Non-tabular data\n(screenshot of page with non-tabular data, possibly CSS selector rules)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#how-can-i-use-selectorgadget",
    "href": "slides/httr2/rvest.html#how-can-i-use-selectorgadget",
    "title": "Web APIs with R Book Club",
    "section": "How can I use SelectorGadget?",
    "text": "How can I use SelectorGadget?\n(record clicks? also show code where it goes)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#what-are-css-selectors",
    "href": "slides/httr2/rvest.html#what-are-css-selectors",
    "title": "Web APIs with R Book Club",
    "section": "What are CSS selectors?",
    "text": "What are CSS selectors?\n\n(I continue to go back and forth about Xpath vs CSS Selectors. Xpath can traverse back up the tree, which I feel might be vital for some advanced examples; but then again maybe CSS :has() will be enough)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#subsection",
    "href": "slides/httr2/rvest.html#subsection",
    "title": "Web APIs with R Book Club",
    "section": "SUBSECTION",
    "text": "SUBSECTION\n\nADD CONTENTS",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#subsection-1",
    "href": "slides/httr2/rvest.html#subsection-1",
    "title": "Web APIs with R Book Club",
    "section": "SUBSECTION",
    "text": "SUBSECTION\n\nADD CONTENTS",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#subsection-2",
    "href": "slides/httr2/rvest.html#subsection-2",
    "title": "Web APIs with R Book Club",
    "section": "SUBSECTION",
    "text": "SUBSECTION\n\nADD CONTENTS",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/rvest.html#meeting-videos",
    "href": "slides/httr2/rvest.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get data from web pages?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#browsing-apis.guru",
    "href": "slides/httr2/apis-start.html#browsing-apis.guru",
    "title": "How can I get started with APIs?",
    "section": "Browsing APIs.guru",
    "text": "Browsing APIs.guru\n(launch APIs.guru to explore)\n\nWarning: No API database is complete! Just because it isn’t here doesn’t mean it doesn’t exist!\nGood if you know what you’re looking for\nLess good for exploration\nBut we can grab the data directly!",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#the-apis.guru-api",
    "href": "slides/httr2/apis-start.html#the-apis.guru-api",
    "title": "How can I get started with APIs?",
    "section": "The APIs.guru API",
    "text": "The APIs.guru API\n\n(launch APIs.guru API page to explore)\n(list.json result)\n\n\n\nJSON = JavaScript Object Notation\nBy far most common format for API data\nI’m using JSONVue browser extension\nGreat for nested data\nWe aren’t going to dig into the format because we won’t use it directly",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#list-all-apis.guru-apis",
    "href": "slides/httr2/apis-start.html#list-all-apis.guru-apis",
    "title": "How can I get started with APIs?",
    "section": "List all APIs.guru APIs",
    "text": "List all APIs.guru APIs\n\n\nall_apis &lt;- jsonlite::fromJSON(\"https://api.apis.guru/v2/list.json\")\n\n\n\n\nlength(all_apis)\n\n#&gt; [1] 2529\n\n\n\n\n\nhead(names(all_apis))\n\n#&gt; [1] \"1forge.com\"                    \"1password.com:events\"         \n#&gt; [3] \"1password.local:connect\"       \"6-dot-authentiqio.appspot.com\"\n#&gt; [5] \"ably.io:platform\"              \"ably.net:control\"\n\n\n\n\n\npurrr::pluck_depth(all_apis)\n\n#&gt; [1] 10\n\n\n\n\n\nstr(head(all_apis, 2), max.level = 2)\n\n#&gt; List of 2\n#&gt;  $ 1forge.com          :List of 3\n#&gt;   ..$ added    : chr \"2017-05-30T08:34:14.000Z\"\n#&gt;   ..$ preferred: chr \"0.0.1\"\n#&gt;   ..$ versions :List of 1\n#&gt;  $ 1password.com:events:List of 3\n#&gt;   ..$ added    : chr \"2021-07-19T10:17:09.188Z\"\n#&gt;   ..$ preferred: chr \"1.0.0\"\n#&gt;   ..$ versions :List of 1\n\n\n\n\n\njsonlite = one of several packages for parsing JSON\n\nWe’ll stick with it because it works & is used by higher-level packages\nUsed in {shiny}, {httr}, {httr2}, dozens of other packages\n\nfromJSON does some automatic guessing, we’ll come back to this in a later chapter\n\nAlternatives: read_json reads file, parse_json reads string; don’t guess by default\n\nThis result is a huge, nested list\npurrr::pluck_depth() tells you how nested a list is\nhard to see this. Let’s rectangle it!",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#unnesting",
    "href": "slides/httr2/apis-start.html#unnesting",
    "title": "How can I get started with APIs?",
    "section": "Unnesting",
    "text": "Unnesting\n\nIs value a list of lists of observations?\n\ntidyr::unnest_longer(value) separates into rows\n\nIs value a list of lists of variables?\n\ntidyr::unnest_wider(value) separates into columns\n\ntidyr::unnest_auto() uses heuristic to choose between those\n\n\n\nTidy data: Every row is a single observation, every column is a single variable.\n“Heuristic” is a fancy word for “set of rules.” I used it here specifically so I can define it and try to demystify it.\nunnest_auto() isn’t perfect.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#how-does-unnest_auto-choose-unnest-direction",
    "href": "slides/httr2/apis-start.html#how-does-unnest_auto-choose-unnest-direction",
    "title": "How can I get started with APIs?",
    "section": "How does unnest_auto() choose unnest direction?",
    "text": "How does unnest_auto() choose unnest direction?\n\n\nelement_names &lt;- purrr::map(df$col, names)\nhas_null &lt;- unique(purrr::map_lgl(element_names, is.null))\nidentical(has_null, TRUE)?\n\nunnest_longer(col, indices_include = FALSE)\n\nidentical(has_null, FALSE)?\n\ncommon_names &lt;- purrr::reduce(element_names, intersect)\nlength(common_names) &gt; 0?\n\nunnest_wider(col)\n\nlength(common_names) == 0?\n\nunnest_longer(col, indices_include = TRUE)\n\n\nLeftovers: unnest_longer(col, indices_include = FALSE)\n\n\n\n\nThis will be a flowchart.\nGet the names of the elements of the column. We’ll use this info for the rest of our decisions.\nCheck whether any elements lack names\n\nAll lack names? Unnest longer.\nAll have names? Check for shared names\n\nShared names? Unnest wider.\nNo shared names? Unnest longer, include indices.\n\nMix of named and unnamd? Unnest longer, drop indices.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-1",
    "href": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-1",
    "title": "How can I get started with APIs?",
    "section": "What does unnest_auto() miss? (1)",
    "text": "What does unnest_auto() miss? (1)\nColumn is a named list (not a list of named lists).\n\nError: Names are lost\nCheck: rlang::is_named(df$col)\nFix: dplyr::mutate(col_name = names(col)) before unnesting.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-2",
    "href": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-2",
    "title": "How can I get started with APIs?",
    "section": "What does unnest_auto() miss? (2)",
    "text": "What does unnest_auto() miss? (2)\nOne or more elements of a list column are empty.\n\nError: Assumes unnest_longer(), even if it’s just some missing values among a column that is obviously otherwise unnest_wider-worthy.\nCheck: any(lengths(df$col) == 0)\nFix: Do the unnest_auto() checks only on values of col that have lengths(col) &gt; 0\n\n\nAn empty item doesn’t have any names.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-3",
    "href": "slides/httr2/apis-start.html#what-does-unnest_auto-miss-3",
    "title": "How can I get started with APIs?",
    "section": "What does unnest_auto() miss? (3)",
    "text": "What does unnest_auto() miss? (3)\nOne or more elements of a list column lacks names, other elements have names.\n\nError: Names are lost.\nCheck: (flowchart already tests this, but makes the wrong decision)\nFix: unnest_longer(col, indices_to = \"descriptive_name\") as fall-through",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#how-should-i-choose-unnest-direction",
    "href": "slides/httr2/apis-start.html#how-should-i-choose-unnest-direction",
    "title": "How can I get started with APIs?",
    "section": "How should I choose unnest direction?",
    "text": "How should I choose unnest direction?\n\n\nrlang::is_named(df$col)?\n\ndplyr::mutate(names_col = names(col), .before = col)\n\nnon_empties &lt;- df$col[lengths(df$col) &gt; 0]\n\nelement_names &lt;- purrr::map(df$col, names)\n\nhas_null &lt;- unique(purrr::map_lgl(element_names, is.null))\nidentical(has_null, TRUE)?\n\nunnest_longer(col, indices_include = FALSE)\n\nidentical(has_null, FALSE)?\n\ncommon_names &lt;- purrr::reduce(element_names, intersect)\nlength(common_names) &gt; 0?\n\nunnest_wider(col)\n\nlength(common_names) == 0?\n\nunnest_longer(col, indices_include = TRUE)\n\n\nLeftovers: unnest_longer(col, indices_to = \"descriptive_name\")\n\n\n\n\nDoes the overall column have names? Avoid losing the names\nGet the names of the non-empty elements of the column. We’ll use this for the rest of our decisions.\n(no change)\n(no change)\n(no change, but see validation)\n\n(no change)\n\nValidate this! Overlapping names could be coincidental (eg, first version is always “v1”, some have additional versions)\n\n\nLeftovers: Mix of named and unnamed elements, or no shared names.\n\nKeep the names when they exist!",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#enframe",
    "href": "slides/httr2/apis-start.html#enframe",
    "title": "How can I get started with APIs?",
    "section": "enframe()",
    "text": "enframe()\n\n\nall_apis_df &lt;- all_apis |&gt;\n  tibble::enframe(name = \"api_name\")\n\n\n\n\nall_apis_df\n\n#&gt; # A tibble: 2,529 × 2\n#&gt;    api_name                      value           \n#&gt;    &lt;chr&gt;                         &lt;list&gt;          \n#&gt;  1 1forge.com                    &lt;named list [3]&gt;\n#&gt;  2 1password.com:events          &lt;named list [3]&gt;\n#&gt;  3 1password.local:connect       &lt;named list [3]&gt;\n#&gt;  4 6-dot-authentiqio.appspot.com &lt;named list [3]&gt;\n#&gt;  5 ably.io:platform              &lt;named list [3]&gt;\n#&gt;  6 ably.net:control              &lt;named list [3]&gt;\n#&gt;  7 abstractapi.com:geolocation   &lt;named list [3]&gt;\n#&gt;  8 adafruit.com                  &lt;named list [3]&gt;\n#&gt;  9 adobe.com:aem                 &lt;named list [3]&gt;\n#&gt; 10 adyen.com:AccountService      &lt;named list [3]&gt;\n#&gt; # ℹ 2,519 more rows\n\n\n\n\n\ntibble::enframe() is underused, imo!\nBest with named lists\nname arg is often useful (if input is named)\n\nIf it isn’t named, set to NULL\n\nvalue arg is available but we’re almost always going to destroy that column\nNeed to figure out whether those values are blocks of results (rows) or separate pieces of information about a single result (columns)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#value-column-unnest-wider-or-longer",
    "href": "slides/httr2/apis-start.html#value-column-unnest-wider-or-longer",
    "title": "How can I get started with APIs?",
    "section": "value column: Unnest wider or longer?",
    "text": "value column: Unnest wider or longer?\n(incorporate flowchart once it exists)\n\n\nrlang::is_named(all_apis_df$value)\n\n#&gt; [1] FALSE\n\n\n\n\n\nnon_empties &lt;- all_apis_df$value[lengths(all_apis_df$value) &gt; 0]\nelement_names &lt;- purrr::map(non_empties, names)\nhas_null &lt;- unique(purrr::map_lgl(element_names, is.null))\n\n\n\n\nhas_null\n\n#&gt; [1] FALSE\n\n\n\n\n\ncommon_names &lt;- purrr::reduce(element_names, intersect)\n\n\n\n\ncommon_names\n\n#&gt; [1] \"added\"     \"preferred\" \"versions\"\n\n\n\n\n\nWider if multiple variables per value, longer if multiple observations per value.\nThe purrr reduce thing checks for names that everything shares (inspired by unnest_auto).\n(make sure everyone groks why wider)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#unnest-values",
    "href": "slides/httr2/apis-start.html#unnest-values",
    "title": "How can I get started with APIs?",
    "section": "Unnest values",
    "text": "Unnest values\n\n\nall_apis_versions &lt;- all_apis_df |&gt;\n  tidyr::unnest_wider(value)\n\n\n\n\nall_apis_versions\n\n#&gt; # A tibble: 2,529 × 4\n#&gt;    api_name                      added                    preferred versions    \n#&gt;    &lt;chr&gt;                         &lt;chr&gt;                    &lt;chr&gt;     &lt;list&gt;      \n#&gt;  1 1forge.com                    2017-05-30T08:34:14.000Z 0.0.1     &lt;named list&gt;\n#&gt;  2 1password.com:events          2021-07-19T10:17:09.188Z 1.0.0     &lt;named list&gt;\n#&gt;  3 1password.local:connect       2021-04-16T15:56:45.939Z 1.5.7     &lt;named list&gt;\n#&gt;  4 6-dot-authentiqio.appspot.com 2017-03-15T14:45:58.000Z 6         &lt;named list&gt;\n#&gt;  5 ably.io:platform              2019-07-13T11:28:07.000Z 1.1.0     &lt;named list&gt;\n#&gt;  6 ably.net:control              2021-07-26T09:45:31.536Z 1.0.14    &lt;named list&gt;\n#&gt;  7 abstractapi.com:geolocation   2021-04-14T17:12:40.648Z 1.0.0     &lt;named list&gt;\n#&gt;  8 adafruit.com                  2018-02-10T10:41:43.000Z 2.0.0     &lt;named list&gt;\n#&gt;  9 adobe.com:aem                 2019-01-03T07:01:34.000Z 3.7.1-pr… &lt;named list&gt;\n#&gt; 10 adyen.com:AccountService      2023-02-17T11:02:20.620Z 6         &lt;named list&gt;\n#&gt; # ℹ 2,519 more rows",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-if-we-went-longer",
    "href": "slides/httr2/apis-start.html#what-if-we-went-longer",
    "title": "How can I get started with APIs?",
    "section": "What if we went longer?",
    "text": "What if we went longer?\n\nall_apis_df |&gt;\n  tidyr::unnest_longer(value)\n\n#&gt; # A tibble: 7,587 × 3\n#&gt;    api_name                      value            value_id \n#&gt;    &lt;chr&gt;                         &lt;named list&gt;     &lt;chr&gt;    \n#&gt;  1 1forge.com                    &lt;chr [1]&gt;        added    \n#&gt;  2 1forge.com                    &lt;chr [1]&gt;        preferred\n#&gt;  3 1forge.com                    &lt;named list [1]&gt; versions \n#&gt;  4 1password.com:events          &lt;chr [1]&gt;        added    \n#&gt;  5 1password.com:events          &lt;chr [1]&gt;        preferred\n#&gt;  6 1password.com:events          &lt;named list [1]&gt; versions \n#&gt;  7 1password.local:connect       &lt;chr [1]&gt;        added    \n#&gt;  8 1password.local:connect       &lt;chr [1]&gt;        preferred\n#&gt;  9 1password.local:connect       &lt;named list [1]&gt; versions \n#&gt; 10 6-dot-authentiqio.appspot.com &lt;chr [1]&gt;        added    \n#&gt; # ℹ 7,577 more rows\n\n\n\n\nThankfully going the wrong way is often obvious.\ntidyr::unnest() creates this same monstrosity",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#choose_unnest_direction",
    "href": "slides/httr2/apis-start.html#choose_unnest_direction",
    "title": "How can I get started with APIs?",
    "section": "choose_unnest_direction()",
    "text": "choose_unnest_direction()\n\n# Based on `tidyr::unnest_auto` and `tidyr:::guess_dir`\nchoose_unnest_direction &lt;- function(df, col) {\n  col &lt;- tidyselect::vars_pull(dplyr::tbl_vars(df), {{col}})\n  col_contents &lt;- df[[col]]\n  code &lt;- character()\n  \n  if (rlang::is_named(col_contents)) {\n    code &lt;- c(\n      code,\n      glue::glue(\n        \"dplyr::mutate(descriptive_name = names({col}), .before = {col})\"\n      )\n    )\n  }\n  \n  non_empties &lt;- col_contents[lengths(col_contents) &gt; 0]\n  \n  element_names &lt;- purrr::map(non_empties, names)\n  has_null &lt;- unique(purrr::map_lgl(element_names, is.null))\n  if (identical(has_null, TRUE)) {\n    code &lt;- c(\n      code, \n      glue::glue(\"tidyr::unnest_longer({col}, indices_include = FALSE)\")\n    )\n    return(glue::glue_collapse(code, sep = \" |&gt;\\n  \"))\n  } else if (identical(has_null, FALSE)) {\n    common_names &lt;- purrr::reduce(element_names, intersect)\n    n_common &lt;- length(common_names)\n    if (n_common &gt; 0) {\n      code &lt;- c(\n        code,\n        glue::glue(\"tidyr::unnest_wider({col})\")\n      )\n      return(glue::glue_collapse(code, sep = \" |&gt;\\n  \"))\n    }\n  }\n  code &lt;- c(\n    code,\n    glue::glue(\"tidyr::unnest_longer({col}, indices_to = \\\"descriptive_name\\\")\")\n  )\n  return(glue::glue_collapse(code, sep = \" |&gt;\\n  \"))\n}\n\n\nThis has some tidyeval, so I’ll probably move it to a package and talk about it or put it online to copy/paste, rather than showing the code here",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#unnest-versions-wider-or-longer",
    "href": "slides/httr2/apis-start.html#unnest-versions-wider-or-longer",
    "title": "How can I get started with APIs?",
    "section": "Unnest versions: Wider or longer?",
    "text": "Unnest versions: Wider or longer?\n\n\nrlang::is_named(all_apis_versions$versions)\n\n#&gt; [1] FALSE\n\n\n\n\n\nnon_empties &lt;- all_apis_versions$versions[lengths(all_apis_versions$versions) &gt; 0]\nelement_names &lt;- purrr::map(non_empties, names)\nhas_null &lt;- unique(purrr::map_lgl(element_names, is.null))\n\n\n\n\nhas_null\n\n#&gt; [1] FALSE\n\n\n\n\n\ncommon_names &lt;- purrr::reduce(element_names, intersect)\n\n\n\n\ncommon_names\n\n#&gt; character(0)\n\n\n\n\n\nchoose_unnest_direction(all_apis_versions, versions)\n\n#&gt; tidyr::unnest_longer(versions, indices_to = \"descriptive_name\")",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#unnest-versions",
    "href": "slides/httr2/apis-start.html#unnest-versions",
    "title": "How can I get started with APIs?",
    "section": "Unnest versions",
    "text": "Unnest versions\n\n\nall_apis_longer &lt;- all_apis_versions |&gt;\n  tidyr::unnest_longer(versions, indices_to = \"version\")\n\n\n\n\nall_apis_longer\n\n#&gt; # A tibble: 3,992 × 5\n#&gt;    api_name                      added            preferred versions     version\n#&gt;    &lt;chr&gt;                         &lt;chr&gt;            &lt;chr&gt;     &lt;named list&gt; &lt;chr&gt;  \n#&gt;  1 1forge.com                    2017-05-30T08:3… 0.0.1     &lt;named list&gt; 0.0.1  \n#&gt;  2 1password.com:events          2021-07-19T10:1… 1.0.0     &lt;named list&gt; 1.0.0  \n#&gt;  3 1password.local:connect       2021-04-16T15:5… 1.5.7     &lt;named list&gt; 1.5.7  \n#&gt;  4 6-dot-authentiqio.appspot.com 2017-03-15T14:4… 6         &lt;named list&gt; 6      \n#&gt;  5 ably.io:platform              2019-07-13T11:2… 1.1.0     &lt;named list&gt; 1.1.0  \n#&gt;  6 ably.net:control              2021-07-26T09:4… 1.0.14    &lt;named list&gt; 1.0.14 \n#&gt;  7 abstractapi.com:geolocation   2021-04-14T17:1… 1.0.0     &lt;named list&gt; 1.0.0  \n#&gt;  8 adafruit.com                  2018-02-10T10:4… 2.0.0     &lt;named list&gt; 2.0.0  \n#&gt;  9 adobe.com:aem                 2019-01-03T07:0… 3.7.1-pr… &lt;named list&gt; 3.7.1-…\n#&gt; 10 adyen.com:AccountService      2023-02-17T11:0… 6         &lt;named list&gt; 3      \n#&gt; # ℹ 3,982 more rows",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#what-if-we-went-wider",
    "href": "slides/httr2/apis-start.html#what-if-we-went-wider",
    "title": "How can I get started with APIs?",
    "section": "What if we went wider?",
    "text": "What if we went wider?\n\nall_apis_versions |&gt; head() |&gt; tidyr::unnest_wider(versions)\n\n#&gt; # A tibble: 6 × 9\n#&gt;   api_name   added preferred `0.0.1`      `1.0.0`      `1.5.7`      `6`         \n#&gt;   &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;     &lt;list&gt;       &lt;list&gt;       &lt;list&gt;       &lt;list&gt;      \n#&gt; 1 1forge.com 2017… 0.0.1     &lt;named list&gt; &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;      \n#&gt; 2 1password… 2021… 1.0.0     &lt;NULL&gt;       &lt;named list&gt; &lt;NULL&gt;       &lt;NULL&gt;      \n#&gt; 3 1password… 2021… 1.5.7     &lt;NULL&gt;       &lt;NULL&gt;       &lt;named list&gt; &lt;NULL&gt;      \n#&gt; 4 6-dot-aut… 2017… 6         &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;       &lt;named list&gt;\n#&gt; 5 ably.io:p… 2019… 1.1.0     &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;      \n#&gt; 6 ably.net:… 2021… 1.0.14    &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;       &lt;NULL&gt;      \n#&gt; # ℹ 2 more variables: `1.1.0` &lt;list&gt;, `1.0.14` &lt;list&gt;\n\n\n\n\nhead() because otherwise we have something like 800 new columns\nNote the NULLs",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#preferred-versions",
    "href": "slides/httr2/apis-start.html#preferred-versions",
    "title": "How can I get started with APIs?",
    "section": "Preferred versions",
    "text": "Preferred versions\n\n\nall_apis_preferred &lt;- all_apis_longer |&gt;\n  dplyr::filter(preferred == version) |&gt;\n  dplyr::select(api_name, version, versions)\n\n\n\n\nall_apis_preferred\n\n#&gt; # A tibble: 2,529 × 3\n#&gt;    api_name                      version     versions        \n#&gt;    &lt;chr&gt;                         &lt;chr&gt;       &lt;named list&gt;    \n#&gt;  1 1forge.com                    0.0.1       &lt;named list [7]&gt;\n#&gt;  2 1password.com:events          1.0.0       &lt;named list [7]&gt;\n#&gt;  3 1password.local:connect       1.5.7       &lt;named list [7]&gt;\n#&gt;  4 6-dot-authentiqio.appspot.com 6           &lt;named list [7]&gt;\n#&gt;  5 ably.io:platform              1.1.0       &lt;named list [7]&gt;\n#&gt;  6 ably.net:control              1.0.14      &lt;named list [7]&gt;\n#&gt;  7 abstractapi.com:geolocation   1.0.0       &lt;named list [8]&gt;\n#&gt;  8 adafruit.com                  2.0.0       &lt;named list [7]&gt;\n#&gt;  9 adobe.com:aem                 3.7.1-pre.0 &lt;named list [7]&gt;\n#&gt; 10 adyen.com:AccountService      6           &lt;named list [7]&gt;\n#&gt; # ℹ 2,519 more rows",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#preferred-versions-wider-or-longer",
    "href": "slides/httr2/apis-start.html#preferred-versions-wider-or-longer",
    "title": "How can I get started with APIs?",
    "section": "Preferred versions: Wider or longer?",
    "text": "Preferred versions: Wider or longer?\n\n\nchoose_unnest_direction(all_apis_preferred, versions)\n\n#&gt; dplyr::mutate(descriptive_name = names(versions), .before = versions) |&gt;\n#&gt;   tidyr::unnest_wider(versions)\n\n\n\n\n\nhead(names(all_apis_preferred$versions))\n\n#&gt; [1] \"0.0.1\"  \"1.0.0\"  \"1.5.7\"  \"6\"      \"1.1.0\"  \"1.0.14\"\n\n\n\n\n\nall_apis_preferred_wide &lt;- all_apis_preferred |&gt;\n  tidyr::unnest_wider(versions)\n\n\n\n\nWe already dealt with these names, don’t need the mutate.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#preferred-versions-unnested",
    "href": "slides/httr2/apis-start.html#preferred-versions-unnested",
    "title": "How can I get started with APIs?",
    "section": "Preferred versions unnested",
    "text": "Preferred versions unnested\n\nall_apis_preferred_wide\n\n#&gt; # A tibble: 2,529 × 10\n#&gt;    api_name         version added info         updated swaggerUrl swaggerYamlUrl\n#&gt;    &lt;chr&gt;            &lt;chr&gt;   &lt;chr&gt; &lt;list&gt;       &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;         \n#&gt;  1 1forge.com       0.0.1   2017… &lt;named list&gt; 2017-0… https://a… https://api.a…\n#&gt;  2 1password.com:e… 1.0.0   2021… &lt;named list&gt; 2023-0… https://a… https://api.a…\n#&gt;  3 1password.local… 1.5.7   2021… &lt;named list&gt; 2023-0… https://a… https://api.a…\n#&gt;  4 6-dot-authentiq… 6       2017… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  5 ably.io:platform 1.1.0   2019… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  6 ably.net:control 1.0.14  2021… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  7 abstractapi.com… 1.0.0   2021… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  8 adafruit.com     2.0.0   2018… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  9 adobe.com:aem    3.7.1-… 2019… &lt;named list&gt; 2023-0… https://a… https://api.a…\n#&gt; 10 adyen.com:Accou… 6       2023… &lt;named list&gt; 2023-0… https://a… https://api.a…\n#&gt; # ℹ 2,519 more rows\n#&gt; # ℹ 3 more variables: openapiVer &lt;chr&gt;, link &lt;chr&gt;, externalDocs &lt;list&gt;",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#preferred-versions-glimpse",
    "href": "slides/httr2/apis-start.html#preferred-versions-glimpse",
    "title": "How can I get started with APIs?",
    "section": "Preferred versions glimpse",
    "text": "Preferred versions glimpse\n\ndplyr::glimpse(all_apis_preferred_wide)\n\n#&gt; Rows: 2,529\n#&gt; Columns: 10\n#&gt; $ api_name       &lt;chr&gt; \"1forge.com\", \"1password.com:events\", \"1password.local:…\n#&gt; $ version        &lt;chr&gt; \"0.0.1\", \"1.0.0\", \"1.5.7\", \"6\", \"1.1.0\", \"1.0.14\", \"1.0…\n#&gt; $ added          &lt;chr&gt; \"2017-05-30T08:34:14.000Z\", \"2021-07-19T10:17:09.188Z\",…\n#&gt; $ info           &lt;list&gt; [[\"contact@1forge.com\", \"1Forge\", \"http://1forge.com\"]…\n#&gt; $ updated        &lt;chr&gt; \"2017-06-27T16:49:57.000Z\", \"2023-02-27T15:08:09.418Z\",…\n#&gt; $ swaggerUrl     &lt;chr&gt; \"https://api.apis.guru/v2/specs/1forge.com/0.0.1/swagge…\n#&gt; $ swaggerYamlUrl &lt;chr&gt; \"https://api.apis.guru/v2/specs/1forge.com/0.0.1/swagge…\n#&gt; $ openapiVer     &lt;chr&gt; \"2.0\", \"3.0.0\", \"3.0.2\", \"3.0.0\", \"3.0.1\", \"3.0.1\", \"3.…\n#&gt; $ link           &lt;chr&gt; \"https://api.apis.guru/v2/specs/1forge.com/0.0.1.json\",…\n#&gt; $ externalDocs   &lt;list&gt; &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, &lt;NULL&gt;, [\"API …",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#info-wider-or-longer",
    "href": "slides/httr2/apis-start.html#info-wider-or-longer",
    "title": "How can I get started with APIs?",
    "section": "info: wider or longer?",
    "text": "info: wider or longer?\n\nchoose_unnest_direction(all_apis_preferred_wide, info)\n\n#&gt; tidyr::unnest_wider(info)\n\nall_apis_preferred_wide |&gt; \n  tidyr::unnest_wider(info, names_sep = \"_\")\n\n#&gt; # A tibble: 2,529 × 76\n#&gt;    api_name  version added info_contact info_description info_title info_version\n#&gt;    &lt;chr&gt;     &lt;chr&gt;   &lt;chr&gt; &lt;list&gt;       &lt;chr&gt;            &lt;chr&gt;      &lt;chr&gt;       \n#&gt;  1 1forge.c… 0.0.1   2017… &lt;named list&gt; \"Stock and Fore… 1Forge Fi… 0.0.1       \n#&gt;  2 1passwor… 1.0.0   2021… &lt;NULL&gt;       \"1Password Even… Events API 1.0.0       \n#&gt;  3 1passwor… 1.5.7   2021… &lt;named list&gt; \"REST API inter… 1Password… 1.5.7       \n#&gt;  4 6-dot-au… 6       2017… &lt;named list&gt; \"Strong authent… Authentiq… 6           \n#&gt;  5 ably.io:… 1.1.0   2019… &lt;named list&gt; \"The [REST API … Platform … 1.1.0       \n#&gt;  6 ably.net… 1.0.14  2021… &lt;named list&gt; \"Use the Contro… Control A… 1.0.14      \n#&gt;  7 abstract… 1.0.0   2021… &lt;NULL&gt;       \"Abstract IP ge… IP geoloc… 1.0.0       \n#&gt;  8 adafruit… 2.0.0   2018… &lt;NULL&gt;       \"### The Intern… Adafruit … 2.0.0       \n#&gt;  9 adobe.co… 3.7.1-… 2019… &lt;named list&gt; \"Swagger AEM is… Adobe Exp… 3.7.1-pre.0 \n#&gt; 10 adyen.co… 6       2023… &lt;named list&gt; \"This API is us… Account A… 6           \n#&gt; # ℹ 2,519 more rows\n#&gt; # ℹ 69 more variables: `info_x-apisguru-categories` &lt;list&gt;,\n#&gt; #   `info_x-logo` &lt;list&gt;, `info_x-origin` &lt;list&gt;, `info_x-providerName` &lt;chr&gt;,\n#&gt; #   `info_x-serviceName` &lt;chr&gt;, info_license &lt;list&gt;, info_termsOfService &lt;chr&gt;,\n#&gt; #   `info_x-unofficialSpec` &lt;lgl&gt;, `info_x-preferred` &lt;lgl&gt;,\n#&gt; #   `info_x-publicVersion` &lt;lgl&gt;, `info_x-timestamp` &lt;chr&gt;,\n#&gt; #   `info_x-description-language` &lt;chr&gt;, `info_x-release-note` &lt;list&gt;, …\n\n\n\n\nnames_sep avoids name overlap & shows us all the things that came from info\nNotice that it went from 10 columns to 76.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#info-hoist",
    "href": "slides/httr2/apis-start.html#info-hoist",
    "title": "How can I get started with APIs?",
    "section": "info: hoist()",
    "text": "info: hoist()\n\n\nall_preferred_apis_with_categories &lt;- all_apis_preferred_wide |&gt;\n  tidyr::hoist(info, categories = \"x-apisguru-categories\")\n\n\n\n\nall_preferred_apis_with_categories\n\n#&gt; # A tibble: 2,529 × 11\n#&gt;    api_name             version added categories info         updated swaggerUrl\n#&gt;    &lt;chr&gt;                &lt;chr&gt;   &lt;chr&gt; &lt;list&gt;     &lt;list&gt;       &lt;chr&gt;   &lt;chr&gt;     \n#&gt;  1 1forge.com           0.0.1   2017… &lt;chr [1]&gt;  &lt;named list&gt; 2017-0… https://a…\n#&gt;  2 1password.com:events 1.0.0   2021… &lt;chr [1]&gt;  &lt;named list&gt; 2023-0… https://a…\n#&gt;  3 1password.local:con… 1.5.7   2021… &lt;chr [1]&gt;  &lt;named list&gt; 2023-0… https://a…\n#&gt;  4 6-dot-authentiqio.a… 6       2017… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  5 ably.io:platform     1.1.0   2019… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  6 ably.net:control     1.0.14  2021… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  7 abstractapi.com:geo… 1.0.0   2021… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  8 adafruit.com         2.0.0   2018… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  9 adobe.com:aem        3.7.1-… 2019… &lt;chr [1]&gt;  &lt;named list&gt; 2023-0… https://a…\n#&gt; 10 adyen.com:AccountSe… 6       2023… &lt;chr [1]&gt;  &lt;named list&gt; 2023-0… https://a…\n#&gt; # ℹ 2,519 more rows\n#&gt; # ℹ 4 more variables: swaggerYamlUrl &lt;chr&gt;, openapiVer &lt;chr&gt;, link &lt;chr&gt;,\n#&gt; #   externalDocs &lt;list&gt;",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#unnest_auto",
    "href": "slides/httr2/apis-start.html#unnest_auto",
    "title": "How can I get started with APIs?",
    "section": "unnest_auto()",
    "text": "unnest_auto()\n\n\nall_apis |&gt; \n  tibble::enframe(name = \"api_name\") |&gt; \n  tidyr::unnest_auto(value) |&gt; \n  tidyr::unnest_auto(versions) |&gt;\n  dplyr::filter(preferred == versions_id) |&gt;\n  dplyr::select(api_name, versions_id, versions) |&gt;\n  tidyr::unnest_auto(versions)\n\n#&gt; # A tibble: 2,529 × 10\n#&gt;    api_name     versions_id added info         updated swaggerUrl swaggerYamlUrl\n#&gt;    &lt;chr&gt;        &lt;chr&gt;       &lt;chr&gt; &lt;list&gt;       &lt;chr&gt;   &lt;chr&gt;      &lt;chr&gt;         \n#&gt;  1 1forge.com   0.0.1       2017… &lt;named list&gt; 2017-0… https://a… https://api.a…\n#&gt;  2 1password.c… 1.0.0       2021… &lt;named list&gt; 2023-0… https://a… https://api.a…\n#&gt;  3 1password.l… 1.5.7       2021… &lt;named list&gt; 2023-0… https://a… https://api.a…\n#&gt;  4 6-dot-authe… 6           2017… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  5 ably.io:pla… 1.1.0       2019… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  6 ably.net:co… 1.0.14      2021… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  7 abstractapi… 1.0.0       2021… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  8 adafruit.com 2.0.0       2018… &lt;named list&gt; 2021-0… https://a… https://api.a…\n#&gt;  9 adobe.com:a… 3.7.1-pre.0 2019… &lt;named list&gt; 2023-0… https://a… https://api.a…\n#&gt; 10 adyen.com:A… 6           2023… &lt;named list&gt; 2023-0… https://a… https://api.a…\n#&gt; # ℹ 2,519 more rows\n#&gt; # ℹ 3 more variables: openapiVer &lt;chr&gt;, link &lt;chr&gt;, externalDocs &lt;list&gt;\n\n\n\n\n\nunnest_auto() does fine here",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-start.html#filter-apis",
    "href": "slides/httr2/apis-start.html#filter-apis",
    "title": "How can I get started with APIs?",
    "section": "Filter APIs",
    "text": "Filter APIs\n\nall_apis_preferred_wide |&gt;\n  tidyr::hoist(info, categories = \"x-apisguru-categories\") |&gt;\n  dplyr::rowwise() |&gt;\n  dplyr::filter(\"open_data\" %in% categories) |&gt;\n  dplyr::ungroup()\n\n#&gt; # A tibble: 318 × 11\n#&gt;    api_name             version added categories info         updated swaggerUrl\n#&gt;    &lt;chr&gt;                &lt;chr&gt;   &lt;chr&gt; &lt;list&gt;     &lt;list&gt;       &lt;chr&gt;   &lt;chr&gt;     \n#&gt;  1 amentum.space:aviat… 1.5.0   2021… &lt;chr [2]&gt;  &lt;named list&gt; 2023-0… https://a…\n#&gt;  2 amentum.space:gravi… 1.1.1   2021… &lt;chr [2]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  3 amentum.space:space… 1.1.2   2021… &lt;chr [2]&gt;  &lt;named list&gt; 2023-0… https://a…\n#&gt;  4 api.gov.uk:vehicle-… 1.1.0   2020… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  5 apis.guru            2.2.0   2015… &lt;chr [2]&gt;  &lt;named list&gt; 2023-0… https://a…\n#&gt;  6 apisetu.gov.in:aaha… 3.0.0   2021… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  7 apisetu.gov.in:acko  3.0.0   2021… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  8 apisetu.gov.in:agtr… 3.0.0   2021… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt;  9 apisetu.gov.in:ahar… 3.0.0   2021… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt; 10 apisetu.gov.in:aiim… 3.0.0   2021… &lt;chr [1]&gt;  &lt;named list&gt; 2021-0… https://a…\n#&gt; # ℹ 308 more rows\n#&gt; # ℹ 4 more variables: swaggerYamlUrl &lt;chr&gt;, openapiVer &lt;chr&gt;, link &lt;chr&gt;,\n#&gt; #   externalDocs &lt;list&gt;\n\n\n\n\nCould also unnest_longer and filter for “open_data”\nswaggerUrl is JSON, swaggerYamlUrl is YAML version of the same thing\nYAML is another data format. Technically YAML is a superset of JSON, with added commenting capabilities.\nRMarkdown headers + package descriptions are YAML-related.\nWe’ll see more about YAML and find out what “Swagger” means in the next chapter!",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get started with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-packages.html#general-tips-for-searching",
    "href": "slides/httr2/apis-packages.html#general-tips-for-searching",
    "title": "Web APIs with R Book Club",
    "section": "General tips for searching",
    "text": "General tips for searching\n\ntolower(FIELD) to find “API”, “api”, “Api”, etc\n\\\\b in regex pattern for “word boundary”\n\n\"\\\\bapi\\\\b\" = “api surrounded by spaces, (), newline, etc”",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I find API-wrapping packages?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-packages.html#searching-cran-packages",
    "href": "slides/httr2/apis-packages.html#searching-cran-packages",
    "title": "Web APIs with R Book Club",
    "section": "Searching CRAN packages",
    "text": "Searching CRAN packages\n\n# TODO: Re-enable this when CRAN isn't down.\napi_pkgs &lt;- tools::CRAN_package_db() |&gt; \n  as_tibble() |&gt; \n  filter(str_detect(tolower(Description), \"\\\\bapi\\\\b\")) |&gt; \n  select(Package, Description)\nnrow(api_pkgs)\nhead(api_pkgs)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I find API-wrapping packages?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-packages.html#searching-the-r-universe",
    "href": "slides/httr2/apis-packages.html#searching-the-r-universe",
    "title": "Web APIs with R Book Club",
    "section": "Searching the R Universe",
    "text": "Searching the R Universe\n\nWeb interface at https://r-universe.dev/\nAPI in {universe} package? (broken as of 2023-11-13)\nAPI at https://r-universe.dev/stats/powersearch",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I find API-wrapping packages?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-packages.html#searching-the-r-universe-api",
    "href": "slides/httr2/apis-packages.html#searching-the-r-universe-api",
    "title": "Web APIs with R Book Club",
    "section": "Searching the R Universe API",
    "text": "Searching the R Universe API\n\nresp &lt;- request(\"https://r-universe.dev\") |&gt; \n  req_url_path_append(\"stats/powersearch\") |&gt;\n  req_url_query(q = \"api\") |&gt; \n  req_perform() |&gt; \n  resp_body_json()\n\nuni_api_pkgs &lt;- tibble(pkg = resp$results) |&gt; \n  unnest_wider(pkg) |&gt; \n  filter(str_detect(tolower(Description), \"\\\\bapi\\\\b\")) |&gt; \n  distinct(Package, Description)\n\nnrow(uni_api_pkgs)\nhead(uni_api_pkgs)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I find API-wrapping packages?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-packages.html#anyapi",
    "href": "slides/httr2/apis-packages.html#anyapi",
    "title": "Web APIs with R Book Club",
    "section": "anyapi",
    "text": "anyapi\n\n{anyapi} package wraps these functions\n\n(technically not yet)\n\nIf package doesn’t exist\n\nSearch for API spec\nCreate package on-the-fly to interact with the API",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I find API-wrapping packages?"
    ]
  },
  {
    "objectID": "slides/httr2/apis-packages.html#meeting-videos",
    "href": "slides/httr2/apis-packages.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I find API-wrapping packages?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#plumbers-default-error-handling",
    "href": "slides/plumber/plumber-errors.html#plumbers-default-error-handling",
    "title": "Web APIs with R Book Club",
    "section": "Plumber’s default error handling",
    "text": "Plumber’s default error handling\n\n#* @get /simple\nfunction(){\n  stop(\"I'm an error!\")\n}\n\n#&gt; {\"error\":[\"500 - Internal server error\"],\"message\":[\"Error in (function () : \n#&gt; I'm an error!\\n\"]}\n\n\nHTTP status code 500 for all errors\nError sent to client\nError also printed in terminal",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I handle API errors?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#custom-error-handling-basics",
    "href": "slides/plumber/plumber-errors.html#custom-error-handling-basics",
    "title": "Web APIs with R Book Club",
    "section": "Custom error handling: basics",
    "text": "Custom error handling: basics\n\nmy_error_handler &lt;- function(req, res, err) {\n  res$status &lt;- 500 # Or something else, see below.\n  \n  # Do something server-side (logs)\n  print(err)\n  \n  # Return an error JSON object.\n  list(error = \"An error occurred. Please contact your administrator.\")\n}\n\npr(\"plumber.R\") |&gt; \n  pr_set_error(my_error_handler) |&gt; \n  pr_run()",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I handle API errors?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#logging-strategies",
    "href": "slides/plumber/plumber-errors.html#logging-strategies",
    "title": "Web APIs with R Book Club",
    "section": "Logging strategies",
    "text": "Logging strategies\n\nprint() for function output\ncat() for messages\ncli::cli_inform() for formatted messages\n{log4r} package for neater logs\nSee DevOps for Data Science: Logging and Monitoring for more",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I handle API errors?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#error-responses",
    "href": "slides/plumber/plumber-errors.html#error-responses",
    "title": "Web APIs with R Book Club",
    "section": "Error responses",
    "text": "Error responses\nAPI errors are still responses\n\nStatus code specifies broad error category (see next slide)\n\n400 to 499 = Client errors (user did something wrong)\n500 to 599 = Server errors (something is broken)\nReminder: By default, {plumber} uses 500\n\nBest practice: Error format same as successful response\n\nBe careful about this, don’t make silent errors easy!\n\nNeed plumber::pr_handle() family for advanced options",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I handle API errors?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#http-error-status-codes",
    "href": "slides/plumber/plumber-errors.html#http-error-status-codes",
    "title": "Web APIs with R Book Club",
    "section": "HTTP error status codes",
    "text": "HTTP error status codes\n\n\n\ncode\ntitle\nusage\n\n\n\n\n400\nBad Request\nMissing or bad argument, etc\n\n\n401\nUnauthorized\nNo or invalid authentication\n\n\n403\nForbidden\nKnown user can’t do that\n\n\n404\nNot Found\npath arg doesn’t exist\n\n\n502\nBad Gateway\nYour api hits another api, got error\n\n\n504\nGateway Timeout\nYour api hits another api, timed out\n\n\n500\nInternal Server Error\nCatch-all for other errors\n\n\n\nSee MDN HTTP response status codes for more options and further details",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I handle API errors?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#error-descriptions-in-plumber-block",
    "href": "slides/plumber/plumber-errors.html#error-descriptions-in-plumber-block",
    "title": "Web APIs with R Book Club",
    "section": "Error descriptions in plumber block",
    "text": "Error descriptions in plumber block\n\n#* @response 400 Bad request. This usually occurs because of a missing or \n#*   malformed parameter.\n#* @response 401 Unauthorized. A valid API token was not provided.\n#* @response 403 Forbidden. This user cannot access that file.\n\n\n@response Status Code Description\nCan only give description (not object details)\nThis is a promise, but isn’t validated by {plumber}",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I handle API errors?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#recommended-error_handler",
    "href": "slides/plumber/plumber-errors.html#recommended-error_handler",
    "title": "Web APIs with R Book Club",
    "section": "Recommended error_handler",
    "text": "Recommended error_handler\n\n# TODO: Finish working this out!\nerror_handler &lt;- function(req, res, err) {\n  res$status &lt;- attr(err, \"status_code\") %||% 500L\n  \n  # TODO: Better understanding of log4r or another option.\n  do_the_log_thing(err)\n\n  # Skip serialization to always return JSON  \n  res$headers &lt;- list(\"Content-type\" = \"application/json\")\n  res$body &lt;- jsonlite::toJSON(unclass(err))\n  return(res) \n}",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I handle API errors?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#programmatic-responses",
    "href": "slides/plumber/plumber-errors.html#programmatic-responses",
    "title": "Web APIs with R Book Club",
    "section": "Programmatic responses",
    "text": "Programmatic responses\nTODO: Adapt/finish this slide. And probably add one more about the internal error handling in plumber.R.\n\nCan specify full OpenAPI Response Object programmatically\nImpacts auto-generated Swagger documentation\nNot well documented (outside of this book)\n\n\npr_get(\n  \"/pathToEndpoint\", function(res, req) { ... },\n  responses = list(\n    \"403\" = list(\n      description = \"Forbidden\",\n      content = list(\"application/json\" = list())\n    )\n  )\n)",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I handle API errors?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-errors.html#meeting-videos",
    "href": "slides/plumber/plumber-errors.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I handle API errors?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#pure-functions",
    "href": "slides/plumber/plumber-test.html#pure-functions",
    "title": "Web APIs with R Book Club",
    "section": "Pure Functions",
    "text": "Pure Functions\n\nNo hidden inputs\nNo side effects\nGiven inputs, always return same output.\n\nAbstract pure functions out of endpoint functions for easier testing.",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#example-example-name",
    "href": "slides/plumber/plumber-test.html#example-example-name",
    "title": "Web APIs with R Book Club",
    "section": "Example: EXAMPLE NAME",
    "text": "Example: EXAMPLE NAME\nTODO: Create a simple API. First show as one function, then abstract out pure functions.",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#plumber-apis-as-packages",
    "href": "slides/plumber/plumber-test.html#plumber-apis-as-packages",
    "title": "Web APIs with R Book Club",
    "section": "plumber APIs as packages",
    "text": "plumber APIs as packages\n\nR Packages book for intro to R packages\nFunctions in R/\nAPIs in inst/plumber/API_NAME/\n\nRecommended: Use entrypoint.R to build router programmatically\n\nLaunch with plumber::plumb_api(\"yourpkg\", \"API_NAME\")",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#brief-intro-to-testthat",
    "href": "slides/plumber/plumber-test.html#brief-intro-to-testthat",
    "title": "Web APIs with R Book Club",
    "section": "Brief Intro to testthat",
    "text": "Brief Intro to testthat\nMuch more in R Packages!\n\nusethis::use_testthat() in package\nTests in tests/testthat/test-filename.R\ntest_that(\"What you expected\", { code to test that })\nPure functions are relatively easy to test!",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#example-example-from-above-in-a-package",
    "href": "slides/plumber/plumber-test.html#example-example-from-above-in-a-package",
    "title": "Web APIs with R Book Club",
    "section": "Example: EXAMPLE FROM ABOVE IN A PACKAGE",
    "text": "Example: EXAMPLE FROM ABOVE IN A PACKAGE\nTODO: Fill this in, describing where the bits from above go inside a package.",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#req-helper",
    "href": "slides/plumber/plumber-test.html#req-helper",
    "title": "Web APIs with R Book Club",
    "section": "req helper",
    "text": "req helper\n\n# tests/testthat/helper-req.R\nas_mock_req &lt;- function(...,\n                        body = list(), \n                        path = list(), \n                        query = list(),\n                        cookies = list()) {\n  list2env(c(\n    list(...), \n    argsBody = body, argsPath = path, argsQuery = query,  cookies = cookies\n  ))\n}",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#testing-api-specific-functions",
    "href": "slides/plumber/plumber-test.html#testing-api-specific-functions",
    "title": "Web APIs with R Book Club",
    "section": "Testing API-specific functions",
    "text": "Testing API-specific functions\nTODO: FILL THIS IN WITH SPECIFICS\n\ntest_that(\"THE THING WORKS\", {\n  req &lt;- as_mock_req(body = list(whatever = 1))\n  expect_equal(function_to_test(req), expected_result)\n})",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#local_api",
    "href": "slides/plumber/plumber-test.html#local_api",
    "title": "Web APIs with R Book Club",
    "section": "local_api()",
    "text": "local_api()\n\n# tests/testthat/helper-plumber.R\npr_run_bg &lt;- function(pr, port) {\n  callr::r_bg(\n    plumber::pr_run,\n    list(pr = pr, port = port),\n    package = \"plumber\"\n  )\n}\nlocal_api &lt;- function(pr, port, env = parent.frame()) {\n  bg_api &lt;- pr_run_bg(pr, port)\n  # Sys.sleep(2) # TODO: Test whether this is necessary!\n  withr::defer(bg_api$kill(), envir = env)\n}\nreq_local_api &lt;- function(endpoint, port) {\n  httr2::request(glue::glue(\"http://127.0.0.1:{port}\")) |&gt; \n    httr2::req_url_path_append(endpoint)\n}",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#testing-plumber-routers",
    "href": "slides/plumber/plumber-test.html#testing-plumber-routers",
    "title": "Web APIs with R Book Club",
    "section": "Testing plumber routers",
    "text": "Testing plumber routers\nUse these for auth, errors, etc\n\n# test/testthat/test-router.R\ntest_that(\"My router does an expected thing\", {\n  api &lt;- plumber::plumb_api(\"mypackage\", \"target_api\")\n  port &lt;- httpuv::randomPort()\n  local_api(api, port)\n  # TODO: Update this with auth failure.\n  req &lt;- req_local_api(\"predict/x\", port)\n  expect_error(\n    httr2::req_perform(req),\n    class = \"mypkg_error_auth\"\n  )\n})",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#random-notes",
    "href": "slides/plumber/plumber-test.html#random-notes",
    "title": "Web APIs with R Book Club",
    "section": "random notes",
    "text": "random notes\nInclude ideas from these plumber articles:\n\nRuntime\n\nJumpingRivers had a blog about this!",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-test.html#meeting-videos",
    "href": "slides/plumber/plumber-test.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I test my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#plumber-quickstart",
    "href": "slides/plumber/plumber-intro.html#plumber-quickstart",
    "title": "Web APIs with R Book Club",
    "section": "plumber quickstart",
    "text": "plumber quickstart\n\nDefine API endpoints in an R script.\nLaunch that API locally.\nLater chapter(s): Deploy that API somewhere else.",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#echo-endpoint-function",
    "href": "slides/plumber/plumber-intro.html#echo-endpoint-function",
    "title": "Web APIs with R Book Club",
    "section": "echo endpoint: function",
    "text": "echo endpoint: function\n\necho &lt;- function(msg = \"\") {\n  list(msg = paste0(\"The message is: '\", msg, \"'\"))\n}\n\necho(\"my message\")\n\n#&gt; $msg\n#&gt; [1] \"The message is: 'my message'\"",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#echo-endpoint-plumber",
    "href": "slides/plumber/plumber-intro.html#echo-endpoint-plumber",
    "title": "Web APIs with R Book Club",
    "section": "echo endpoint: plumber",
    "text": "echo endpoint: plumber\n\n#* Echo back the input parameter\n#* @param msg The message to echo back.\n#* @get /echo\nfunction(msg = \"\") {\n  list(msg = paste0(\"The message is: '\", msg, \"'\"))\n}",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#echo-endpoint-plumber-alternate",
    "href": "slides/plumber/plumber-intro.html#echo-endpoint-plumber-alternate",
    "title": "Web APIs with R Book Club",
    "section": "echo endpoint: plumber (alternate)",
    "text": "echo endpoint: plumber (alternate)\n\n#* Echo back the input parameter\n#* @param msg The message to echo back.\n#* @get /echo\necho &lt;- function(msg = \"\") {\n  list(msg = paste0(\"The message is: '\", msg, \"'\"))\n}\n\nor\n\n#* Echo back the input parameter\n#* @param msg The message to echo back.\n#* @get /echo\necho # Defined elsewhere",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#echo-endpoint-in-action",
    "href": "slides/plumber/plumber-intro.html#echo-endpoint-in-action",
    "title": "Web APIs with R Book Club",
    "section": "echo endpoint in action",
    "text": "echo endpoint in action",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#plot-endpoint",
    "href": "slides/plumber/plumber-intro.html#plot-endpoint",
    "title": "Web APIs with R Book Club",
    "section": "plot endpoint",
    "text": "plot endpoint\n\n#* Plot out data from the iris dataset\n#* @param spec If provided, filter the data to only this species (e.g. 'setosa')\n#* @get /plot\n#* @serializer png\nfunction(spec) {\n  myData &lt;- iris\n  title &lt;- \"All Species\"\n\n  # Filter if the species was specified\n  if (!missing(spec)){\n    title &lt;- paste0(\"Only the '\", spec, \"' Species\")\n    myData &lt;- subset(iris, Species == spec)\n  }\n\n  plot(myData$Sepal.Length, myData$Petal.Length,\n       main=title, xlab=\"Sepal Length\", ylab=\"Petal Length\")\n}",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#plot-endpoint-in-action",
    "href": "slides/plumber/plumber-intro.html#plot-endpoint-in-action",
    "title": "Web APIs with R Book Club",
    "section": "plot endpoint in action",
    "text": "plot endpoint in action",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#launch-the-api",
    "href": "slides/plumber/plumber-intro.html#launch-the-api",
    "title": "Web APIs with R Book Club",
    "section": "Launch the API",
    "text": "Launch the API\n\napi &lt;- pr(\"plumber.R\")\napi &lt;- pr() |&gt; pr_post({definition}) |&gt; etc()\napi &lt;- plumb(dir = \"path/to/definition\")\n\nLooks for entrypoint.R, else plumber.R\n\n\nIn any case: pr_run(api) to run locally.",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#organize-plumber-projects",
    "href": "slides/plumber/plumber-intro.html#organize-plumber-projects",
    "title": "Web APIs with R Book Club",
    "section": "Organize plumber projects",
    "text": "Organize plumber projects\n\nNon-Package:\n\nplumber.R = “main” file\n\nCan source() any other files, but\n#* defs must be in main file\n\nAlternative: entrypoint.R file to construct api programmatically\n\nPackage:\n\ninst/plumber/{API_DIR_NAME}/plumber.R\n\nSame rules as above, but filenames matter more\nLeast surprise = use entrypoint.R\n\nplumb_api(package = \"{pkg}\", name = \"{API_DIR_NAME}\")\navailable_apis(package = \"{pkg}\")",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#nest-plumber-apis",
    "href": "slides/plumber/plumber-intro.html#nest-plumber-apis",
    "title": "Web APIs with R Book Club",
    "section": "Nest plumber APIs",
    "text": "Nest plumber APIs\n\n# Define in entrypoint.R\n\nusers &lt;- pr(\"users.R\")\nproducts &lt;- pr(\"products.R\")\n\npr |&gt; \n  pr_mount(\"/users\", users) |&gt; \n  pr_mount(\"/products\", products)",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#design-a-restful-api",
    "href": "slides/plumber/plumber-intro.html#design-a-restful-api",
    "title": "Web APIs with R Book Club",
    "section": "Design a RESTful API",
    "text": "Design a RESTful API\n\nEndpoints = nouns\n\nSubpaths = particular individual\n\n/tasks = all tasks, vs\n/tasks/1234 = task ID 1234\n\n\nMethods define action\n\nGET = fetch\nPOST = create\nPUT = replace\nPATCH = modify\nDELETE = remove",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#more-on-designing-apis",
    "href": "slides/plumber/plumber-intro.html#more-on-designing-apis",
    "title": "Web APIs with R Book Club",
    "section": "More on designing APIs",
    "text": "More on designing APIs\n\nMany books on just this\n\nDesigning APIs with Swagger and OpenAPI by Joshua S. Ponelat & Lukas L. Rosenstock\n(more suggestions to come)",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#implementing-apis-in-plumber",
    "href": "slides/plumber/plumber-intro.html#implementing-apis-in-plumber",
    "title": "Web APIs with R Book Club",
    "section": "Implementing APIs in plumber",
    "text": "Implementing APIs in plumber\n\nGenerally think of each method as a separate thing\n#* @get /tasks totally separate block from #* @post /tasks\nCan put multiple @methods in 1 block\n\nFunction can use req$REQUEST_METHOD for routing\n\nRemember pr_mount() for nested APIs!",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#process-requests-with-filters",
    "href": "slides/plumber/plumber-intro.html#process-requests-with-filters",
    "title": "Web APIs with R Book Club",
    "section": "Process requests with filters",
    "text": "Process requests with filters\n\nFilter process before endpoints\n#* @filter FILTER_NAME\nDo one of 3 things at end:\n\nForward control to next handler\nReturn a response itself without forwarding to endpoint\nThrow an error\n\nInputs = req (the request object), res (the response object)\n\nMore on these in next chapter",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#modify-apis-with-hooks",
    "href": "slides/plumber/plumber-intro.html#modify-apis-with-hooks",
    "title": "Web APIs with R Book Club",
    "section": "Modify APIs with hooks",
    "text": "Modify APIs with hooks\n\nExecute code at points in request lifecycle\n\npreroute(data, req, res)\npostroute(data, req, res, value)\npreserialize(data, req, res, value)\npostserialize(data, req, res, value)\n\npr_hook() for 1, pr_hooks() for multiple\nUse for: logging, open/close DB connection, debugging",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#debug-a-plumber-api",
    "href": "slides/plumber/plumber-intro.html#debug-a-plumber-api",
    "title": "Web APIs with R Book Club",
    "section": "Debug a plumber API",
    "text": "Debug a plumber API\n\nprint(), cat(), cli::cli_inform() in code to throw info to console\nUse hooks to log things along the path\nbrowser() in API functions will throw RStudio into debugger\npr_set_debug() is on by default when interactive",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-intro.html#meeting-videos",
    "href": "slides/plumber/plumber-intro.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I create an API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-output.html#serializers",
    "href": "slides/plumber/plumber-output.html#serializers",
    "title": "Web APIs with R Book Club",
    "section": "Serializers",
    "text": "Serializers\n\nVocab: “Serialize” = “translate into a format for storage or transmission”\nDefault = json via jsonlite::toJSON()\n#* @serializer NAME list(ARGS)\n\neg, #* @serializer json list(na = \"string\")\n\nImpacts behavior AND Swagger docs",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I control API output?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-output.html#structured-text",
    "href": "slides/plumber/plumber-output.html#structured-text",
    "title": "Web APIs with R Book Club",
    "section": "Structured text",
    "text": "Structured text\n\n\n\n\n\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\njson (default)\njsonlite::toJSON()\napplication/json\n\n\nunboxedJSON\njsonlite::toJSON(  auto_unbox = TRUE)\napplication/json\n\n\ngeojson\ngeojsonsf::sfc_geojson() or geojsonsf::sf_geojson()\napplication/json\n\n\nyaml\nyaml::as_yaml()\ntext/x-yaml\n\n\ncsv\nreadr::format_csv\ntext/csv\n\n\ntsv\nreadr::format_tsv\ntext/tab-separated-values",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I control API output?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-output.html#larger-data",
    "href": "slides/plumber/plumber-output.html#larger-data",
    "title": "Web APIs with R Book Club",
    "section": "Larger data",
    "text": "Larger data\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\nrds\nbase::serialize()\napplication/rds\n\n\nfeather\narrow::write_feather()\napplication/vnd.apache.arrow.file\n\n\nparquet\narrow::write_parquet()\napplication/parquet",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I control API output?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-output.html#html-xml",
    "href": "slides/plumber/plumber-output.html#html-xml",
    "title": "Web APIs with R Book Club",
    "section": "HTML & XML",
    "text": "HTML & XML\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\nhtml\n(unprocessed)\ntext/html; charset=UTF-8\n\n\nhtmlwidget\nhtmlwidgets::saveWidget()\ntext/html; charset=UTF-8\n\n\n\nUse html for xml-structured data, too",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I control API output?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-output.html#plain-text",
    "href": "slides/plumber/plumber-output.html#plain-text",
    "title": "Web APIs with R Book Club",
    "section": "Plain text",
    "text": "Plain text\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\ntext\nas.character()\ntext/plain\n\n\nformat\nformat()\ntext/plain\n\n\nprint\nprint()\ntext/plain\n\n\ncat\ncat()\ntext/plain",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I control API output?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-output.html#devices-images-pdfs",
    "href": "slides/plumber/plumber-output.html#devices-images-pdfs",
    "title": "Web APIs with R Book Club",
    "section": "Devices (images & PDFs)",
    "text": "Devices (images & PDFs)\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\njpeg\njpeg()\nimage/jpeg\n\n\npng\npng()\nimage/png\n\n\nsvg\nsvg()\nimage/svg+xml\n\n\ntiff\ntiff()\nimage/tiff\n\n\nbmp\nbmp()\nimage/bmp\n\n\npdf\npdf()\napplication/pdf\n\n\n\nCan define new image serializers with serializer_device()",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I control API output?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-output.html#other-things",
    "href": "slides/plumber/plumber-output.html#other-things",
    "title": "Web APIs with R Book Club",
    "section": "Other things",
    "text": "Other things\n\n\n\n@serializer\nprocessed with\ncontent type\n\n\n\n\ncontentType\n(user-specified)\n(user-specified)\n\n\noctet\n(as is, must be raw)\napplication/octet-stream\n\n\n\n\n#* @serializer contentType list(type = \"application/protobuf\", serialize_fn = protolite::serialize_pb)\n\n\noctet is contentType with a serialize_fn that checks is.raw()",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I control API output?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-output.html#meeting-videos",
    "href": "slides/plumber/plumber-output.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I control API output?"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "This is a companion for the book Web APIs with R by Jon Harmon (in progress, aiming for publication in 2024).\nEach chapter title to the left is a link to a slide deck.\n\nThese slides are being developed as I write the book.\nEach deck will open in its own tab.\nJoin the R4DS Learning Community to participate.\n\nWe follow the R4DS Learning Community Code of Conduct.",
    "crumbs": [
      "Welcome"
    ]
  },
  {
    "objectID": "slides/plumber/creating-more.html#slide-1",
    "href": "slides/plumber/creating-more.html#slide-1",
    "title": "Web APIs with R Book Club",
    "section": "SLIDE 1",
    "text": "SLIDE 1\n\nADD SLIDES AS SECTIONS (##).\nTRY TO KEEP THEM RELATIVELY SLIDE-LIKE; THESE ARE NOTES, NOT THE BOOK ITSELF.",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I learn more about creating APIs?"
    ]
  },
  {
    "objectID": "slides/plumber/creating-more.html#notes",
    "href": "slides/plumber/creating-more.html#notes",
    "title": "Web APIs with R Book Club",
    "section": "Notes",
    "text": "Notes\n\nLink to lambdr site.\nMention Shiny options for POST, etc?\nAlmost definitely link to OpenAPI book\nMaybe discuss a little bit about digging through (plumber) code to learn",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I learn more about creating APIs?"
    ]
  },
  {
    "objectID": "slides/plumber/creating-more.html#meeting-videos",
    "href": "slides/plumber/creating-more.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I learn more about creating APIs?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-security.html#review-of-authentication-schemes",
    "href": "slides/plumber/plumber-security.html#review-of-authentication-schemes",
    "title": "Web APIs with R Book Club",
    "section": "Review of authentication schemes",
    "text": "Review of authentication schemes\n(FROM httr2-authentication.Rmd once that’s edited)",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I authenticate API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-security.html#api-key-considerations",
    "href": "slides/plumber/plumber-security.html#api-key-considerations",
    "title": "Web APIs with R Book Club",
    "section": "API key considerations",
    "text": "API key considerations\n\nAccept in URL query?\n\nMay be easier for user (eg, purely in-browser)\nLess secure than header\n\nCookies? {-}\n\nIf you set cookie, you need to read it (see later slide)\nProbably also accept header",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I authenticate API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-security.html#api-keys-with-plumber-process-keys",
    "href": "slides/plumber/plumber-security.html#api-keys-with-plumber-process-keys",
    "title": "Web APIs with R Book Club",
    "section": "API keys with plumber: Process Keys",
    "text": "API keys with plumber: Process Keys\n\n#* Authorize user\n#* @filter authorize_api_key\nfunction(req) {\n  api_key &lt;- req$HTTP_AUTHORIZATION %||%            # Header\n    req$session$api_key %||% req$cookies$api_key    # Cookies\n  # Code to validate and process the API key.\n  req$authorized &lt;- TRUE # Or FALSE, set in auth section\n  plumber::forward()\n}\n\n\n#* @preempt authorize_api_key if endpoint doesn’t use auth",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I authenticate API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-security.html#api-keys-with-plumber-error",
    "href": "slides/plumber/plumber-security.html#api-keys-with-plumber-error",
    "title": "Web APIs with R Book Club",
    "section": "API keys with plumber: Error",
    "text": "API keys with plumber: Error\n\n#* Error: Unauthorized\n#* @filter stop_unauthorized\nfunction(req) {\n  if (req$authorized) {\n    plumber::forward()\n  }\n  res$status &lt;- 401L\n  # TODO: do_the_log_thing() per plumber-errors.Rmd\n  res$serializer &lt;- plumber::serializer_json\n  res$body &lt;- list(\n    error = \"Unauthorized\",\n    message = \"Obtain an API key at https://your_key_process.html\"\n  )\n}\n\n\n#* @preempt stop_unauthorized if endpoint doesn’t require auth\n\nIn addition to authorize_api_key if not used at all",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I authenticate API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-security.html#oauth2-with-plumber",
    "href": "slides/plumber/plumber-security.html#oauth2-with-plumber",
    "title": "Web APIs with R Book Club",
    "section": "OAuth2 with plumber",
    "text": "OAuth2 with plumber\n\nEndpoint for user to initiate Oauth2 dance\n\nWill launch browser for interaction with OAuth2 provider\n\nEndpoint for provider to send code\nUse state params to keep track of user\nEnd result is a bearer token (+ possibly other pieces)\n\nTODO: Actually implement this and make sure it works how you think!",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I authenticate API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-security.html#using-cookies-for-user-state",
    "href": "slides/plumber/plumber-security.html#using-cookies-for-user-state",
    "title": "Web APIs with R Book Club",
    "section": "Using cookies for user state",
    "text": "Using cookies for user state\n\nClient controls cookies, so don’t store anything you “own”\n\nEg, store a key, not a user ID\nSafer: Store preferences\nGeneral rule: things you’d accept as user input\n\nres$setCookie() for unencrypted data",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I authenticate API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-security.html#encrypted-cookies",
    "href": "slides/plumber/plumber-security.html#encrypted-cookies",
    "title": "Web APIs with R Book Club",
    "section": "Encrypted cookies",
    "text": "Encrypted cookies\n\npr_cookie(pr, key, name) in router\n\nTells plumber to read/write that cookie.\nEncrypts with key\nBy default name = \"plumber\"\n\nAll stored in req$session$plumber\n\n\nCan include lists (ends up as json)\nTODO: Add details about env vars and/or keyring (probably same as httr2 slides)",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I authenticate API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-security.html#meeting-videos",
    "href": "slides/plumber/plumber-security.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I authenticate API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#path-vs-other",
    "href": "slides/plumber/plumber-input.html#path-vs-other",
    "title": "Web APIs with R Book Club",
    "section": "Path vs Other",
    "text": "Path vs Other\n\nPath for main noun (the thing you’re acting on)\nQuery/body for arguments\nCookies/header for metadata, auth, etc",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#types-of-inputs",
    "href": "slides/plumber/plumber-input.html#types-of-inputs",
    "title": "Web APIs with R Book Club",
    "section": "Types of inputs",
    "text": "Types of inputs\nHow will your API be used?\n\nDirectly in browser (Are you sure?)\n\nGET\nQuery for things user decides\nCookies for state, etc\n\nMostly programmatic (including from Shiny, etc)\n\nPOST, PUT, PATCH, DELETE\nBody for things related to this specific request\nHeader for things that aren’t function arguments\nPossibly cookies for state still",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#api-function-arguments",
    "href": "slides/plumber/plumber-input.html#api-function-arguments",
    "title": "Web APIs with R Book Club",
    "section": "API function arguments",
    "text": "API function arguments\n\nCan expect named arguments, BUT\nBetter: Accept req (request object)\nSpecify priority (or only accept certain ones)\n\nGood documentation MUCH better than flexibility!\nBy default: argsQuery &gt; argsPath &gt; argsBody\n\n\n\nfunction(req) {\n  x &lt;- req$argsPath$x %||% req$argsBody$x %||% req$argsQuery$x %||% \n    req$cookies$x %||% req$HTTP_X\n}",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#parameter-types",
    "href": "slides/plumber/plumber-input.html#parameter-types",
    "title": "Web APIs with R Book Club",
    "section": "Parameter types",
    "text": "Parameter types\n\nOptionally specify type (~class) in API definition\n\n@param x:int (more details later)\n\nEnclose in [] to allow length &gt; 1 (array)\n\n@param x:[int]",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#parameter-types-table",
    "href": "slides/plumber/plumber-input.html#parameter-types-table",
    "title": "Web APIs with R Book Club",
    "section": "Parameter types table",
    "text": "Parameter types table\n\n\n\ntype\nR class\nin\n\n\n\n\n“boolean”\nlogical\nquery, path\n\n\n“number”\nnumeric\nquery, path\n\n\n“integer”\ninteger\nquery, path\n\n\n“string”\ncharacter\nquery, path\n\n\n“object”\nlist\nbody\n\n\n“file”\nraw\nbody\n\n\n\n\nAll of these have other aliases (eg int for integer)\nStick with these for smooth experience",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#path-parameters",
    "href": "slides/plumber/plumber-input.html#path-parameters",
    "title": "Web APIs with R Book Club",
    "section": "Path parameters",
    "text": "Path parameters\n\n#* @get /users/&lt;id&gt;\nfunction(id) {...} # better: use req$argsPath$id\n\nOptional: only route certain types\n\n#* @get /users/&lt;id:int&gt;\nfunction(id) {...} # better: use req$argsPath$id\n\n{plumber} casts typed path input",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#query-parameters",
    "href": "slides/plumber/plumber-input.html#query-parameters",
    "title": "Web APIs with R Book Club",
    "section": "Query parameters",
    "text": "Query parameters\nhttps://example.com/api/repeat?letter=x&number=1\n\n#* @get repeat\n#* @param letter:string The letter.\n#* @param number:integer The number of times to repeat it.\n\n{plumber} does not cast query input!",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#request-bodies",
    "href": "slides/plumber/plumber-input.html#request-bodies",
    "title": "Web APIs with R Book Club",
    "section": "Request bodies",
    "text": "Request bodies\n\nreq$body ≈ req$bodyArgs\n\nbody sometimes has raw value + parsed, other details\n\nParsers can prepare body\n\nSpecify as #* @parser PARSER (json, csv, rds, etc)\nArgs in list: #* @parser json list(simplifyVector = FALSE)\n\n\n\n#* @param df:object The input data.frame. Must contain columns \"first_name\" \n#*        and \"city\".\n#* @parser feather list(col_select = c(\"first_name\", \"city\"))",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#stabilizing-input",
    "href": "slides/plumber/plumber-input.html#stabilizing-input",
    "title": "Web APIs with R Book Club",
    "section": "Stabilizing input",
    "text": "Stabilizing input\nTODO: {stbl} package introduction once it’s stable.\nTODO: Also talk about DoS avoidance (input limits) + Sanitation",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#http-headers",
    "href": "slides/plumber/plumber-input.html#http-headers",
    "title": "Web APIs with R Book Club",
    "section": "HTTP headers",
    "text": "HTTP headers\nHeaders are processed and included in req object:\n\n- replaced with _\nUPPERCASE\nHTTP_ prefix\n\nX-custom-header → req$HTTP_X_CUSTOM_HEADER",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#inputs-in-cookies",
    "href": "slides/plumber/plumber-input.html#inputs-in-cookies",
    "title": "Web APIs with R Book Club",
    "section": "Inputs in Cookies",
    "text": "Inputs in Cookies\n\nreq$cookies = named list of (unencrypted) cookies\nreq$session = named list from encrypted cookies\n\nMuch more info when we save cookies",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#remember-filters",
    "href": "slides/plumber/plumber-input.html#remember-filters",
    "title": "Web APIs with R Book Club",
    "section": "Remember filters",
    "text": "Remember filters\nTODO: Add slide about dealing with things that aren’t specific to a given function via filters (eg, for auth).",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-input.html#meeting-videos",
    "href": "slides/plumber/plumber-input.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How can I get inputs from API users?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#posit-cloud",
    "href": "slides/plumber/plumber-deploy.html#posit-cloud",
    "title": "Web APIs with R Book Club",
    "section": "Posit Cloud",
    "text": "Posit Cloud\n\nFree tier available\nDeploying: (relatively) Easy & Free\nUsing: Difficult\n\nLoad API in browser\n\nLogin to posit.cloud\n\nCopy cookie (see How do I tell the API who I am)\nPaste cookie into file\nUse file with httr2::req_cookie_preserve()",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How do I deploy my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#posit-cloud-demo",
    "href": "slides/plumber/plumber-deploy.html#posit-cloud-demo",
    "title": "Web APIs with R Book Club",
    "section": "Posit Cloud: Demo",
    "text": "Posit Cloud: Demo\n\ndeploy_api &lt;- function(package, name, appName = name, ...) {\n  api_dir &lt;- withr::local_tempdir(\"api\")\n  file_path &lt;- paste0(api_dir, \"/entrypoint.R\")\n  entrypoint_text &lt;- glue::glue(\n    'library({package})',\n    'plumber::plumb_api(\"{package}\", \"{name}\")',\n    .sep = \"\\n\"\n  )\n  writeLines(entrypoint_text, file_path)\n  rsconnect::deployAPI(api_dir, appName = appName, ...)\n}\n# Login to posit.cloud; click your name, then Account, then Tokens\n# + New Token, or Copy existing token, and follow instructions\ndeploy_api(\"yourPackage\", \"yourAPI\")",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How do I deploy my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#posit-connect",
    "href": "slides/plumber/plumber-deploy.html#posit-connect",
    "title": "Web APIs with R Book Club",
    "section": "Posit Connect",
    "text": "Posit Connect\n\nPosit Connect = paid enterprise service\nDeploying: Identical to Posit Cloud (just different token)\nUsing: Easy\n\nNo hurdles other than what your IT creates",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How do I deploy my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#plumberdeploy",
    "href": "slides/plumber/plumber-deploy.html#plumberdeploy",
    "title": "Web APIs with R Book Club",
    "section": "plumberDeploy",
    "text": "plumberDeploy\nTODO: Does this still work? No updates in 2.5 years",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How do I deploy my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#others",
    "href": "slides/plumber/plumber-deploy.html#others",
    "title": "Web APIs with R Book Club",
    "section": "Others",
    "text": "Others\nTODO: Add the hard things. The free/“easy” ones ate the day!",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How do I deploy my plumber API?"
    ]
  },
  {
    "objectID": "slides/plumber/plumber-deploy.html#meeting-videos",
    "href": "slides/plumber/plumber-deploy.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I create my own APIs with R?",
      "How do I deploy my plumber API?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#graphql",
    "href": "slides/httr2/accessing-other.html#graphql",
    "title": "Web APIs with R Book Club",
    "section": "GraphQL",
    "text": "GraphQL\n\nCurrent landscape feels like “I use GraphQL in other languages, and want it to technically be possible to do so from R.”\nQueries: ghql\n\nDemo on next slide\n\nServer side: gqlr (more in later chapter)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#graphql-setup",
    "href": "slides/httr2/accessing-other.html#graphql-setup",
    "title": "Web APIs with R Book Club",
    "section": "GraphQL setup",
    "text": "GraphQL setup\n\nghql_con &lt;- GraphqlClient$new(\n  url = \"https://api.github.com/graphql\",\n  headers = list(Authorization = paste0(\"Bearer \", Sys.getenv(\"GITHUB_PAT\")))\n)\nghql_con$load_schema()\nqry &lt;- Query$new()",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#graphql-query",
    "href": "slides/httr2/accessing-other.html#graphql-query",
    "title": "Web APIs with R Book Club",
    "section": "GraphQL query",
    "text": "GraphQL query\n\nqry$query('mydata', '{\n  repositoryOwner(login:\"jonthegeek\") {\n    repositories(first: 5, orderBy: {field:PUSHED_AT,direction:DESC}, isFork:false) {\n      edges {\n        node {\n          name\n          stargazers {\n            totalCount\n          }\n        }\n      }\n    }\n  }\n}')",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#graphql-response",
    "href": "slides/httr2/accessing-other.html#graphql-response",
    "title": "Web APIs with R Book Club",
    "section": "GraphQL response",
    "text": "GraphQL response\n\nx &lt;- ghql_con$exec(qry$queries$mydata) # We created a query named \"mydata\"\njsonlite::fromJSON(x)\n#&gt; $data\n#&gt; $data$repositoryOwner\n#&gt; $data$repositoryOwner$repositories\n#&gt; $data$repositoryOwner$repositories$edges\n#&gt;                   node.name node.totalCount\n#&gt; 1                     wapir              17\n#&gt; 2                    zoomer               3\n#&gt; 3                rstats.fyi               0\n#&gt; 4                 tidyslack               0\n#&gt; 5 jonthegeek.r-universe.dev               0",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-review",
    "href": "slides/httr2/accessing-other.html#websocket-review",
    "title": "Web APIs with R Book Club",
    "section": "websocket review",
    "text": "websocket review\n\nAlternative to HTTP\nws:// or wss://\n2-way communication\n{websocket} package",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#aside-shiny-websockets",
    "href": "slides/httr2/accessing-other.html#aside-shiny-websockets",
    "title": "Web APIs with R Book Club",
    "section": "Aside: shiny & websockets",
    "text": "Aside: shiny & websockets\n\nYou might see websocket-related errors in Shiny\nShiny UI & server communicate via a websocket connection\nMore directly managed via {httpuv} & TypeScript code\nBeyond the scope of this book",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-demo-setup",
    "href": "slides/httr2/accessing-other.html#websocket-demo-setup",
    "title": "Web APIs with R Book Club",
    "section": "websocket demo: setup",
    "text": "websocket demo: setup\n\nws &lt;- WebSocket$new(\"ws://echo.websocket.events/\", autoConnect = FALSE)\nws$onMessage(\\(event) {\n  now &lt;- format(Sys.time(), digits = 0)\n  cat(\"Client got msg:\", event$data, \"at\", now, \"\\n\")\n})",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-demo",
    "href": "slides/httr2/accessing-other.html#websocket-demo",
    "title": "Web APIs with R Book Club",
    "section": "websocket demo",
    "text": "websocket demo\n\nws$connect()\n#&gt; Client got msg: echo.websocket.events sponsored by Lob.com at 2023-11-15 2023-11-15 08:28:04\n# (can do other things in console now)\n1\n#&gt; [1] 1\nws$send(\"hello\")\n#&gt; Client got msg: hello at 2023-11-15 08:28:10\nws$close()",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-toward-usefulness",
    "href": "slides/httr2/accessing-other.html#websocket-toward-usefulness",
    "title": "Web APIs with R Book Club",
    "section": "websocket: toward usefulness",
    "text": "websocket: toward usefulness\n\nws_counter &lt;- 1\nws2 &lt;- WebSocket$new(\"ws://echo.websocket.events/\", autoConnect = FALSE)\nws2$onMessage(\\(event) {\n  ws_counter &lt;&lt;- ws_counter + 1 # Add 1 to global ws_counter var \n  cat(ws_counter, \"\\n\")\n})\nws_counter\n#&gt; 1\nws2$connect()\n#&gt; 2\nws2$send(\"update\")\n#&gt; 3\nws2$send(\"update again\")\n#&gt; 4\nws2$close()",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#websocket-usecases",
    "href": "slides/httr2/accessing-other.html#websocket-usecases",
    "title": "Web APIs with R Book Club",
    "section": "websocket usecases",
    "text": "websocket usecases\n\nNews/Message feeds\n\nDisplay new content as it comes in\n\nMessaging\n\nSend and receive ~simultaneously without new connections\n\nMulti-player games\nCollaborative editing\nReal-time dashboards",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#grpc-review",
    "href": "slides/httr2/accessing-other.html#grpc-review",
    "title": "Web APIs with R Book Club",
    "section": "gRPC review",
    "text": "gRPC review\n\nGoogle Remote Procedure Call\nBecoming very popular\nGood for real-time, 2-way communication\nUses HTTP/2 (more socket-like)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#grpc-what-is-it-really",
    "href": "slides/httr2/accessing-other.html#grpc-what-is-it-really",
    "title": "Web APIs with R Book Club",
    "section": "gRPC: What is it really?",
    "text": "gRPC: What is it really?\n\nHTTP/2 (upgraded HTTP)\n\nCan access via {httr2}\n\n“Protocol buffers” datatype\n\nFully implemented in {RProtoBuf} package\n{protolite} for basics",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#grpc-demo",
    "href": "slides/httr2/accessing-other.html#grpc-demo",
    "title": "Web APIs with R Book Club",
    "section": "gRPC demo",
    "text": "gRPC demo\nFrom RProtoBuf paper\n\nresp &lt;- request(\"https://demo.ocpu.io/MASS/data/Animals/pb\") |&gt; \n  req_perform()\noutput &lt;- resp_body_raw(resp) |&gt; \n  unserialize_pb() # This is the important part\nidentical(output, MASS::Animals)\n#&gt; [1] TRUE\nhead(output)\n#&gt;                     body brain\n#&gt; Mountain beaver     1.35   8.1\n#&gt; Cow               465.00 423.0\n#&gt; Grey wolf          36.33 119.5\n#&gt; Goat               27.66 115.0\n#&gt; Guinea pig          1.04   5.5\n#&gt; Dipliodocus     11700.00  50.0",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#grpc-demo2-r-via-api",
    "href": "slides/httr2/accessing-other.html#grpc-demo2-r-via-api",
    "title": "Web APIs with R Book Club",
    "section": "gRPC demo2: R via API",
    "text": "gRPC demo2: R via API\n\nargs &lt;- list(n = 5, mean = 100)\npayload &lt;- serialize_pb(args, connection = NULL)\nresp &lt;- request(\"https://cloud.opencpu.org/ocpu/library\") |&gt; \n  req_url_path_append(\"stats\", \"R\", \"rnorm\", \"pb\") |&gt; \n  req_body_raw(payload, type = \"application/protobuf\") |&gt;\n  req_perform()\n\nresp_body_raw(resp) |&gt; \n  unserialize_pb()\n#&gt; [1] 102.61489 101.70467  99.12647  99.85958 100.47736",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/accessing-other.html#meeting-videos",
    "href": "slides/httr2/accessing-other.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I interact with the web from R?",
      "How else can I communicate with APIs from R?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#what-are-the-pieces-of-an-http-request",
    "href": "slides/httr2/httr2-methods.html#what-are-the-pieces-of-an-http-request",
    "title": "How can I do other things with APIs?",
    "section": "What are the pieces of an HTTP request?",
    "text": "What are the pieces of an HTTP request?\nHTTP request = URL + headers + method + body\n\n\nRe-orient ourselves with the pieces of an HTTP request.\nFocus on method.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I do other things with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#what-are-http-request-methods",
    "href": "slides/httr2/httr2-methods.html#what-are-http-request-methods",
    "title": "How can I do other things with APIs?",
    "section": "What are HTTP request methods?",
    "text": "What are HTTP request methods?\n\nPaths are nouns\nMethods are verbs\n\nGET (fetch existing thing)\nPOST (push new thing)\nDELETE (delete existing thing)\nPATCH (change existing thing)\nPUT (replace existing thing)\nCONNECT, OPTIONS, HEAD, TRACE (very rare)\n\n\n\n\nBy convention for REST APIs\n\nWe’ll dig into different API frameworks in a later chapter.\n\nPath examples: candidates, calendar-dates, filings, electioneering (ads)\nWe’ve been doing GET by default\nCONNECT = “start 2-way communication” (eg ask server to be a bridge)\nOPTIONS should tell you method options\nHEAD returns headers that you’d get with GET\n\nEg, use it to check if DL would be big.\n\nTRACE returns the request as the final server received it, with header info about route.\nMethods aren’t strict\n\nAPI owner can do weird things.\nGET or POST often used for ~everything",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I do other things with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#req_method",
    "href": "slides/httr2/httr2-methods.html#req_method",
    "title": "How can I do other things with APIs?",
    "section": "req_method()",
    "text": "req_method()\n\nGET = default without body\nPOST = default with body\nreq_method() to specify (rarely needed)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I do other things with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#req_template",
    "href": "slides/httr2/httr2-methods.html#req_template",
    "title": "How can I do other things with APIs?",
    "section": "req_template()",
    "text": "req_template()\n\nBuild request with variables\n\nreq_candidates2 &lt;- req_fec |&gt; \n  req_template(\"GET /{endpoint}\", endpoint = \"candidates\")\n\n\n\n\nidentical(req_candidates$url, req_candidates2$url)\n\n\n\nA more useful example:\n\nreq_fec |&gt; \n  req_template(\"GET /candidate/{candidate_id}/\", candidate_id = \"P40014052\")\n\n\n\nSometimes APIs are pretty much described in this syntax, lets you copy-paste.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I do other things with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-methods.html#what-are-the-pieces-of-an-http-request-1",
    "href": "slides/httr2/httr2-methods.html#what-are-the-pieces-of-an-http-request-1",
    "title": "How can I do other things with APIs?",
    "section": "What are the pieces of an HTTP request?",
    "text": "What are the pieces of an HTTP request?\nHTTP request = URL + headers + method + body\n\n\nRe-orient ourselves with the pieces of an HTTP request.\nFocus on body\n\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I do other things with APIs?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#what-are-http-request-headers",
    "href": "slides/httr2/httr2-authentication.html#what-are-http-request-headers",
    "title": "Web APIs with R Book Club",
    "section": "What are HTTP request headers?",
    "text": "What are HTTP request headers?\n\nMetadata about the request\n\nAuthentication\nCookies\nCache rules\nExpected response\nEtc\n\n\n\nNames are case-insensitive!\n\n\nMuch more in Chapter 3: “How do I tell the API who I am?”",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#req_headers",
    "href": "slides/httr2/httr2-authentication.html#req_headers",
    "title": "Web APIs with R Book Club",
    "section": "req_headers()",
    "text": "req_headers()\nTODO: Leftovers from httr2.qmd. Make it fit in this chapter!\n\n\nreq_fec_auth &lt;- req_fec |&gt; \n  req_headers(\"X-Api-Key\" = \"DEMO_KEY\", .redact = \"X-Api-Key\")\n\n\n\n\nreq_dry_run(req_fec_auth)\n\n\n\nBe careful!\n\nreq_fec_auth$headers\n\n\n\n\n.redact arg tells it to hide the value of that argument when it prints to the console.\nreq_dry_run() prints useful info without actually running req_perform()\n\nNormal print of req_fec_auth also works outside of slide context\n\nBe careful: It’s still in the object, just hidden",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#req_url",
    "href": "slides/httr2/httr2-authentication.html#req_url",
    "title": "Web APIs with R Book Club",
    "section": "req_url()",
    "text": "req_url()\n\nReplace entire URL\neg: Same authentication, different base_url\n\n\n\nreq_fec_dev_auth &lt;- req_fec_auth |&gt; \n  req_url(\"https://dev.fec.fake/v1\")\n\n\n\n\nreq_dry_run(req_fec_dev_auth)\n\n\n\n\nAt first I lumped this in same bucket as req_url_path()\nYouTube API: metadata vs upload",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#but-first-practice-safe-git",
    "href": "slides/httr2/httr2-authentication.html#but-first-practice-safe-git",
    "title": "Web APIs with R Book Club",
    "section": "But first: Practice safe git",
    "text": "But first: Practice safe git\n\nRun usethis::git_vaccinate()\nUsually ignore project-level .Renviron",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#credential-dangers",
    "href": "slides/httr2/httr2-authentication.html#credential-dangers",
    "title": "Web APIs with R Book Club",
    "section": "Credential dangers",
    "text": "Credential dangers\n\nHow much account control does it have?\n\nCan it lock you out?\nCan it reveal sensitive data?\n\nHow long does it last?\n\nShorter = safer\nCan you revoke it?\n\nHow likely is it to leak?\n\nWhen do you send it?\nWhere do you send it?\nHow often do you send it?",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#authentication-schemes-overview",
    "href": "slides/httr2/httr2-authentication.html#authentication-schemes-overview",
    "title": "Web APIs with R Book Club",
    "section": "Authentication schemes overview",
    "text": "Authentication schemes overview\n\nHTTP Basic Authentication: username + password sent with request\nAPI Keys/Bearer Tokens: password-like thing sent with request\n\nDirty secret: This is what more complex schemes are, eventually\nhttr2::req_auth_bearer_token()\nSometimes: httr2::req_headers()\n\nOAuth: Multi-step process to generate a key\n\nGoal: Make the key as short-lived as possible\nNot everyone implements the same way (ie often wrong)\nhttr2::req_oauth_*()\n\nOther:\n\nCookies\nCertificates",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#dangers-of-leaking-credentials",
    "href": "slides/httr2/httr2-authentication.html#dangers-of-leaking-credentials",
    "title": "Web APIs with R Book Club",
    "section": "Dangers of leaking credentials",
    "text": "Dangers of leaking credentials\n\n🔴 Username + password\n\nAccess entire account\nOften difficult to turn off/recover\n\n🟠 API key\n\nCan access everything you can access\nOften short-lived\nYou can often revoke this\n\n🟡 OAuth exists to minimize these dangers",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#what-does-this-api-want",
    "href": "slides/httr2/httr2-authentication.html#what-does-this-api-want",
    "title": "Web APIs with R Book Club",
    "section": "What does this API want?",
    "text": "What does this API want?\n\nFind “OpenAPI” or “Swagger” links (or “API json”, “API yaml”, etc)\n\nSearch for “secrutitySchemes”\nOften easier-to-understand details than docs!\n\nMight need to do something to “register”\n\n“Request an API key”\n“Register your App” (or “Client”) (see OAuth)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#http-basic-authentication",
    "href": "slides/httr2/httr2-authentication.html#http-basic-authentication",
    "title": "Web APIs with R Book Club",
    "section": "HTTP Basic Authentication",
    "text": "HTTP Basic Authentication\n\nhttr2::req_auth_basic(req, username, password = NULL)\nLeave password blank: Prompt interactive semi-securely\nAvoid using this if you can!\n\nI can’t remember any API that only offers this",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#api-keys-bearer-tokens",
    "href": "slides/httr2/httr2-authentication.html#api-keys-bearer-tokens",
    "title": "Web APIs with R Book Club",
    "section": "API Keys & Bearer Tokens",
    "text": "API Keys & Bearer Tokens\n\nhttr2::req_auth_bearer_token(req, token) (specific header)\n\nPass token as Sys.get(\"API_TOKEN_NAME\")\nSave token with usethis::edit_r_environ()\n\nCatch-all: httr2::req_headers(.req, ..., .redact = NULL)\n\n... = token_parameter = Sys.get(\"API_TOKEN_NAME\")\n.redact = \"token_parameter\" to hide in print",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-terminology",
    "href": "slides/httr2/httr2-authentication.html#oauth-terminology",
    "title": "Web APIs with R Book Club",
    "section": "OAuth: Terminology",
    "text": "OAuth: Terminology\n\nUser: You, or someone using your code\nClient: The thing asking for permission to act as the user\n\nYour code, but also\nA reusable thing that represents your code\nClient ID: Codename\nClient secret: Client “password”, but often not very secret\n\nAuthorization server (auth): Thing granting permission (usually the API owner)\n\nOften multiple servers (auth vs auth2 on next slide)\n\nResource server (API): Thing user is using (the API)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#the-oauth-dance",
    "href": "slides/httr2/httr2-authentication.html#the-oauth-dance",
    "title": "Web APIs with R Book Club",
    "section": "The OAuth “dance”",
    "text": "The OAuth “dance”\n\nUser to client: Hit this API for me!\nClient (ID) to auth: Can I act as this user and do these things?\nAuth to user: Is this ok?\nUser to auth: Yes\nAuth to client’s home address: Use this to get a key\nClient (ID + secret) to auth2: Turn this into a key (I’m really me!)\nAuth2 to client: Here’s your key (and I’ll log what it can do)\nClient to API: Here’s my key\nAPI to auth: Can this key do this?\nAuth to API: (checks logged scopes) Yes!\nAPI to client: Ok, here’s the info!\n\nTODO: Image of OAuth dance",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-credential-dangers",
    "href": "slides/httr2/httr2-authentication.html#oauth-credential-dangers",
    "title": "Web APIs with R Book Club",
    "section": "OAuth credential dangers",
    "text": "OAuth credential dangers\n\n🟢 Client id: Like knowing a package name.\n🟡 Client secret:\n\nCan pretend to be your client, but user still needs to say ok\nCan your client do anything special?\n\nInstalled (e.g. Slack app)?\nAPI usage limits?\n\n\n🟡 Authorization code: Unlikely to be an issue\n\nOnly sent to provided redirect_uri\nExtremely short lived (often minutes or less)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-credential-dangers-cont",
    "href": "slides/httr2/httr2-authentication.html#oauth-credential-dangers-cont",
    "title": "Web APIs with R Book Club",
    "section": "OAuth credential dangers (cont)",
    "text": "OAuth credential dangers (cont)\n\n🟡 Refresh token: A longer-lived authorization code\n\nCan be used to get a new access token\nUsually revoked if you auth from scratch\nAlso need client secret to refresh\n\n🟠 Access token: The thing we’re protecting\n\nCan do whatever it’s authorized to do\nUsually easy to revoke\n\n🔴 Username + password: We don’t want to know these",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#httr2oauth_client",
    "href": "slides/httr2/httr2-authentication.html#httr2oauth_client",
    "title": "Web APIs with R Book Club",
    "section": "httr2::oauth_client()",
    "text": "httr2::oauth_client()\n\nAlmost definitely only need these (from API provider):\n\nid = Client ID\ntoken_url = URL where clients exchange authorization codes for tokens\nsecret = Client secret\nOften auth = \"header\"\nIf this client has multiple uses: name = unique for this use case\n\nConstruct once & reuse",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-client-demo",
    "href": "slides/httr2/httr2-authentication.html#oauth-client-demo",
    "title": "Web APIs with R Book Club",
    "section": "OAuth client demo",
    "text": "OAuth client demo\n\nlibrary(httr2)\nyt_client &lt;- oauth_client(\n  Sys.getenv(\"YOUTUBE_CLIENT_ID\"), \n  \"https://oauth2.googleapis.com/token\",\n  secret = Sys.getenv(\"YOUTUBE_CLIENT_SECRET\")\n)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#httr2req_oauth_auth_code",
    "href": "slides/httr2/httr2-authentication.html#httr2req_oauth_auth_code",
    "title": "Web APIs with R Book Club",
    "section": "httr2::req_oauth_auth_code()",
    "text": "httr2::req_oauth_auth_code()\n\nauth_url = URL to get an authorization code (from API)\nscope = Usually comma-separated string of permissions\npkce = Good if supported, often have to turn off\nredirect_uri = Where to send response\n\nOften need specific local port “http://localhost:4242” or “http://127.0.0.1:4242”\nMust be configured as part of client configuration (at API)\n\ncache_disk = Set this TRUE if you can\n\ncache_key if you’ll use this client for multiple tokens",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#oauth-request-demo",
    "href": "slides/httr2/httr2-authentication.html#oauth-request-demo",
    "title": "Web APIs with R Book Club",
    "section": "Oauth request demo",
    "text": "Oauth request demo\n\nplaylists &lt;- request(\"https://youtube.googleapis.com/youtube/v3\") |&gt; \n  req_url_path_append(\"playlists\") |&gt; \n  req_url_query(part = \"snippet\", mine = TRUE, maxResults = 50) |&gt; \n  req_oauth_auth_code(\n    yt_client, \n    \"https://accounts.google.com/o/oauth2/v2/auth\",\n    scope = \"https://www.googleapis.com/auth/youtube\",\n    redirect_uri = \"http://127.0.0.1:8888\"\n  ) |&gt; \n  req_perform()",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#automating-oauth",
    "href": "slides/httr2/httr2-authentication.html#automating-oauth",
    "title": "Web APIs with R Book Club",
    "section": "Automating OAuth",
    "text": "Automating OAuth\n\nIf you can, use httr2 cache: easiest, but\n\nauto-deletes when 30 days old\nfills logs w/ “Caching httr2 token in …” messages\n\nhttr2::req_oauth_bearer_jwt() if you have JSON web token (service account)\nhttr2::req_oauth_refresh() if you have a refresh token\n\nhttr2::oauth_flow_auth_code() once to get refresh",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#browser-cookies",
    "href": "slides/httr2/httr2-authentication.html#browser-cookies",
    "title": "Web APIs with R Book Club",
    "section": "Browser cookies",
    "text": "Browser cookies\nThis will feel hacky because it is hacky.\n\nInstall EditThisCookie browser extension\nUse API in browser\nOpen EditThisCookie extension\nOptions &gt; “Choose the preferred export format for cookies” &gt; Netscape HTTP Cookie File\nOpen EditThisCookie extension\nExport\nPaste into a file at path\nhttr2::req_cookie_preserve(req, path)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-authentication.html#meeting-videos",
    "href": "slides/httr2/httr2-authentication.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I interact with the web from R?",
      "How do I tell the API who I am?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#controlling-large-requests",
    "href": "slides/httr2/httr2-perform.html#controlling-large-requests",
    "title": "Web APIs with R Book Club",
    "section": "Controlling large requests",
    "text": "Controlling large requests\n\nhttr2::req_progress() adds a progress bar for requests that transfer a lot of data.\nhttr2::req_timeout() to add a maximum wait time in seconds\nhttr2::req_cache() to avoid re-calling slow calls",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#throttling-and-retries",
    "href": "slides/httr2/httr2-perform.html#throttling-and-retries",
    "title": "Web APIs with R Book Club",
    "section": "Throttling and retries",
    "text": "Throttling and retries\n\nAPIs often throw errors if hit too fast\nhttr2::req_throttle() to slow down\n\nrealm when endpoints have different limits (“Tier 1” vs “Tier 2”)\n\nhttr2::req_retry() to try again for transient failures\n\nDefault: Statuses 429 & 503 = transient\n(optional) is_transient function to override\n(optional) after function to extract wait from response",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#dealing-with-errors",
    "href": "slides/httr2/httr2-perform.html#dealing-with-errors",
    "title": "Web APIs with R Book Club",
    "section": "Dealing with errors",
    "text": "Dealing with errors\n\nhttr2::req_error() to handle errors\n\nis_error function to escalate something to an error\n\nEg: Empty response you know isn’t really empty\n\nbody function to parse response into rlang::abort() message.\n\nEg: API description gives details of an error code’s meaning",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#pagination",
    "href": "slides/httr2/httr2-perform.html#pagination",
    "title": "Web APIs with R Book Club",
    "section": "Pagination",
    "text": "Pagination\n\nhttr2::req_perform_iterative()\nnext_req = function\n\niterate_with_offset() to increment query parameter (?page=1, ?page=2)\niterate_with_cursor() to extract next page from response\niterate_with_link_url() to follow Link in resp header",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#pagination-fec",
    "href": "slides/httr2/httr2-perform.html#pagination-fec",
    "title": "Web APIs with R Book Club",
    "section": "Pagination: FEC",
    "text": "Pagination: FEC\n\nresps &lt;- request(\"https://api.open.fec.gov/v1/candidates\") |&gt; \n  req_headers(\"X-Api-Key\" = \"DEMO_KEY\") |&gt; \n  req_url_query(office = \"H\", per_page = 100, election_year = 2020) |&gt; \n  req_perform_iterative(\n    iterate_with_offset(\n      \"page\",\n      resp_pages = \\(resp) resp_body_json(resp)$pagination$pages # Check once\n    ),\n    max_reqs = Inf # Important! Default = 20\n  )",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#pagination-youtube",
    "href": "slides/httr2/httr2-perform.html#pagination-youtube",
    "title": "Web APIs with R Book Club",
    "section": "Pagination: YouTube",
    "text": "Pagination: YouTube\n\nresps &lt;- request(\"https://youtube.googleapis.com/youtube/v3\") |&gt; \n  req_url_path_append(\"playlists\") |&gt; \n  req_url_query(part = \"snippet\", mine = TRUE, maxResults = 50) |&gt; \n  req_auth_bearer_token(IGNORE_FOR_NOW) |&gt; \n  req_perform_iteratively(\n    iterate_with_cursor(\n      \"pageToken\",\n      function(resp) resp_body_json(resp)$nextPageToken\n    )\n  )",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#multiple-requests",
    "href": "slides/httr2/httr2-perform.html#multiple-requests",
    "title": "Web APIs with R Book Club",
    "section": "Multiple requests",
    "text": "Multiple requests\n\nManually create list of separate requests\nPerform all:\n\nhttr2::req_perform_parallel() all at once\n\nNo reauth, no throttle, no retry, no cache\n\nhttr2::req_perform_sequential() serially\n\nSlower but can use other settings",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#multiple-requests-youtube",
    "href": "slides/httr2/httr2-perform.html#multiple-requests-youtube",
    "title": "Web APIs with R Book Club",
    "section": "Multiple requests: YouTube",
    "text": "Multiple requests: YouTube\nGet 10 most recent videos from list of playlists.\n\nbase_req &lt;- request(\"https://youtube.googleapis.com/youtube/v3\") |&gt; \n  req_url_path_append(\"playlistItems\") |&gt; \n  req_url_query(part = \"contentDetails\", maxResults = 10) |&gt; \n  req_auth_bearer_token(IGNORE_FOR_NOW)\n\nresps &lt;- purrr::map(\n  playlists, \\(playlist) req_url_query(base_req, playlistId = playlist)\n) |&gt; \n  req_perform_parallel() # or req_perform_sequential()",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#parsing-multiple-responses",
    "href": "slides/httr2/httr2-perform.html#parsing-multiple-responses",
    "title": "Web APIs with R Book Club",
    "section": "Parsing multiple responses",
    "text": "Parsing multiple responses\n\nhttr2::resps_data() to combine responses from req_perform_*()\nProvide function to extract data from single resp as vector or df.\nMore details in Chapter 6.",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#streaming",
    "href": "slides/httr2/httr2-perform.html#streaming",
    "title": "Web APIs with R Book Club",
    "section": "Streaming",
    "text": "Streaming\n\nhttr2::req_perform_stream() to stream data from API\nBlocks R session (see Chapter 10 for alternative)\nCall function every buffer_kb kilobytes\nEg: Save to file, different process could read that file from Shiny",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#streaming-simple-example",
    "href": "slides/httr2/httr2-perform.html#streaming-simple-example",
    "title": "Web APIs with R Book Club",
    "section": "Streaming: Simple example",
    "text": "Streaming: Simple example\n\nshow_bytes &lt;- function(x) {\n  cli::cli_inform(\"Got {length(x)} bytes at {Sys.time()}.\")\n  TRUE\n}\nresp &lt;- httr2::request(httr2::example_url()) |&gt;\n  httr2::req_url_path(\"/stream-bytes/100000\") |&gt;\n  httr2::req_perform_stream(show_bytes, buffer_kb = 32)",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#is-this-interesting",
    "href": "slides/httr2/httr2-perform.html#is-this-interesting",
    "title": "Web APIs with R Book Club",
    "section": "Is this interesting?",
    "text": "Is this interesting?\n\nreq_options() lets you directly set libcurl options not available in {httr2}\nShould I dig through and find what’s available but not implemented?",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/httr2-perform.html#meeting-videos",
    "href": "slides/httr2/httr2-perform.html#meeting-videos",
    "title": "Web APIs with R Book Club",
    "section": "Meeting Videos",
    "text": "Meeting Videos\nCohort 1\n\n\n\n\nMeeting chat log\n\nLOG\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io",
    "crumbs": [
      "How can I interact with the web from R?",
      "How can I get a lot of data from an API?"
    ]
  },
  {
    "objectID": "slides/httr2/apis.html#browsers-and-http-requests",
    "href": "slides/httr2/apis.html#browsers-and-http-requests",
    "title": "How do computers communicate?",
    "section": "Browsers and HTTP Requests",
    "text": "Browsers and HTTP Requests\nhttps://wapir.io/apis.html is an HTTP request:\n\nhttps:// = “use HTTP(s) protocol”\nURL: wapir.io/apis.html = URL\nheaders: Cookies (plus some info about your browser)\nmethod: GET\nbody: Empty\n\n\n\nRequest = URL + headers + method + body\nYou (kinda) use APIs all the time!"
  },
  {
    "objectID": "slides/httr2/apis.html#http-api-frameworks-historic",
    "href": "slides/httr2/apis.html#http-api-frameworks-historic",
    "title": "How do computers communicate?",
    "section": "HTTP API Frameworks: Historic",
    "text": "HTTP API Frameworks: Historic\n\nRPC = Remote Procedure Call\n\nEndpoints = actions\nXML-RPC & JSON-RPC popular early\nOften just GET (GET /deleteItem/1234)\n\nSOAP = Simple Objects Access Protocol (briefly huge, mostly dead)\n\nEvolved from XML-RPC\nTechnically not limited to HTTP\n\n\n\n\nRPCs are making a come back (we’ll see in a couple slides)"
  },
  {
    "objectID": "slides/httr2/apis.html#http-api-frameworks-modern",
    "href": "slides/httr2/apis.html#http-api-frameworks-modern",
    "title": "How do computers communicate?",
    "section": "HTTP API Frameworks: Modern",
    "text": "HTTP API Frameworks: Modern\n\nREST = REpresentational State Transfer\n\nMost common by far\nStateless (call defines the object)\nTechnically endpoints = nouns\nWhat we’ll focus on in most of book\n\nGraphQL = Graph Query Language\n\nBody defines everything\n\nJSON with wildcards telling server what to fill in\n\nBasically GET + 1 endpoint\nMore details in “How else can I communicate with APIs from R?”\n\n\n\n\nREST APIs often called “RESTful” APIs.\nGraphQL should be bigger than it is for data science"
  },
  {
    "objectID": "slides/httr2/apis.html#other-api-frameworks",
    "href": "slides/httr2/apis.html#other-api-frameworks",
    "title": "How do computers communicate?",
    "section": "Other API Frameworks",
    "text": "Other API Frameworks\n\nwebsocket\n\nws:// or wss:// vs http:// or https://\n2-way communication\n{websocket} package\n\ngRPC = Google RPC\n\nGood for real-time, 2-way communication\nUses HTTP/2 (more socket-like)\n\n\nDeeper dive coming in “How else can I communicate with APIs from R?”!\n\n\nShiny is websocket between server (R) and ui (JS)\ngRPC best for tightly coupled microservices\n\n\n\n\n\nr4ds.io/wapir | Jon Harmon | wapir.io"
  },
  {
    "objectID": "slides/project.html#objectives",
    "href": "slides/project.html#objectives",
    "title": "Web APIs with R",
    "section": "Objectives",
    "text": "Objectives\n\nConvince you that you care about APIs.\nExplain why I’m writing my book “backward”.\nRecruit you to “Cohort 0” of my book club.\nGive you a sneak peek at a new book club site format.\n\n\n\nStick around til the end for that last one!\n🤣 Who knew learning objectives could be click-baity?"
  },
  {
    "objectID": "slides/project.html#what-is-an-api",
    "href": "slides/project.html#what-is-an-api",
    "title": "Web APIs with R",
    "section": "What is an API?",
    "text": "What is an API?\nSee How do computers communicate?\n\n\nFirst “real” chapter of my book.\nWe’ll go through part of that then come back here."
  },
  {
    "objectID": "slides/project.html#discussion-api-examples",
    "href": "slides/project.html#discussion-api-examples",
    "title": "Web APIs with R",
    "section": "Discussion: API Examples",
    "text": "Discussion: API Examples\nWhat do you want to do with APIs?\n\n\nPlease speak up or type ideas in the chat!\nMore examples if people need prompting:\n\n“Login with” google, apple, facebook, etc.\nSlack API used for various R4DS management tasks.\nSunrise/sunset (etc) from lat/long/date\nall_apis &lt;- apisguru::list_apis()\nall_apis |&gt; dplyr::slice_sample(n = 5)"
  },
  {
    "objectID": "slides/project.html#forwardbackward-design",
    "href": "slides/project.html#forwardbackward-design",
    "title": "Web APIs with R",
    "section": "Forward/Backward Design",
    "text": "Forward/Backward Design\nUnderstanding by Design (Grant Wiggins and Jay McTighe, 1998)\n\n\nForward:\n\nPlan lessons about material\nCreate assessment to measure learning\nID what learners know\n\n\nBackward:\n\nID what learners need to know\nCreate assessment to measure learning\nPlan lessons to help learners succeed at assessment\n\n\n\n\n\n“Forward” is “normal” way of teaching.\n\nEg, teachers choosing a book to read then deciding what to put on the test.\n\n“Learner-centered” design.\n“What learners need to know” == learning objectives\nTo avoid: “Teaching the test.”\n\nThere’s still nuance to making sure you’re preparing students to answer any question within LOs."
  },
  {
    "objectID": "slides/project.html#my-plan",
    "href": "slides/project.html#my-plan",
    "title": "Web APIs with R",
    "section": "My plan",
    "text": "My plan\n\n\n✅ Rough draft slides\n⬜ Discuss material with learners (ID needs)\n❓ Create an assessment?\n🔄️ Revise slides\n📝 Write chapter\n\n\n\n\nI spent November making rough slides of almost everything.\n\nTool to give structure to meetings\n\nDoing this today! (also see next slide)\nNot sure about this yet, but may write exercises next\nIdeal universe = repeat process, might skip to draft\nNo solid completion date yet"
  },
  {
    "objectID": "slides/intro.html#api-application-programming-interface",
    "href": "slides/intro.html#api-application-programming-interface",
    "title": "Introduction",
    "section": "API = “application programming interface”",
    "text": "API = “application programming interface”\n\n“application” = function, website… any computerized thing\n“programming” = can be used in code\n“interface” = way to interact with something\n\n\n🤖 APIs allow computers to talk to one another\n\n\n\nRight level?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#what-are-web-apis",
    "href": "slides/intro.html#what-are-web-apis",
    "title": "Introduction",
    "section": "What are web APIs?",
    "text": "What are web APIs?\n\n💻 Technically any function’s list of arguments is an API\n\n\n\n“httr2 is a ground-up rewrite of httr that provides a pipeable API with an explicit request object that solves more problems felt by packages that wrap APIs” (httr2 docs, emphasis added)\n\n\n\n🕸️ This book = web APIs\n\nWeb API = API on the internet\nFor rest of book, “API” means “web API”\n\n\n\n\nhttr2 quote helpful/interesting?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#what-are-some-api-examples",
    "href": "slides/intro.html#what-are-some-api-examples",
    "title": "Introduction",
    "section": "What are some API examples?",
    "text": "What are some API examples?\n\nCloud services ({paws})\nGovernment agencies (OpenFEC)\nRandom data (sunrisesunset.io)\nServices (OpenAI)\nAPIs.guru = API directory\n\n2,529 APIs as of 2024-01-22\n\n\n\n\nNumber of examples good?\nVariety of examples good?\nDeep enough, or more-full usage examples?\nWhat would you expect in book (vs slides)?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#what-does-each-chapter-cover",
    "href": "slides/intro.html#what-does-each-chapter-cover",
    "title": "Introduction",
    "section": "What does each chapter cover?",
    "text": "What does each chapter cover?\n\n\nPart 1: How can I get web data into R?\n\nHow can I access APIs from R?\nHow do I tell the API who I am?\nHow can I process API responses?\nHow can I get a lot of data from an API?\nHow can I find APIs?\nHow can I find API-wrapping packages?\nHow else can I communicate with APIs from R?\nHow can I get data from web pages?\nHow can I learn more about accessing web APIs?\n\n\nPart 2: How can I create my own APIs with R?\n\nHow can I create an API?\nHow can I get inputs from API users?\nHow can I control API output?\nHow can I handle API errors?\nHow can I authenticate API users?\nHow can I test my plumber API?\nHow do I deploy my plumber API?\nHow can I learn more about creating APIs?\n\n\n\n\n\nI want to quickly gauge interest, but more details in the survey.\nWill have an over-arching case study woven into most chapters (but as independent pieces to allow jumping around)\nAny missing topics?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#what-wont-i-learn",
    "href": "slides/intro.html#what-wont-i-learn",
    "title": "Introduction",
    "section": "What won’t I learn?",
    "text": "What won’t I learn?\n\nHow can I access APIs with {httr} or {curl}?\nHow can I access APIs from other programming languages?\nHow should I design a complex API?\n\nMany other books, such as Designing APIs with Swagger and OpenAPI\n\nHow can I administer an enterprise API?\n\nDevOps for Data Science for tips\nWork with professionals for full-scale deployments\n\n\n\n\nAnything else people would expect?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#who-should-read-this-book",
    "href": "slides/intro.html#who-should-read-this-book",
    "title": "Introduction",
    "section": "Who should read this book?",
    "text": "Who should read this book?\n\n\n\nData Analysts/Scientists\n\nPart 1: Enrich datasets\n\nMachine Learning Engineers\n\nPart 1: Feature engineering\nPart 2: Share predictions\n\n\n\n\nData Producers (Researchers, etc)\n\nPart 2: Share data\n\nShiny App Designers\n\nPart 1: Load/process data\nPart 2: Divide & conquer\n\n\n\n\n\n\nPeople who analyze data, not necessarily that job title.\nResearchers or anybody else with data to share.\nDoes anybody fit into something other than those use cases?",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#prerequisites",
    "href": "slides/intro.html#prerequisites",
    "title": "Introduction",
    "section": "Prerequisites",
    "text": "Prerequisites\n\nVery few hard prerequisites\n\nWill point to resources when helpful\n\nI assume familiarity with R\n\nR for Data Science\n\nHelpful:\n\nAdvanced R to construct more robust APIs\nR Packages for deeper dive into 📦\n\n\n\n\n(I repeat these questions in the survey)\nHow many have read R4DS?\nHow many have read Advanced R?\nHow many have read R Packages?\nHow many have written a function?\nHow many have written a package?\nHow many have published a package on CRAN?\nAccessed an API from R with httr?\nAccessed an API from R with httr2?\nAccessed an API from R some other way?\nDiscuss level I can assume.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "slides/intro.html#how-are-chapters-structured",
    "href": "slides/intro.html#how-are-chapters-structured",
    "title": "Introduction",
    "section": "How are chapters structured?",
    "text": "How are chapters structured?\n\nLearning Objectives ≈ skills\n\n“After you read this chapter, you will be able to…”\nThere will be a separate index of these\n\nTest-Yourself Questions to check understanding\nCheck online version for API updates\n(TODO: Anything to note about code vs text?)\n(TODO: Probably an over-arching case study of an election data Shiny app?)",
    "crumbs": [
      "Introduction"
    ]
  }
]