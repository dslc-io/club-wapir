---
engine: knitr
title: How do computers communicate?
---

# ️✅ Learning objectives

-   Describe how **accessing a web page through a browser** involves an **HTTP request.**
-   Compare and contrast **HTTP-based API frameworks.**
-   Recognize **other web API frameworks.**

## Browsers and HTTP Requests

https://wapir.io/apis.html is an HTTP request:

-   `https://` = "use HTTP(s) protocol"
-   **URL:** `wapir.io/apis.html` = URL
-   **headers:** Cookies (plus some info about your browser)
-   **method:** `GET`
-   **body:** Empty

::: notes
-   Request = URL + headers + method + body
-   You (kinda) use APIs all the time!
:::

# What are API frameworks?

-   Systems for defining APIs
-   More like philosophies than rules

::: notes
-   (don't linger here)
:::

## HTTP API Frameworks: Historic

-   RPC = Remote Procedure Call
    -   Endpoints = actions
    -   XML-RPC & JSON-RPC popular early
    -   Often just `GET` (`GET /deleteItem/1234`)
-   SOAP = Simple Objects Access Protocol (briefly huge, mostly dead)
    -   Evolved from XML-RPC
    -   Technically not limited to HTTP

::: notes
-   RPCs are making a come back (we'll see in a couple slides)
:::

## HTTP API Frameworks: Modern

-   REST = REpresentational State Transfer
    -   Most common by far
    -   Stateless (call defines the object)
    -   Technically endpoints = nouns
    -   What we'll focus on in most of book
-   GraphQL = Graph Query Language
    -   Body defines everything
        -   JSON with wildcards telling server what to fill in
    -   Basically `GET` + 1 endpoint
    -   More details in ["How else can I communicate with APIs from R?"](accessing-other.html){target="wapir-club_accessing-other"}

::: notes
-   REST APIs often called "RESTful" APIs.
-   GraphQL should be bigger than it is for data science
:::

## Other API Frameworks

-   websocket
    -   `ws://` or `wss://` vs `http://` or `https://`
    -   2-way communication
    -   {websocket} package
-   gRPC = Google RPC
    -   Good for real-time, 2-way communication
    -   Uses HTTP/2 (more socket-like)

Deeper dive coming in ["How else can I communicate with APIs from R?"](accessing-other.html){target="wapir-club_accessing-other"}!

::: notes
-   Shiny is websocket between server (R) and ui (JS)
-   gRPC best for tightly coupled microservices
:::
