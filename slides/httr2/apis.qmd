---
engine: knitr
title: How do computers communicate?
---

## Learning objectives

-   Explain **what an API is.**
-   Recognize **examples of web APIs.**
-   Identify the **pieces of an HTTP request.** 
-   Describe how **accessing a web page through a browser** involves an **HTTP request.**
-   Compare and contrast **HTTP-based API frameworks.**
-   Recognize **other web API protocols.**

## API = "application programming interface"

-   "application" = function, website... any computerized thing
-   "programming" = can be used in code
-   "interface" = way to interact with (talk to) something

**ü§ñ APIs allow computers to talk to one another**

## Web APIs

> "httr2 is a ground-up rewrite of httr that provides a pipeable ***API*** with an explicit request object that solves more problems felt by packages that wrap ***APIs***" (httr2 docs, emphasis added)

-   üíª Technically any function's list of arguments is an API
-   üï∏Ô∏è This book = ***web*** APIs
    -   Web API = API on the internet
    -   For rest of book, "API" means "web API"

## Web API Examples

-   [APIs.guru](https://apis.guru/) = API directory
    -   2,529 APIs as of 2023-12-06
-   Cloud services
    -   üì¶ [{paws}](https://cran.r-project.org/package=paws)
    -   üì¶ [{googleAnalyticsR}](https://cran.r-project.org/package=googleAnalyticsR), etc
    -   üì¶ [{AzureR}](https://github.com/Azure/AzureR) family
-   Government agencies ([OpenFEC](https://api.open.fec.gov/developers/))
-   *Much* more to come in **"How can I find APIs?"** (Chapter 7?)

::: notes
-   Go back to project tab after this
:::

## HTTP

-   HTTP = HyperText Transfer Protocol
    -   "HyperText" = web pages
    -   "Transfer" = move
    -   "Protocol" = rules
    -   "rules for moving web pages"
-   HTTP(S) = most of internet communication

## HTTP Requests

-   Request methods (in approximate order of use):
    -   GET (fetch existing thing)
    -   POST (push new thing)
    -   DELETE (delete existing thing)
    -   PATCH (change existing thing)
    -   PUT (replace existing thing)
    -   CONNECT, OPTIONS, HEAD, TRACE (very rare)
-   Request = URL + headers + method + body

## Browsers and HTTP Requests

https://wapir.io/apis.html is an HTTP request:

-   `https://` = "use HTTP(s) protocol"
-   `wapir.io/apis.html` = URL
-   Cookies, etc sent as invisible headers
-   `GET` = protocol
-   Empty body

## HTTP API Frameworks: Historic

-   RPC = Remote Procedure Call
    -   Endpoints = actions
    -   XML-RPC & JSON-RPC popular early
    -   Often just GET ("GET /deleteItem/1234")
-   SOAP = Simple Objects Access Protocol (briefly huge, mostly dead)
    -   Evolved from XML-RPC
    -   Technically not limited to HTTP

## HTTP API Frameworks: Modern

-   REST = REpresentational State Transfer
    -   Most common by far
    -   Stateless (call defines the object)
    -   Technically endpoints = nouns
    -   What we'll focus on in most of book
-   GraphQL = Graph Query Language
    -   Body defines everything
        -   JSON with wildcards telling server what to fill in
    -   Basically GET + 1 endpoint
    -   Will probably get its own chapter

## Other API Frameworks

-   websocket
    -   Alternative to HTTP
    -   `ws://` or `wss://`
    -   2-way communication
    -   {websocket} package
-   gRPC = Google RPC
    -   Becoming very popular
    -   Good for real-time, 2-way communication
    -   Uses HTTP/2 (more socket-like)

Deeper dive coming in later chapter (9?)!

## Meeting Videos

### Cohort 1

`r knitr::include_url("https://www.youtube.com/embed/URL")`

<details>
<summary> Meeting chat log </summary>

```
LOG
```
</details>
