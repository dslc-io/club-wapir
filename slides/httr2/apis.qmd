---
engine: knitr
title: How do computers communicate?
---

# Ô∏è‚úÖ Learning objectives

-   Explain **what an API is.**
-   Recognize **examples of web APIs.**
-   Identify the **pieces of an HTTP request.** 
-   Describe how **accessing a web page through a browser** involves an **HTTP request.**
-   Compare and contrast **HTTP-based API frameworks.**
-   Recognize **other web API frameworks.**

::: notes
-   Do those make sense?
-   Show of hands, who cares about these?
-   Anything else you'd want to see?
:::

# What is an API?

## API = "application programming interface"

-   "application" = function, website... any computerized thing
-   "programming" = can be used in code
-   "interface" = way to interact with something

**ü§ñ APIs allow computers to talk to one another**

::: notes
-   Right level?
:::

## Web APIs

-   üíª Technically any function's list of arguments is an API

> "httr2 is a ground-up rewrite of httr that provides a pipeable ***API*** with an explicit request object that solves more problems felt by packages that wrap ***APIs***" (httr2 docs, emphasis added)

-   üï∏Ô∏è This book = ***web*** APIs
    -   Web API = API on the internet
    -   For rest of book, "API" means "web API"

::: notes
-   httr2 quote helpful/interesting?
:::

## Web API Examples

-   Cloud services ([{paws}](https://cran.r-project.org/package=paws))
-   Government agencies ([OpenFEC](https://api.open.fec.gov/developers/))
-   Random data ([sunrisesunset.io](https://sunrisesunset.io/api/))
-   Services ([OpenAI](https://openai.com/product))
-   [APIs.guru](https://apis.guru/) = API directory
    -   2,529 APIs as of 2023-12-06
-   *Much* more to come in ["How can I find APIs?"](apis-find.html){target="wapir-club_apis-find"}

::: notes
-   Number of examples good?
-   Variety of examples good?
-   Deep enough, or more-full usage examples?
-   What would you expect in book (vs slides)?
:::

# What is an HTTP request?

## HTTP

-   HTTP = HyperText Transfer Protocol
    -   "HyperText" = web pages
    -   "Transfer" = move
    -   "Protocol" = rules
    -   "rules for moving web pages"
-   HTTP(S) = most of internet communication

::: notes
-   If anyone asks: 1.1 = most, 2.0 = 2-way
-   Compare to HTML (HyperText Markup Language)
:::

## HTTP Requests

-   Request methods (in approximate order of use):
    -   `GET` (fetch existing thing)
    -   `POST` (push new thing)
    -   `DELETE` (delete existing thing)
    -   `PATCH` (change existing thing)
    -   `PUT` (replace existing thing)
    -   `CONNECT`, `OPTIONS`, `HEAD`, `TRACE` (very rare)
-   Request = URL + headers + method + body

::: notes
-   Methods aren't strict
    -   API owner can do weird things.
    -   GET or POST often used for ~everything
    -   Stuff expected & returned can be weird
-   CONNECT = "start 2-way communication" (eg ask server to be a bridge)
-   OPTIONS should tell you method options
-   HEAD returns headers that you'd get with GET
    -   Eg, use it to check if DL would be big.
-   TRACE returns the request as the final server received it, with header info about route.
:::

## Browsers and HTTP Requests

https://wapir.io/apis.html is an HTTP request:

-   `https://` = "use HTTP(s) protocol"
-   **URL:** `wapir.io/apis.html` = URL
-   **headers:** Cookies (plus some info about your browser)
-   **method:** `GET`
-   **body:** Empty

::: notes
-   Request = URL + headers + method + body
-   You (kinda) use APIs all the time!
:::

# What are API frameworks?

-   Systems for defining APIs
-   More like philosophies than rules

::: notes
-   (don't linger here)
:::

## HTTP API Frameworks: Historic

-   RPC = Remote Procedure Call
    -   Endpoints = actions
    -   XML-RPC & JSON-RPC popular early
    -   Often just `GET` (`GET /deleteItem/1234`)
-   SOAP = Simple Objects Access Protocol (briefly huge, mostly dead)
    -   Evolved from XML-RPC
    -   Technically not limited to HTTP

::: notes
-   RPCs are making a come back (we'll see in a couple slides)
:::

## HTTP API Frameworks: Modern

-   REST = REpresentational State Transfer
    -   Most common by far
    -   Stateless (call defines the object)
    -   Technically endpoints = nouns
    -   What we'll focus on in most of book
-   GraphQL = Graph Query Language
    -   Body defines everything
        -   JSON with wildcards telling server what to fill in
    -   Basically `GET` + 1 endpoint
    -   More details in ["How else can I communicate with APIs from R?"](accessing-other.html){target="wapir-club_accessing-other"}

::: notes
-   REST APIs often called "RESTful" APIs.
-   GraphQL should be bigger than it is for data science
:::

## Other API Frameworks

-   websocket
    -   `ws://` or `wss://` vs `http://` or `https://`
    -   2-way communication
    -   {websocket} package
-   gRPC = Google RPC
    -   Good for real-time, 2-way communication
    -   Uses HTTP/2 (more socket-like)

Deeper dive coming in ["How else can I communicate with APIs from R?"](accessing-other.html){target="wapir-club_accessing-other"}!

::: notes
-   Shiny is websocket between server (R) and ui (JS)
-   gRPC best for tightly coupled microservices
:::

# Meeting Videos

## Cohort 1

`r knitr::include_url("https://www.youtube.com/embed/URL")`

<details>
<summary> Meeting chat log </summary>

```
LOG
```
</details>
