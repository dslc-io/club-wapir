---
engine: knitr
title: 2. Get started with APIs
---

# TODO

::: nonincremental
-   Skip tidyverse, re-integrate schemas?
:::


# ️✅ Learning objectives

::: nonincremental
-   Fetch json-formatted data from the web.
-   Parse nested lists with the {tidyverse}.
:::

```{r}
#| label: apis-start-packages-used
#| eval: true
library(dplyr)
library(jsonlite)
library(purrr)
library(tibble)
library(tidyr)
```

::: notes
-   Pretend this is our second meeting. Chapter 1 talked about what APIs are, but we haven't done httr2 yet.
-   Has anybody used:
    -   nested lists (unnest)
    -   tibble::enframe()
:::

# Where can I find APIs?

![](/images/apisguru.png)

::: notes
-   I'm very likely going to build a replacement for APIs.guru.
    -   Doesn't update often enough.
    -   Most recent merge: March 8, 2023
    -   It should live up to its name, and be easier to update!
-   But principles will still hold!
:::

## Browsing APIs.guru

([launch APIs.guru to explore](https://apis.guru/))

-   Warning: No API database is complete! Just because it isn't here doesn't mean it doesn't exist!
-   Good if you know what you're looking for
-   Less good for exploration
-   But we can grab the data directly!

## The APIs.guru API List

-   ([list.json result](https://api.apis.guru/v2/list.json))

::: notes
-   JSON = JavaScript Object Notation
-   By far most common format for API data
-   I'm using [JSONVue browser extension](https://chromewebstore.google.com/detail/jsonvue/chklaanhfefbnpoihckbnefhakgolnmc?pli=1) 
-   JSON: Great for nested data
-   We aren't going to dig into the format because we won't use it directly
:::

## Fetch all APIs.guru APIs

::: fragment
```{r}
#| label: apis_start-apis_guru_list
all_apis <- jsonlite::fromJSON("https://api.apis.guru/v2/list.json")
```
:::

```{r}
#| label: apis_start-apis_guru_list_download
#| eval: false
#| include: false
download.file(
  "https://api.apis.guru/v2/list.json",
  here::here("slides", "httr2", "apis-start", "list.json")
)
```
```{r}
#| label: apis_start-apis_guru_list_load
#| eval: true
#| include: false
all_apis <- jsonlite::fromJSON(here::here("slides", "httr2", "apis-start", "list.json"))
```

::: fragment
```{r}
#| label: apis_start-apis_guru_list_length
#| eval: true
length(all_apis)
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_head
#| eval: true
head(names(all_apis))
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_depth
#| eval: true
purrr::pluck_depth(all_apis)
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_str
#| eval: true
str(head(all_apis, 2), max.level = 2)
```
:::

::: notes
-   jsonlite = one of several packages for parsing JSON
    -   We'll stick with it because it works & is used by higher-level packages
    -   Used in {shiny}, {httr}, {httr2}, dozens of other packages
-   fromJSON does some automatic guessing, we'll come back to this in a later chapter
    -   Alternatives: read_json reads file, parse_json reads string; don't guess by default 
-   This result is a huge, nested list
-   purrr::pluck_depth() tells you how nested a list is
-   hard to see this. Let's rectangle it!
:::

## Fetch JSON: Exercises 

(not written yet, but general idea will be...)

-   Provide URLs of JSON-formatted data
    -   How many top-level items are described in this data?
    -   How deeply is this data nested?
    -   What is the *X* of the *Y*th item?

::: notes
-   This data will be on the book's website to avoid changes.
:::

# Rectangling data

-   "Rectangling" = converting hierarchical data to data frame
-   Some background in [R4DS Chapter 23: "Hierarchical data"](https://r4ds.hadley.nz/rectangling.html)
    -   But we'll use different methods
-   Trial-and-error = ok

::: notes
-   Rectangular data is nice because then you can use normal tidyverse functions
-   There's a tidyverse function that I think handles returns from APIs better than what they show there.
-   You might need to play around with unnest_wider vs unnest_longer (we'll see examples in a sec). Don't feel like you're doing something wrong!
-   In the next chapter (?), we'll see how to use the API spec (when it's available) to help us guess less.
:::

## Unnesting

-   Is `value` a list of lists of observations?
    -   `tidyr::unnest_longer(value)` separates into rows
-   Is `value` a list of lists of variables?
    -   `tidyr::unnest_wider(value)` separates into columns
-   `tidyr::unnest_auto()` uses heuristic to choose between those

::: notes
-   Tidy data: Every row is a single observation, every column is a single variable.
-   "Heuristic" is a fancy word for "set of rules." I used it here specifically so I can define it and try to demystify it.
-   `unnest_auto()` isn't perfect.
:::

## How does `unnest_auto()` choose?

```{mermaid}
%%| eval: true
%%| echo: false
flowchart TD
    B{{"How many elements have names?"}}
        B -->|"none"| C["Unnest longer, drop indices"]
        B -->|"some"| C
        B -->|"all"| D{{"Are any names reused?"}}
            D -->|"yes"| E["Unnest wider"]
            D -->|"no"| F["Unnest longer, keep indices"]
```

::: notes
Would it be helpful to see this as code?
:::

## unnnest_auto code {visibility="hidden"}

::: {style="font-size: 0.7em;"}

1.  `element_names <- purrr::map(df$col, names)`
2.  `has_null <- unique(purrr::map_lgl(element_names, is.null))`
3.  `identical(has_null, TRUE)`? 
    -   `unnest_longer(col, indices_include = FALSE)`
4.  `identical(has_null, FALSE)`?
    -   `common_names <- purrr::reduce(element_names, intersect)`
    -   `length(common_names) > 0`?
        -   `unnest_wider(col)`
    -   `length(common_names) == 0`?
        -   `unnest_longer(col, indices_include = TRUE)`
5.  Leftovers: `unnest_longer(col, indices_include = FALSE)`

:::

## What does `unnest_auto()` miss? (1)

Column is a named list (not a list of named lists).

-   Error: Names are lost
-   Check: `rlang::is_named(df$col)`
-   Fix: `dplyr::mutate(col_name = names(col))` before unnesting.

## What does `unnest_auto()` miss? (2)

One or more elements of a list column are empty.

-   Error: Assumes `unnest_longer()`, even if it's just some missing values among a column that is obviously otherwise `unnest_wider`-worthy.
-   Check: `any(lengths(df$col) == 0)`
-   Fix: Do the `unnest_auto()` checks only on values of `col` that have `lengths(col) > 0`

::: notes
-   An empty item doesn't have any names.
-   Could be `NULL` or empty `list()`
-   This is relatively common in JSON.
:::

## What does `unnest_auto()` miss? (3)

One or more elements of a list column lacks names, other elements have names.

-   Error: Names are lost.
-   Check: (flowchart already tests this, but makes the wrong decision)
-   Fix: `unnest_longer(col, indices_to = "descriptive_name")` as fall-through

## How should I choose unnest direction?

```{mermaid}
%%| eval: true
%%| echo: false
flowchart TD
    A{{"Is the overall column named?"}}
        A -->|"yes"| AA["Create a names column"]
            AA --> B
        A -->|"no"| B
    B{{"How many non-empty elements have names?"}}
        B -->|"none"| C["Unnest longer, drop indices"]
        B -->|"some"| F
        B -->|"all"| D{{"Are any names reused?"}}
            D -->|"yes"| E["Unnest wider"]
            D -->|"no"| F["Unnest longer, keep indices"]
```

::: notes
-   Does the overall column have names? Avoid losing the names
-   For the name check, only use non-empty names.
-   When all have names you should validate! Overlapping names could be coincidental (eg, first version is always "v1", some have additional versions)
-   When you keep indices, you should give them a descriptive name.
-   We'll see this in code as we go.
:::

# Rectangling APIs.guru's list

## `enframe()`

::: fragment
```{r}
#| label: apis_start-apis_guru_list_df
#| eval: true
#| code-line-numbers: 1-2|2
all_apis_df <- all_apis |>
  tibble::enframe(name = "api_name")
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_df2
#| eval: true
all_apis_df
```
:::
::: notes
-   `tibble::enframe()` is underused, imo!
-   Best with named lists
-   `name` arg is often useful (if input is named)
    -   If it isn't named, set to NULL
-   `value` arg is available but we're almost always going to destroy that column
-   Need to figure out whether those values are blocks of results (rows) or separate pieces of information about a single result (columns)
:::

## `value` column: Unnest wider or longer?

(incorporate flowchart once it exists)

::: fragment
```{r}
#| label: apis_start-apis_guru_list_df_explore
#| eval: true
rlang::is_named(all_apis_df$value)
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_df_explore2
#| eval: true
#| code-line-numbers: 1|2|3
non_empties <- all_apis_df$value[lengths(all_apis_df$value) > 0]
element_names <- purrr::map(non_empties, names)
has_null <- unique(purrr::map_lgl(element_names, is.null))
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_df_explore3
#| eval: true
has_null
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_df_explore4
#| eval: true
common_names <- purrr::reduce(element_names, intersect)
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_df_explore5
#| eval: true
common_names
```
:::

::: notes
-   Wider if multiple variables per value, longer if multiple observations per value.
-   The purrr reduce thing checks for names that everything shares (inspired by unnest_auto).
-   (make sure everyone groks why wider)
:::

## Unnest values

::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_versions
#| eval: true
all_apis_versions <- all_apis_df |>
  tidyr::unnest_wider(value)
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_versions2
#| eval: true
all_apis_versions
```
:::

## What if we went longer?

```{r}
#| label: apis_start-incorrectly_unnest_longer
#| eval: true
all_apis_df |>
  tidyr::unnest_longer(value)
```

::: notes
-   Thankfully going the wrong way is often obvious.
-   `tidyr::unnest()` creates this same monstrosity
:::

## `choose_unnest_direction()`

```{r}
#| label: apis_start-choose_unnest_direction
#| eval: true
# Based on `tidyr::unnest_auto` and `tidyr:::guess_dir`
choose_unnest_direction <- function(df, col) {
  col <- tidyselect::vars_pull(dplyr::tbl_vars(df), {{col}})
  col_contents <- df[[col]]
  code <- character()
  
  if (rlang::is_named(col_contents)) {
    code <- c(
      code,
      glue::glue(
        "dplyr::mutate(descriptive_name = names({col}), .before = {col})"
      )
    )
  }
  
  non_empties <- col_contents[lengths(col_contents) > 0]
  
  element_names <- purrr::map(non_empties, names)
  has_null <- unique(purrr::map_lgl(element_names, is.null))
  if (identical(has_null, TRUE)) {
    code <- c(
      code, 
      glue::glue("tidyr::unnest_longer({col}, indices_include = FALSE)")
    )
    return(glue::glue_collapse(code, sep = " |>\n  "))
  } else if (identical(has_null, FALSE)) {
    common_names <- purrr::reduce(element_names, intersect)
    n_common <- length(common_names)
    if (n_common > 0) {
      code <- c(
        code,
        glue::glue("tidyr::unnest_wider({col})")
      )
      return(glue::glue_collapse(code, sep = " |>\n  "))
    }
  }
  code <- c(
    code,
    glue::glue("tidyr::unnest_longer({col}, indices_to = \"descriptive_name\")")
  )
  return(glue::glue_collapse(code, sep = " |>\n  "))
}
```

::: notes
This has some tidyeval, so I'll probably move it to a package and talk about it or put it online to copy/paste, rather than showing the code here
:::

## Unnest versions: Wider or longer?

::: fragment
```{r}
#| label: apis_start-apis_guru_list_versions
#| eval: true
rlang::is_named(all_apis_versions$versions)
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_versions2
#| eval: true
#| code-line-numbers: 1|2|3
non_empties <- all_apis_versions$versions[lengths(all_apis_versions$versions) > 0]
element_names <- purrr::map(non_empties, names)
has_null <- unique(purrr::map_lgl(element_names, is.null))
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_versions3
#| eval: true
has_null
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_versions4
#| eval: true
common_names <- purrr::reduce(element_names, intersect)
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_versions5
#| eval: true
common_names
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_versions6
#| eval: true
choose_unnest_direction(all_apis_versions, versions)
```
:::

## Unnest versions

::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_versions_longer
#| eval: true
all_apis_longer <- all_apis_versions |>
  tidyr::unnest_longer(versions, indices_to = "version")
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_versions_longer_print
#| eval: true
all_apis_longer
```
:::

## What if we went wider?

```{r}
#| label: apis_start-apis_start-apis_guru_list_all_apis_preferred_wide
#| eval: true
all_apis_versions |> head() |> tidyr::unnest_wider(versions)
```

::: notes
-   `head()` because otherwise we have something like 800 new columns
-   Note the `NULL`s
:::

## Preferred versions

::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_preferred
#| eval: true
#| code-line-numbers: 1-2|3
all_apis_preferred <- all_apis_longer |>
  dplyr::filter(preferred == version) |>
  dplyr::select(api_name, version, versions)
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_preferred_print
#| eval: true
all_apis_preferred
```
:::

## Preferred versions: Wider or longer?

::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_preferred_explore
#| eval: true
choose_unnest_direction(all_apis_preferred, versions)
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_preferred_explore2
#| eval: true
head(names(all_apis_preferred$versions))
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_preferred_explore3
#| eval: true
all_apis_preferred_wide <- all_apis_preferred |>
  tidyr::unnest_wider(versions)
```
:::

::: notes
-   We already dealt with these names, don't need the mutate.
:::

## Preferred versions unnested

```{r}
#| label: apis_start-apis_guru_list_all_apis_preferred_wide_print
#| eval: true
all_apis_preferred_wide
```

## Preferred versions glimpse

```{r}
#| label: apis_start-apis_guru_list_all_apis_preferred_wide_glimpse
#| eval: true
dplyr::glimpse(all_apis_preferred_wide)
```

## info: wider or longer?

```{r}
#| label: apis_start-apis_guru_list_all_apis_info_wider
#| eval: true
choose_unnest_direction(all_apis_preferred_wide, info)
all_apis_preferred_wide |> 
  tidyr::unnest_wider(info, names_sep = "_")
```

::: notes
-   `names_sep` avoids name overlap & shows us all the things that came from info
-   Notice that it went from 10 columns to 76.
:::

## info: `hoist()`

::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_info_hoist
#| eval: true
all_preferred_apis_with_categories <- all_apis_preferred_wide |>
  tidyr::hoist(info, categories = "x-apisguru-categories")
```
:::
::: fragment
```{r}
#| label: apis_start-apis_guru_list_all_apis_info_hoist2
#| eval: true
all_preferred_apis_with_categories
```
:::

## Filter APIs

```{r}
#| label: apis_start-apis_guru_list_all_apis_preferred_wide_filter
#| eval: true
#| code-line-numbers: 1-2|3-5
all_apis_preferred_wide |>
  tidyr::hoist(info, categories = "x-apisguru-categories") |>
  dplyr::rowwise() |>
  dplyr::filter("open_data" %in% categories) |>
  dplyr::ungroup()
```

::: notes
-   Point here is now we can work with this as data.
-   Could also unnest_longer and filter for "open_data"
-   `swaggerUrl` is JSON, `swaggerYamlUrl` is YAML version of the same thing
-   YAML is another data format. Technically YAML is a superset of JSON, with added commenting capabilities.
-   RMarkdown headers + package descriptions are YAML-related.
-   We'll see more about YAML and find out what "Swagger" means in the next chapter!
:::

## Rectangling: Exercises

-   Provide sample (constructed) data, have you choose direction.
-   To include:
    -   Simple longer.
    -   Simple wider.
    -   Overall column is named, otherwise nothing to unnest.
    -   Overall column is named, then there's stuff to unnest.
    -   Empty values, otherwise clearly wider.
    -   `unnest_auto()` goes wider, but shared names are coincidental.
    -   Some elements unnamed, but definitely longer.

# Survey

[Please let me know what you think about this chapter!](https://forms.gle/jiq4jsaXV6accnNS6)

::: notes
https://forms.gle/jiq4jsaXV6accnNS6
:::
