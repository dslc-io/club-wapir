---
engine: knitr
title: How can I get a lot of data from an API?
---

# ️✅ Learning objectives

::: nonincremental
-   Find information about pagination in API docs and descriptions.
-   Retry API requests respectfully.
-   Retrieve multiple pages of data from an API.
-   Process lists of {httr2} responses.
:::

```{r}
#| label: httr2-pagination-packages-used
#| eval: true
library(httr2)
```

::: notes
"After we finish this chapter, we'll be able to..." (objectives)
:::

# What is pagination?

# How can I determine how an API handles pagination?

# How do I perform pagination?

## req_retry()

## req_perform_iterative()

## Iteration helpers: iterate_with_offset()

## Offset example: FEC (or crossref?)

## Iteration helpers: iterate_with_cursor()

## Cursor example: Crossref

## Iteration helpers: iterate_with_link_url()

## Link-URL example: MTG

## Roll-your-own iteration

## Roll-your-own example: Disney? DnD?

https://api.disneyapi.dev/character

https://api.open5e.com/monsters/?limit=100

(consider submitting that to httr2 as an iteration helper, it's pretty common)

# How do I parse paginated responses?

## resps_data()

## resps_data() example(s)

## resps_data() friends


# Old slides

## Pagination

-   `httr2::req_perform_iterative()`
-   `next_req` = function
    -   `iterate_with_offset()` to increment query parameter (`?page=1`, `?page=2`)
    -   `iterate_with_cursor()` to extract next page from response
    -   `iterate_with_link_url()` to follow Link in resp header

## Pagination: FEC

```{r}
#| label: httr2-pagination-fec
resps <- request("https://api.open.fec.gov/v1/candidates") |> 
  req_headers("X-Api-Key" = "DEMO_KEY") |> 
  req_url_query(office = "H", per_page = 100, election_year = 2020) |> 
  req_perform_iterative(
    iterate_with_offset(
      "page",
      resp_pages = \(resp) resp_body_json(resp)$pagination$pages # Check once
    ),
    max_reqs = Inf # Important! Default = 20
  )
```

## Pagination: YouTube

```{r}
#| label: httr2-pagination-youtube
resps <- request("https://youtube.googleapis.com/youtube/v3") |> 
  req_url_path_append("playlists") |> 
  req_url_query(part = "snippet", mine = TRUE, maxResults = 50) |> 
  req_auth_bearer_token(IGNORE_FOR_NOW) |> 
  req_perform_iteratively(
    iterate_with_cursor(
      "pageToken",
      function(resp) resp_body_json(resp)$nextPageToken
    )
  )
```

## Parsing multiple responses

-   `httr2::resps_data()` to combine responses from `req_perform_*()`
-   Provide function to extract data from single resp as vector or df.
-   More details in Chapter 6.
