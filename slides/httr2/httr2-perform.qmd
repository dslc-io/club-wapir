---
engine: knitr
---

# How can I get a lot of data from an API?

```{r 04-setup, include = FALSE}
library(httr2)
```

**Learning objectives:**

-   Control the behavior of large requests.
-   Deal with errors in api calls.
-   Request paginated data.
-   Perform multiple requests.
-   Stream data from an API.

## Controlling large requests {-}

-   `httr2::req_progress()` adds a progress bar for requests that transfer a lot of data.
-   `httr2::req_timeout()` to add a maximum wait time in seconds
-   `httr2::req_cache()` to avoid re-calling slow calls

## Throttling and retries {-}

-   APIs often throw errors if hit too fast
-   `httr2::req_throttle()` to slow down
    -   `realm` when endpoints have different limits ("Tier 1" vs "Tier 2")
-   `httr2::req_retry()` to try again for transient failures
    -   Default: Statuses 429 & 503 = transient
    -   (optional) `is_transient` function to override
    -   (optional) `after` function to extract wait from response

## Dealing with errors {-}

-   `httr2::req_error()` to handle errors
    -   `is_error` function to escalate something to an error
        -   *Eg: Empty response you know isn't really empty*
    -   `body` function to parse response into `rlang::abort()` message.
        -   *Eg: API description gives details of an error code's meaning*

## Pagination {-}

-   `httr2::req_perform_iterative()`
-   `next_req` = function
    -   `iterate_with_offset()` to increment query parameter (`?page=1`, `?page=2`)
    -   `iterate_with_cursor()` to extract next page from response
    -   `iterate_with_link_url()` to follow Link in resp header

## Pagination: FEC {-}

```{r 04-pagination-fec, eval = FALSE}
resps <- request("https://api.open.fec.gov/v1/candidates") |> 
  req_headers("X-Api-Key" = "DEMO_KEY") |> 
  req_url_query(office = "H", per_page = 100, election_year = 2020) |> 
  req_perform_iterative(
    iterate_with_offset(
      "page",
      resp_pages = \(resp) resp_body_json(resp)$pagination$pages # Check once
    ),
    max_reqs = Inf # Important! Default = 20
  )
```

## Pagination: YouTube {-}

```{r 04-pagination-youtube, eval = FALSE}
resps <- request("https://youtube.googleapis.com/youtube/v3") |> 
  req_url_path_append("playlists") |> 
  req_url_query(part = "snippet", mine = TRUE, maxResults = 50) |> 
  req_auth_bearer_token(IGNORE_FOR_NOW) |> 
  req_perform_iteratively(
    iterate_with_cursor(
      "pageToken",
      function(resp) resp_body_json(resp)$nextPageToken
    )
  )
```

## Multiple requests {-}

-   Manually create list of separate requests
-   Perform all:
    -   `httr2::req_perform_parallel()` all at once
        -   No reauth, no throttle, no retry, no cache
    -   `httr2::req_perform_sequential()` serially
        -   Slower but can use other settings

## Multiple requests: YouTube {-}

Get 10 most recent videos from list of playlists.

```{r 04-multiple-requests, eval = FALSE}
base_req <- request("https://youtube.googleapis.com/youtube/v3") |> 
  req_url_path_append("playlistItems") |> 
  req_url_query(part = "contentDetails", maxResults = 10) |> 
  req_auth_bearer_token(IGNORE_FOR_NOW)

resps <- purrr::map(
  playlists, \(playlist) req_url_query(base_req, playlistId = playlist)
) |> 
  req_perform_parallel() # or req_perform_sequential()
```

## Parsing multiple responses {-}

-   `httr2::resps_data()` to combine responses from `req_perform_*()`
-   Provide function to extract data from single resp as vector or df.
-   More details in Chapter 6.

## Streaming {-}

-   `httr2::req_perform_stream()` to stream data from API
-   Blocks R session (see Chapter 10 for alternative)
-   Call function every `buffer_kb` kilobytes
-   *Eg: Save to file, different process could read that file from Shiny*

## Streaming: Simple example {-}

```{r 04-streaming}
show_bytes <- function(x) {
  cli::cli_inform("Got {length(x)} bytes at {Sys.time()}.")
  TRUE
}
resp <- httr2::request(httr2::example_url()) |>
  httr2::req_url_path("/stream-bytes/100000") |>
  httr2::req_perform_stream(show_bytes, buffer_kb = 32)
```

## Is this interesting? {-}

-   `req_options()` lets you directly set libcurl options not available in {httr2}
-   Should I dig through and find what's available but not implemented?

## Meeting Videos {-}

### Cohort 1 {-}

`r knitr::include_url("https://www.youtube.com/embed/URL")`

<details>
<summary> Meeting chat log </summary>

```
LOG
```
</details>
