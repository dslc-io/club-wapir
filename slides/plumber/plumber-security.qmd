---
engine: knitr
---

# How can I authenticate API users?

**Learning objectives:**

-   Implement API keys for a plumber API.
-   Implement OAuth2 authentication for a plumber API.
-   Use cookies to save and restore API user state.
-   Set and read encrypted cookies for API users.
-   (Something about things like Posit Connect?)

# What did I move here from the httr2 version?

# What is authentication?

::: notes
-   Before we dive into the how-to, let's try to understand why authentication is complicated.
:::


## The 2 auths

::::: columns
:::: column
::: {.fragment fragment-index=0}
Authentication
:::

-   Verifying who you are
-   Uses some sort of "credentials"
::::
:::: column
::: {.fragment fragment-index=1}
Authorization
:::

-   Granting access
::::
:::::

-   Both often abbreviated "auth"
-   Often used interchangeably

::: fragment

> The HTTP *Authorization* request header can be used to provide credentials that *authenticate* a user agent with a server, allowing access to a protected resource.
> â€” [MDN web docs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Authorization)

:::

::: notes
-   "TECHNICALLY..."
-   Credentials = username & password, api key, temporary token...
-   "Despite what the internet will insist on telling you..." ("Often used")
-   Mozilla Developer Network (MDN) is pretty much THE reference for these things, and it mixes them.
-   (Learned there that server is *supposed* to send 401 with info about how to auth in `WWW-Authenticate` header! Haven't found an API that actually does that.)
:::

## What are the dangers of leaked creds?

::::: columns
:::: column
::: fragment
How much control does it have?

-   Can it lock you out?
-   Can it reveal sensitive data?
:::
::::
:::: column
::: fragment
How long does it last?

-   Shorter = safer
-   Can you revoke it?
:::
::::
:::::

::: fragment
How likely is it to leak?

-   When do you send it?
-   Where do you send it?
-   How often do you send it?
:::


## Types of authentication

::::: columns
:::: column
::: fragment
ðŸ”´ **HTTP Basic:** username + password sent with request

-   Access entire account
-   Often difficult to turn off
:::
::: fragment
ðŸŸ  **API Key:** password-like thing sent with request

-   Usually key == you
-   You can often revoke
:::
::::
:::: column
::: fragment
ðŸŸ¡ **Bearer Token:** shorter-lived api-key-like thing

-   Different token for different use
-   Often short-lived
:::
::: fragment
ðŸŸ¢ **OAuth:** Multi-step process to generate a key

-   Exists to minimize dangers
-   Multiple short-lived pieces
:::
::::
:::::

::: notes
-   There are other things, but these three cover almost everything.
-   And almost nobody uses the first one for APIs anymore.
-   Oauth not always implemented correctly 
-   Other schemes like api keys in cookies, SSL certs not discussed here
:::


## Review of authentication schemes

(FROM `httr2-authentication.Rmd` once that's edited)

## API key considerations {-}

-   Accept in URL query?
    -   May be easier for user (eg, purely in-browser)
    -   Less secure than header
-   Cookies? {-}
    -   If you set cookie, you need to read it (see later slide)
    -   Probably also accept header

## API keys with plumber: Process Keys {-}

```{r plumber-security-api-key-filter-authorize, eval = FALSE}
#* Authorize user
#* @filter authorize_api_key
function(req) {
  api_key <- req$HTTP_AUTHORIZATION %||%            # Header
    req$session$api_key %||% req$cookies$api_key    # Cookies
  # Code to validate and process the API key.
  req$authorized <- TRUE # Or FALSE, set in auth section
  plumber::forward()
}
```

-   `#* @preempt authorize_api_key` if endpoint doesn't use auth

## API keys with plumber: Error {-}

```{r plumber-security-api-key-filter-error, eval = FALSE}
#* Error: Unauthorized
#* @filter stop_unauthorized
function(req) {
  if (req$authorized) {
    plumber::forward()
  }
  res$status <- 401L
  # TODO: do_the_log_thing() per plumber-errors.Rmd
  res$serializer <- plumber::serializer_json
  res$body <- list(
    error = "Unauthorized",
    message = "Obtain an API key at https://your_key_process.html"
  )
}
```

-   `#* @preempt stop_unauthorized` if endpoint doesn't *require* auth
    -   *In addition to `authorize_api_key`* if not used at all

## OAuth2 with plumber {-}

-   Endpoint for user to initiate Oauth2 dance
    -   Will launch browser for interaction with OAuth2 provider
-   Endpoint for provider to send code
-   Use state params to keep track of user
-   End result is a bearer token (+ possibly other pieces)

TODO: Actually implement this and make sure it works how you think!

## Using cookies for user state {-}

-   Client controls cookies, so don't store anything you "own"
    -   Eg, store a key, not a user ID
    -   Safer: Store preferences
    -   General rule: things you'd accept as user input
-   `res$setCookie()` for unencrypted data

## Encrypted cookies {-}

-   `pr_cookie(pr, key, name)` in router
    -   Tells plumber to read/write that cookie.
    -   Encrypts with `key`
    -   By default `name = "plumber"`
        -   All stored in `req$session$plumber` 
-   Can include lists (ends up as json)
-   TODO: Add details about env vars and/or keyring (probably same as httr2 slides)

## Meeting Videos {-}

### Cohort 1 {-}

`r knitr::include_url("https://www.youtube.com/embed/URL")`

<details>
<summary> Meeting chat log </summary>

```
LOG
```
</details>
