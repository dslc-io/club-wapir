---
engine: knitr
title: Easily access APIs with {httr2}
resources:
  - "httr2/openfec_response.json"
---

# ️✅ Learning objectives

::: nonincremental
-   Use API docs to explore available endpoints.
-   Fetch data from an API with {httr2}.
-   Build a {httr2} request piece-by-piece.
:::

```{r}
#| label: httr2-packages-used
#| eval: true
library(jsonlite)
library(tibblify)
library(tidyr)
library(dplyr)
library(httr2)
```

::: notes
"After we finish this chapter, we'll be able to..." (objectives)
-   Not every possible API, but we'll get the basics.
-   I'm also hoping to make it clear why httr2 is useful!
:::

## What can we do so far?

:::: columns
::: {.column .fragment}
We can:

-   Access APIs that can be accessed in a web browser
-   Copy/paste or manually build URLs
-   Pass an authentication key as part of a URL
-   Fetch JSON data with {jsonlite}
-   Fetch YAML data with {yaml}
:::
::: {.column .fragment}
We can't *yet*:

-   Access APIs that can't be accessed in a web browser
-   Build API requests systematically
-   Access APIs that require authentication
-   Fetch other types of data (raw text, images, videos, etc)
:::
::::

::: notes
-   Browser: As long as it isn't using our login information without us realizing it.

-   No browser: There are technically 9 types of requests (HTTP methods), we can do 1 of them so far.
-   A lot of APIs use something called "oauth", can be really confusing
-   The endpoints we've hit haven't had arguments, but almost all do
-   We can get some specific things with download.file, but need to parse each with different packages
-   ...and other things we don't yet know that we wish we could do
-   We'll use httr2 to deal with all of these things
:::

# How can I learn about API endpoints?

## Motivating Example: OpenFEC

-   [OpenFEC: Federal Election Commission API](https://api.open.fec.gov/developers)
-   API documentation usually describes ***endpoints***
    -   endpoint: URL for specific API function

## 2020 Presidential Candidates

-   We'll focus on the [`/candidates/` endpoint](https://api.open.fec.gov/developers#/candidate/get_v1_candidates_)
-   [https://api.open.fec.gov/v1/candidates/?election_year=2020&office=P&api_key=DEMO_KEY](httr2/openfec_response.json)

```{r}
#| label: httr2-motivating-download
#| eval: false
#| include: false
url <- "https://api.open.fec.gov/v1/candidates/?election_year=2020&office=P&api_key=DEMO_KEY"
openfec_response <- jsonlite::read_json(url)
saveRDS(
  openfec_response, 
  here::here("slides", "httr2", "openfec_response.rds")
)
jsonlite::write_json(
  openfec_response, 
  here::here("slides", "httr2", "openfec_response.json"),
  auto_unbox = TRUE,
  null = "null"
)
```
```{r}
#| label: httr2-motivating-read
#| eval: true
#| include: false
openfec_response <- readRDS(here::here("slides", "httr2", "openfec_response.rds"))
```
::: fragment
```{r}
#| label: httr2-motivating-example
openfec_response <- jsonlite::read_json("https://api.open.fec.gov/v1/candidates/?election_year=2020&office=P&api_key=DEMO_KEY")
```
:::
::: fragment
```{r}
#| label: httr2-motivating-tibblify
#| eval: true
tibblify(openfec_response$results) |> 
  select(name, party_full, has_raised_funds) |> 
  head()
```
:::

::: notes
-   What if we want a different year? Or a different office? Or any of the other 20 or so available parameters?
:::

# What is {httr2}?

![](/images/httr2-logo.png)

::: notes
-   We'll dig into what the letters mean in a couple slides.
-   I learned how to pronounce httr2 from this logo
:::

## What do {httr2} calls look like?

::: fragment
Pipe-based API calls
:::
::: fragment
```{r}
#| label: httr2-demo
#| code-line-numbers: "1-10|2|3-8|9|10|1-10"
candidates <- 
  request("https://api.open.fec.gov/v1") |> 
  req_url_path_append("candidates") |> 
  req_url_query(api_key = "DEMO_KEY") |> 
  req_url_query(
    election_year = 2020,
    office = "P"
  ) |> 
  req_perform() |> # Chapter 5 (next)
  resp_body_json() # Chapter 7
```
:::
::: fragment
```{r}
waldo::compare(candidates, openfec_response)
```
```{r}
#| label: httr2-demo-eval
#| eval: true
#| echo: false
waldo::compare(openfec_response, openfec_response)
```
:::

::: notes
-   I use |> base R pipe here. Pronounce it "and then".
-   httr2 calls usually involve a request, which you perform, and then you parse the response.
-   We're hitting the free, open api from the Federal Elections Commission.
-   (step through)
-   Here we build the request piece-wise
    -   We'll get into details of the functions in a few slides
-   Then we perform the request. This actually hits the server.
-   Then we parse what we get back with a resp_body function.
-   Same result as the thing we got using jsonlite.
    -   Because resp_body_json uses jsonlite.
:::

## Why "httr2"?

::: fragment
HTTP = HyperText Transfer Protocol

-   "HyperText" = web content
-   "Transfer" = exchange
-   "Protocol" = rules
-   "rules for exchanging web content"
-   HTTP(S) = most of internet communication
:::

::: notes
-   You may have seen http or https at the start of URLs (web addresses)
-   "web content" = 
    -   originally text and links (HTML = HyperText Markup Language)
    -   now data, images, videos, etc.
-   "exchange" or "move"
-   "S" means "secure"
-   If anyone asks: 1.1 = most, 2.0 = 2-way
-   2 = he rewrote it for piping
:::

## How do I use {httr2}?

::: fragment
`req_*()` functions return `httr2_request` objects
:::

::: fragment
```{r}
#| code-line-numbers: "1|1-2|2-3|3-4|1-4"
req_fec <- request("https://api.open.fec.gov/v1")
req_fec_auth <- req_url_query(req_fec, api_key = "DEMO_KEY")
req_candidates <- req_url_path_append(req_fec_auth, "candidates")
req_candidates_president <- req_url_query(req_candidates, office = "P")
```
:::
::: fragment
```{r}
pres_2024 <- req_url_query(req_candidates_president, election_year = 2024) |> 
  req_perform() |> resp_body_json()
```
:::
::: fragment
```{r}
candidates_2022 <- req_url_query(req_candidates, election_year = 2022) |> 
  req_perform() |> resp_body_json()
```
:::
::: fragment
```{r}
req_calendar <- req_url_path_append(req_fec_auth, "calendar-dates")
```
:::

::: notes
-   Imagine you're working with an API, like the FEC API
    -   What you'll very often do.
-   We'll go through function specifics in a moment, just soak in the utility of separate objects 
-   This is super important, so let's pause to sink this in
-   I'm going to drink some water while you make sure you have that.
:::

# How do I build {httr2} requests?

## `request()` & `req_path_append()`

```{r}
request("https://api.open.fec.gov/v1/candidates/")
```

::: fragment
Cleaner: "main" request object + specific path

```{r}
#| eval: true
#| code-line-numbers: "1|2-3"
req_fec <- request("https://api.open.fec.gov/v1")
req_candidates <- req_fec |> 
  req_url_path_append("candidates")
```
:::

::: fragment
```{r}
#| eval: true
req_candidates$url
```
:::

::: notes
-   httr2 "thinks" in pieces
-   You don't have to think about the `/`
-   We have to be careful about the "v1" in our request, though!
    -   More on next slide.
:::

## Don't use `req_url_path()`!

::: fragment
```{r}
#| eval: true
req_path_bad <- req_fec |> 
  req_url_path("candidates")
req_path_bad$url
```
:::

::: fragment
```{r}
#| eval: true
req_candidates$url
```
:::

::: notes
-   You probably never want `req_url_path()`
-   Notably the help docs don't show an example for this one
:::

## `req_url_query()`

::: {style="font-size:0.9em;"}
https://api.open.fec.gov/v1/candidates/***?api_key=DEMO_KEY&office=P***
:::
::: fragment
```{r}
#| eval: true
#| code-line-numbers: "1|1-5"
req_pres <- req_candidates |> 
  req_url_query(
    api_key = "DEMO_KEY",
    office = "P"
  )
```
:::

-   Can add query parameters piecewise, **even before path**!

::: fragment
```{r}
#| eval: true
#| code-line-numbers: "1|1-2|3-4|5-6"
req_fec_auth <- req_fec |> 
  req_url_query(api_key = "DEMO_KEY")
req_candidates_auth <- req_fec_auth |> 
  req_url_path_append("candidates")
req_pres2 <- req_candidates_auth |> 
  req_url_query(office = "P")
```
:::
::: fragment
```{r}
#| eval: true
identical(req_pres$url, req_pres2$url)
```
:::

::: notes
-   "Query" = stuff after "?"
-   Arguments for the endpoint
:::

## `req_url_query(.multi)`

::: fragment
```{r}
#| eval: true
#| error: true
req_url_query(req_candidates, office = c("H", "S"))
```
:::

::: fragment
`.multi = "pipe"`
```{r}
#| eval: true
req_url_query(req_candidates, office = c("H", "S"), .multi = "pipe")$url
```
:::

::: fragment
`.multi = "comma"`
```{r}
#| eval: true
req_url_query(req_candidates, office = c("H", "S"), .multi = "comma")$url
```
:::

::: fragment
`.multi = "explode"`
```{r}
#| eval: true
req_url_query(req_candidates, office = c("H", "S"), .multi = "explode")$url
```
:::

::: notes
-   APIs often can't handle multiple params with same name
-   default = "error"
-   `.` in `.multi` so it doesn't collide with a parameter named "multi"
-   "pipe" or "comma" to list them out in same parameter
-   "explode" to separate them as separate copies of that parameter (what this API actually wants)
:::

# More httr2 to come!

-   *Chapter 4 = you are here*
-   Chapter 5 = "How can I get a lot of data from an API?"
-   Chapter 6 = "How do I tell the API who I am?
-   Chapter 7 = "How can I process API responses?"
-   Chapter 8 = "How can I do other things with APIs?"

::: notes
-   5 = Pagination, retries, throttling, parallelization, etc
-   6 = Authentication & other headers
-   7 = Parsing responses
-   6 = Methods (notably POST)
:::

# What do you think?

Please complete this [survey](https://forms.gle/Wk9YWAHybRigfg7e8)!

::: notes
-   https://forms.gle/Wk9YWAHybRigfg7e8
:::
