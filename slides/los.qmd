---
title: "Learning Objectives"
engine: knitr
---

# Why learning objectives (LOs)?

## What type of LOs are we focusing on?

-   Readers probably solving semi-specific problems, so...
-   Skill-based learning objectives
    -   "After you read this chapter, you will be able to..."

::: notes
-   Any disagreement with that first bullet?
:::

## Why do they matter?

-   Students learn more when they have clear objectives.
-   Lends structure to my process.
-   Eventually: Lends structure to DSLC

::: notes
-   I like having a process!
-   Aiming to implement these across all of DSLC
-   (Eventually want to also auto-map questions to them)
:::

# Learning Objectives

## Introduction

After you read this chapter, you will be able to...

-   Explain what an API is.
-   Decide whether this book is for you.

## Part 1: How can I interact with the web from R?

:::: columns
::: column
-   Fetch json-formatted data from the web.
-   Parse nested lists with the {tidyverse}.

-   Parse nested lists with {tibblify}.
-   Use an API's OpenAPI description to determine the expected format of responses.
-   Parse API responses with {tibblify} and the response description.
:::
::: column
-   *Fetch data from an API with {httr2}.*
-   *Build a {httr2} request piece-by-piece.*
-   *Use API docs and OpenAPI descriptions to explore available endpoints.*

-   *Find authentication information in API docs.*
-   *Authenticate a request with a username and password.*
-   *Authenticate a request with an API key.*
-   *Authenticate a request with OAuth.*
:::
::::

::: notes
-   I'm adding to these as I actually present a "v1" (since reorg).
-   Italics = planned soon but not finalized/presented.
:::

## Part 1 Learning Objectives Brain Dump

:::: columns

::: column
-   Discover useful APIs
-   Fetch *lots* of data from APIs
-   Find specific APIs
:::
::: column
-   Do other things (send/update/delete data) with APIs
-   Find R packages that wrap APIs
-   (Use other forms of APIs?)
-   Get web data without APIs ({rvest})
-   Learn more about accessing APIs
:::
::::

::: notes
-   I'm deleting from these as they're covered or eliminated
    -   Moving to previous slide.
-   Discover: Just vaguely via apis.guru or similar.
-   Fetch lots: Important concept regardless of whether it's "simple"
-   Find specific: Shoved this way down the list because it will be hard to have examples that aren't easy. I think I'll replace apis.guru with a true wiki.
-   Do other: `curl_translate()` deep dive here.
-   Find R packages: I want it late so you can tell if it's a bad package
-   Others: gRPC, GraphQL, Websockets
-   rvest: Technically could skip?
-   Learn more: Book recommendations, blogs, etc.
:::

# Part 2: How can I create my own APIs with R?

(not filling this out yet)
