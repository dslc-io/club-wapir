---
title: "Introduction"
engine: knitr
---

# Ô∏è‚úÖ Learning objectives

::: nonincremental
-   Explain what an API is.
-   Decide whether this book is for you.
:::

::: notes
-   We'll talk a bit more about using LOs later in this chapter.
-   We'll pick up other information, but these are the key skills.
-   Anything else you'd want to see in an intro?
:::

# What is an API?

## API = "application programming interface"

-   "application" = function, website... any computerized thing
-   "programming" = can be used in code
-   "interface" = way to interact with something

::: fragment
**ü§ñ APIs allow computers to talk to one another**
:::

::: notes
-   Right level?
:::

## What are web APIs?

::: fragment
üíª Technically any function's list of arguments is an API
:::
::: fragment
> "httr2 is a ground-up rewrite of httr that provides a pipeable ***API*** with an explicit request object that solves more problems felt by packages that wrap ***APIs***" (httr2 docs, emphasis added)
:::
::: fragment
üï∏Ô∏è This book = ***web*** APIs

-   Web API = API on the internet
-   For rest of book, "API" means "web API"
:::

::: notes
-   httr2 quote helpful/interesting?
:::

## What are some API examples?

-   Cloud services ([{paws}](https://cran.r-project.org/package=paws))
-   Government agencies ([OpenFEC](https://api.open.fec.gov/developers/))
-   Random data ([sunrisesunset.io](https://sunrisesunset.io/api/))
-   Services ([OpenAI](https://openai.com/product))
-   [APIs.guru](https://apis.guru/) = API directory
    -   2,529 APIs as of 2024-01-22

::: notes
-   Number of examples good?
-   Variety of examples good?
-   Deep enough, or more-full usage examples?
-   What would you expect in book (vs slides)?
:::

# What will I learn?

:::: {.columns style="font-size: 0.7em;"}
::: {.column .fragment .incremental width="33%"}
**Part 1: Get started**

-   Get started with APIs
-   Quickly parse API responses
-   Tell APIs who you are
:::
::: {.column .fragment .incremental width="33%"}
**Part 2: Get more data**

-   Get a lot of data from APIs
-   Scrape data from web pages
-   Process other responses types
:::
::: {.column .fragment .incremental width="33%"}
**Part 3: Do more with APIs**

-   Do other things with APIs
-   Find APIs
-   Communicate with other types of APIs
-   Learn more about APIs
:::
::::

::: notes
-   Any missing topics?
:::

## What won't I learn?

-   How can I access APIs with {[httr](https://httr.r-lib.org/)} or {[curl](https://jeroen.r-universe.dev/curl)}?
-   How can I create an API?
-   How can I access APIs from other programming languages?

::: notes
-   Anything else people would expect?
-   For now at least, {plumber} didn't make the cut. Separate book?
:::

## Who should read this book?

-   Data Analysts/Scientists
    -   Access datasets
    -   Enrich datasets
-   Machine Learning Engineers
    -   Feature engineering
-   Shiny App Designers
    -   Load/process data

::: notes
-   People who analyze data, not necessarily that job title.
-   Does anybody fit into something other than those use cases?
:::

## Prerequisites

-   Familiarity with R
    -   [R for Data Science](https://r4ds.hadley.nz/)
-   Very few hard prerequisites
    -   Will point to resources when helpful
-   Helpful:
    -   [Advanced R](https://adv-r.hadley.nz/) to do more complicated things with retrieved data

::: notes
-   How many have read R4DS?
-   How many have read Advanced R?
-   How many have written a function?
-   Accessed an API from R with httr?
-   Accessed an API from R with httr2?
-   Accessed an API from R some other way?
-   Discuss level I can assume.
:::

## How are chapters structured?

-   Learning Objectives ‚âà skills
    -   "After you read this chapter, you will be able to..."
-   Test-Yourself Questions to check understanding
-   Check online version for updates
